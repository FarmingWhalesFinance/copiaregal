[{"C:\\Users\\rober\\Documents\\swaps-client\\src\\index.js":"1","C:\\Users\\rober\\Documents\\swaps-client\\src\\reportWebVitals.js":"2","C:\\Users\\rober\\Documents\\swaps-client\\src\\App.js":"3","C:\\Users\\rober\\Documents\\swaps-client\\src\\segmentAnalytics.js":"4","C:\\Users\\rober\\Documents\\swaps-client\\src\\Helpers.js":"5","C:\\Users\\rober\\Documents\\swaps-client\\src\\Addresses.js":"6","C:\\Users\\rober\\Documents\\swaps-client\\src\\data\\Tokens.js":"7","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Stake\\StakeV2.js":"8","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Dashboard\\DashboardV2.js":"9","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Actions\\Actions.js":"10","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\SellMlp\\SellMlp.js":"11","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\PositionsOverview\\PositionsOverview.js":"12","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\OrdersOverview\\OrdersOverview.js":"13","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Exchange\\Exchange.js":"14","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Rewards\\Rewards.js":"15","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\PageNotFound\\PageNotFound.js":"16","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\BuyMlp\\BuyMlp.js":"17","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Navigation\\MobileNav.js":"18","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\ConsentModal\\ConsentModal.js":"19","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\NetworkSelector\\NetworkSelector.js":"20","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\Referrals.js":"21","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Checkbox\\Checkbox.js":"22","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Modal\\Modal.js":"23","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Common\\Button.js":"24","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\AddressDropdown\\AddressDropdown.js":"25","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\EventToast\\useEventToast.js":"26","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Navigation\\LinkDropdown\\LinkDropdown.js":"27","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\EventToast\\EventToastContainer.js":"28","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\EventModal\\EventModal.js":"29","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\AppDropdown\\AppDropdown.js":"30","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Navigation\\Sidebar\\Sidebar.js":"31","C:\\Users\\rober\\Documents\\swaps-client\\src\\config\\localstorage.ts":"32","C:\\Users\\rober\\Documents\\swaps-client\\src\\hooks\\useRouteQuery.ts":"33","C:\\Users\\rober\\Documents\\swaps-client\\src\\hooks\\useInfoTokens.ts":"34","C:\\Users\\rober\\Documents\\swaps-client\\src\\Api\\referrals.ts":"35","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Tooltip\\ComingSoon.js":"36","C:\\Users\\rober\\Documents\\swaps-client\\src\\Constants.js":"37","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Common\\SEO.js":"38","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Stake\\ClaimModal.js":"39","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Stake\\StakeV2Styles.js":"40","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Tooltip\\Tooltip.js":"41","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Stake\\MlpPriceChart.js":"42","C:\\Users\\rober\\Documents\\swaps-client\\src\\data\\Fees.js":"43","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Navigation\\Sidebar\\Sidebar.styles.js":"44","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\AppDropdown\\AppDropdown.styles.js":"45","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\AppDropdown\\presets.js":"46","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\EventModal\\EventModal.styles.js":"47","C:\\Users\\rober\\Documents\\swaps-client\\src\\utils\\common.ts":"48","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Toggle\\Toggle.js":"49","C:\\Users\\rober\\Documents\\swaps-client\\src\\hooks\\useOutsideClick.ts":"50","C:\\Users\\rober\\Documents\\swaps-client\\src\\config\\referrals.ts":"51","C:\\Users\\rober\\Documents\\swaps-client\\src\\Api\\common.ts":"52","C:\\Users\\rober\\Documents\\swaps-client\\src\\Api\\index.js":"53","C:\\Users\\rober\\Documents\\swaps-client\\src\\config\\links.ts":"54","C:\\Users\\rober\\Documents\\swaps-client\\src\\lib\\index.ts":"55","C:\\Users\\rober\\Documents\\swaps-client\\src\\Api\\prices.ts":"56","C:\\Users\\rober\\Documents\\swaps-client\\src\\lib\\servers.ts":"57","C:\\Users\\rober\\Documents\\swaps-client\\src\\lib\\swr\\index.ts":"58","C:\\Users\\rober\\Documents\\swaps-client\\src\\lib\\swr\\contractFetcher.ts":"59","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Toggle\\Toggle.styles.js":"60","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Navigation\\LinkDropdown\\LinkDropdown.styles.js":"61","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\EventToast\\EventToast.js":"62","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\ReferralLeaderboard.js":"63","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\ReferralCodesTable.js":"64","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\AccountBanner.js":"65","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\ReferralRewards.js":"66","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\TraderRebateStats.js":"67","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\EnterCodeModal.js":"68","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\CreateCodeModal.js":"69","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\Referrals.styles.js":"70","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Navigation\\MobileNav.styles.js":"71","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\ViewSwitchTriple\\ViewSwitchTriple.js":"72","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Rewards\\Rewards.styles.js":"73","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Rewards\\Leaderboard.js":"74","C:\\Users\\rober\\Documents\\swaps-client\\src\\config\\events.ts":"75","C:\\Users\\rober\\Documents\\swaps-client\\src\\hooks\\useLockBodyScroll.ts":"76","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Mlp\\MlpSwap.js":"77","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\RewardsRoundSelect\\RewardsRoundSelect.js":"78","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\ViewSwitch\\ViewSwitch.js":"79","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Rewards\\TraderRewards.js":"80","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\TradingCompBanner.js":"81","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\TradeHistory.js":"82","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeWalletTokens.js":"83","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\OrdersList.js":"84","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\PositionsList.js":"85","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeTVChart.js":"86","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\SwapBox.js":"87","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Tab\\Tab.js":"88","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Dashboard\\AssetDropdown.js":"89","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\EventToast\\AnnouncementIcon.js":"90","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\ReferralLeaderboard.styles.js":"91","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\presets.js":"92","C:\\Users\\rober\\Documents\\swaps-client\\src\\Shared.styles.js":"93","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\ViewSwitchTriple\\ViewSwitchTriple.styles.js":"94","C:\\Users\\rober\\Documents\\swaps-client\\src\\utils\\referrals.ts":"95","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\TokenSelector.js":"96","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\RewardsRoundSelect\\RewardsRoundSelect.styles.js":"97","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\ViewSwitch\\ViewSwitch.styles.js":"98","C:\\Users\\rober\\Documents\\swaps-client\\src\\hooks\\useDebounce.ts":"99","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\BuyInputSection\\BuyInputSection.js":"100","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\TradingCompBanner.styles.js":"101","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\LeverageInput.js":"102","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\OrderEditor.js":"103","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\PositionSeller.js":"104","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\PositionEditor.js":"105","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\OrdersToa.js":"106","C:\\Users\\rober\\Documents\\swaps-client\\src\\utils\\analytics.ts":"107","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ConfirmationBox.js":"108","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeInfoRow.js":"109","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeHeader\\index.js":"110","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeAdvancedTVChart\\index.js":"111","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Tooltip\\TooltipRow.js":"112","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ChartTokenSelector.js":"113","C:\\Users\\rober\\Documents\\swaps-client\\src\\utils\\tokens.ts":"114","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Tooltip\\Tooltip.styles.js":"115","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeHeader\\ChartToggle\\index.js":"116","C:\\Users\\rober\\Documents\\swaps-client\\src\\Api\\TradingView\\index.js":"117","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeHeader\\ChartToggle\\ChartToggle.styles.js":"118","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\index.js":"119","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\reportWebVitals.js":"120","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\App.js":"121","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\segmentAnalytics.js":"122","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Helpers.js":"123","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Addresses.js":"124","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\data\\Tokens.js":"125","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Stake\\StakeV2.js":"126","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\OrdersOverview\\OrdersOverview.js":"127","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Exchange\\Exchange.js":"128","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\PositionsOverview\\PositionsOverview.js":"129","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\SellMlp\\SellMlp.js":"130","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Dashboard\\DashboardV2.js":"131","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Actions\\Actions.js":"132","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Rewards\\Rewards.js":"133","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\BuyMlp\\BuyMlp.js":"134","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\PageNotFound\\PageNotFound.js":"135","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\ConsentModal\\ConsentModal.js":"136","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Navigation\\MobileNav.js":"137","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\NetworkSelector\\NetworkSelector.js":"138","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Checkbox\\Checkbox.js":"139","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\Referrals.js":"140","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Modal\\Modal.js":"141","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\AddressDropdown\\AddressDropdown.js":"142","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Common\\Button.js":"143","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\EventToast\\useEventToast.js":"144","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Navigation\\Sidebar\\Sidebar.js":"145","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\EventToast\\EventToastContainer.js":"146","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\AppDropdown\\AppDropdown.js":"147","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Navigation\\LinkDropdown\\LinkDropdown.js":"148","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\config\\localstorage.ts":"149","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\hooks\\useInfoTokens.ts":"150","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\hooks\\useRouteQuery.ts":"151","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Api\\referrals.ts":"152","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Tooltip\\ComingSoon.js":"153","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Tooltip\\Tooltip.js":"154","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Stake\\MlpPriceChart.js":"155","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Stake\\StakeV2Styles.js":"156","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Constants.js":"157","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Common\\SEO.js":"158","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Stake\\ClaimModal.js":"159","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Navigation\\LinkDropdown\\LinkDropdown.styles.js":"160","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\AppDropdown\\presets.js":"161","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\AppDropdown\\AppDropdown.styles.js":"162","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Navigation\\Sidebar\\Sidebar.styles.js":"163","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\EventToast\\EventToast.js":"164","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Toggle\\Toggle.js":"165","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\TradingCompBanner.js":"166","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\utils\\common.ts":"167","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\hooks\\useOutsideClick.ts":"168","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\config\\events.ts":"169","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\config\\referrals.ts":"170","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\EventToast\\AnnouncementIcon.js":"171","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Api\\index.js":"172","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\TradingCompBanner.styles.js":"173","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\config\\links.ts":"174","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\lib\\index.ts":"175","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Api\\prices.ts":"176","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\lib\\servers.ts":"177","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Api\\common.ts":"178","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\lib\\swr\\index.ts":"179","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\lib\\swr\\contractFetcher.ts":"180","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Toggle\\Toggle.styles.js":"181","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\ReferralLeaderboard.js":"182","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\ReferralCodesTable.js":"183","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\AccountBanner.js":"184","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\ReferralRewards.js":"185","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\TraderRebateStats.js":"186","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\EnterCodeModal.js":"187","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\CreateCodeModal.js":"188","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\Referrals.styles.js":"189","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Navigation\\MobileNav.styles.js":"190","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\ViewSwitchTriple\\ViewSwitchTriple.js":"191","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Rewards\\Rewards.styles.js":"192","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Rewards\\TraderRewards.js":"193","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Rewards\\Leaderboard.js":"194","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\TradeHistory.js":"195","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\OrdersList.js":"196","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\PositionsList.js":"197","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Dashboard\\AssetDropdown.js":"198","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\data\\Fees.js":"199","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\RewardsRoundSelect\\RewardsRoundSelect.js":"200","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Mlp\\MlpSwap.js":"201","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\hooks\\useLockBodyScroll.ts":"202","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\ViewSwitch\\ViewSwitch.js":"203","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeWalletTokens.js":"204","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Tab\\Tab.js":"205","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeTVChart.js":"206","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\SwapBox.js":"207","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\presets.js":"208","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Shared.styles.js":"209","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\ReferralLeaderboard.styles.js":"210","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\ViewSwitchTriple\\ViewSwitchTriple.styles.js":"211","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\OrderEditor.js":"212","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\PositionSeller.js":"213","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\PositionEditor.js":"214","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\OrdersToa.js":"215","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\RewardsRoundSelect\\RewardsRoundSelect.styles.js":"216","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\utils\\referrals.ts":"217","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\hooks\\useDebounce.ts":"218","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\ViewSwitch\\ViewSwitch.styles.js":"219","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\TokenSelector.js":"220","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\BuyInputSection\\BuyInputSection.js":"221","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\LeverageInput.js":"222","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ConfirmationBox.js":"223","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeInfoRow.js":"224","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\utils\\analytics.ts":"225","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeHeader\\index.js":"226","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeAdvancedTVChart\\index.js":"227","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Tooltip\\TooltipRow.js":"228","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\utils\\tokens.ts":"229","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ChartTokenSelector.js":"230","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Tooltip\\Tooltip.styles.js":"231","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeHeader\\ChartToggle\\index.js":"232","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Api\\TradingView\\index.js":"233","C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeHeader\\ChartToggle\\ChartToggle.styles.js":"234"},{"size":590,"mtime":1668539471000,"results":"235","hashOfConfig":"236"},{"size":364,"mtime":1668539471000,"results":"237","hashOfConfig":"236"},{"size":43759,"mtime":1668625027109,"results":"238","hashOfConfig":"236"},{"size":5283,"mtime":1668539471000,"results":"239","hashOfConfig":"236"},{"size":86445,"mtime":1668539471000,"results":"240","hashOfConfig":"236"},{"size":5717,"mtime":1668539471000,"results":"241","hashOfConfig":"236"},{"size":7158,"mtime":1668539471000,"results":"242","hashOfConfig":"236"},{"size":26582,"mtime":1668539471000,"results":"243","hashOfConfig":"236"},{"size":36851,"mtime":1668624446042,"results":"244","hashOfConfig":"236"},{"size":4404,"mtime":1668539471000,"results":"245","hashOfConfig":"236"},{"size":206,"mtime":1668539471000,"results":"246","hashOfConfig":"236"},{"size":2054,"mtime":1668539471000,"results":"247","hashOfConfig":"236"},{"size":10544,"mtime":1668539471000,"results":"248","hashOfConfig":"236"},{"size":35253,"mtime":1668539471000,"results":"249","hashOfConfig":"236"},{"size":11091,"mtime":1668539471000,"results":"250","hashOfConfig":"236"},{"size":697,"mtime":1668539471000,"results":"251","hashOfConfig":"236"},{"size":1570,"mtime":1668539471000,"results":"252","hashOfConfig":"236"},{"size":5528,"mtime":1668624554152,"results":"253","hashOfConfig":"236"},{"size":876,"mtime":1668624933480,"results":"254","hashOfConfig":"236"},{"size":6639,"mtime":1668539471000,"results":"255","hashOfConfig":"236"},{"size":13626,"mtime":1668539471000,"results":"256","hashOfConfig":"236"},{"size":797,"mtime":1668539471000,"results":"257","hashOfConfig":"236"},{"size":2023,"mtime":1668539471000,"results":"258","hashOfConfig":"236"},{"size":1359,"mtime":1668539471000,"results":"259","hashOfConfig":"236"},{"size":3125,"mtime":1668539471000,"results":"260","hashOfConfig":"236"},{"size":1083,"mtime":1668539471000,"results":"261","hashOfConfig":"236"},{"size":1918,"mtime":1668623679302,"results":"262","hashOfConfig":"236"},{"size":742,"mtime":1668539471000,"results":"263","hashOfConfig":"236"},{"size":2274,"mtime":1668539471000,"results":"264","hashOfConfig":"236"},{"size":2108,"mtime":1668539471000,"results":"265","hashOfConfig":"236"},{"size":4548,"mtime":1668539471000,"results":"266","hashOfConfig":"236"},{"size":828,"mtime":1668539471000,"results":"267","hashOfConfig":"236"},{"size":225,"mtime":1668539471000,"results":"268","hashOfConfig":"236"},{"size":7781,"mtime":1668539471000,"results":"269","hashOfConfig":"236"},{"size":13305,"mtime":1668539471000,"results":"270","hashOfConfig":"236"},{"size":252,"mtime":1668539471000,"results":"271","hashOfConfig":"236"},{"size":1385,"mtime":1668539471000,"results":"272","hashOfConfig":"236"},{"size":1353,"mtime":1668539471000,"results":"273","hashOfConfig":"236"},{"size":6365,"mtime":1668539471000,"results":"274","hashOfConfig":"236"},{"size":3793,"mtime":1668539471000,"results":"275","hashOfConfig":"236"},{"size":2264,"mtime":1668539471000,"results":"276","hashOfConfig":"236"},{"size":7414,"mtime":1668539471000,"results":"277","hashOfConfig":"236"},{"size":622,"mtime":1668539471000,"results":"278","hashOfConfig":"236"},{"size":5895,"mtime":1668539471000,"results":"279","hashOfConfig":"236"},{"size":3588,"mtime":1668539471000,"results":"280","hashOfConfig":"236"},{"size":1063,"mtime":1668539471000,"results":"281","hashOfConfig":"236"},{"size":3909,"mtime":1668539471000,"results":"282","hashOfConfig":"236"},{"size":506,"mtime":1668539471000,"results":"283","hashOfConfig":"236"},{"size":370,"mtime":1668539471000,"results":"284","hashOfConfig":"236"},{"size":448,"mtime":1668539471000,"results":"285","hashOfConfig":"236"},{"size":346,"mtime":1668539471000,"results":"286","hashOfConfig":"236"},{"size":956,"mtime":1668539471000,"results":"287","hashOfConfig":"236"},{"size":40654,"mtime":1668539471000,"results":"288","hashOfConfig":"236"},{"size":802,"mtime":1668539471000,"results":"289","hashOfConfig":"236"},{"size":50,"mtime":1668539471000,"results":"290","hashOfConfig":"236"},{"size":9105,"mtime":1668539471000,"results":"291","hashOfConfig":"236"},{"size":686,"mtime":1668539471000,"results":"292","hashOfConfig":"236"},{"size":35,"mtime":1668539471000,"results":"293","hashOfConfig":"236"},{"size":2462,"mtime":1668539471000,"results":"294","hashOfConfig":"236"},{"size":732,"mtime":1668539471000,"results":"295","hashOfConfig":"236"},{"size":1721,"mtime":1668539471000,"results":"296","hashOfConfig":"236"},{"size":1098,"mtime":1668539471000,"results":"297","hashOfConfig":"236"},{"size":5811,"mtime":1668539471000,"results":"298","hashOfConfig":"236"},{"size":3448,"mtime":1668539471000,"results":"299","hashOfConfig":"236"},{"size":4304,"mtime":1668539471000,"results":"300","hashOfConfig":"236"},{"size":2567,"mtime":1668539471000,"results":"301","hashOfConfig":"236"},{"size":2271,"mtime":1668539471000,"results":"302","hashOfConfig":"236"},{"size":4409,"mtime":1668539471000,"results":"303","hashOfConfig":"236"},{"size":5256,"mtime":1668539471000,"results":"304","hashOfConfig":"236"},{"size":7536,"mtime":1668539471000,"results":"305","hashOfConfig":"236"},{"size":5624,"mtime":1668539471000,"results":"306","hashOfConfig":"236"},{"size":678,"mtime":1668539471000,"results":"307","hashOfConfig":"236"},{"size":7729,"mtime":1668539471000,"results":"308","hashOfConfig":"236"},{"size":8578,"mtime":1668539471000,"results":"309","hashOfConfig":"236"},{"size":570,"mtime":1668539471000,"results":"310","hashOfConfig":"236"},{"size":436,"mtime":1668539471000,"results":"311","hashOfConfig":"236"},{"size":52813,"mtime":1668539471000,"results":"312","hashOfConfig":"236"},{"size":3148,"mtime":1668539471000,"results":"313","hashOfConfig":"236"},{"size":813,"mtime":1668539471000,"results":"314","hashOfConfig":"236"},{"size":4692,"mtime":1668539471000,"results":"315","hashOfConfig":"236"},{"size":1846,"mtime":1668539471000,"results":"316","hashOfConfig":"236"},{"size":17195,"mtime":1668539471000,"results":"317","hashOfConfig":"236"},{"size":1723,"mtime":1668539471000,"results":"318","hashOfConfig":"236"},{"size":14748,"mtime":1668539471000,"results":"319","hashOfConfig":"236"},{"size":26640,"mtime":1668539471000,"results":"320","hashOfConfig":"236"},{"size":10312,"mtime":1668539471000,"results":"321","hashOfConfig":"236"},{"size":79688,"mtime":1668539471000,"results":"322","hashOfConfig":"236"},{"size":1143,"mtime":1668539471000,"results":"323","hashOfConfig":"236"},{"size":3087,"mtime":1668539471000,"results":"324","hashOfConfig":"236"},{"size":586,"mtime":1668539471000,"results":"325","hashOfConfig":"236"},{"size":5163,"mtime":1668539471000,"results":"326","hashOfConfig":"236"},{"size":1377,"mtime":1668539471000,"results":"327","hashOfConfig":"236"},{"size":366,"mtime":1668539471000,"results":"328","hashOfConfig":"236"},{"size":1126,"mtime":1668539471000,"results":"329","hashOfConfig":"236"},{"size":979,"mtime":1668539471000,"results":"330","hashOfConfig":"236"},{"size":5824,"mtime":1668539471000,"results":"331","hashOfConfig":"236"},{"size":1587,"mtime":1668539471000,"results":"332","hashOfConfig":"236"},{"size":1263,"mtime":1668539471000,"results":"333","hashOfConfig":"236"},{"size":785,"mtime":1668539471000,"results":"334","hashOfConfig":"236"},{"size":1960,"mtime":1668539471000,"results":"335","hashOfConfig":"236"},{"size":2100,"mtime":1668539471000,"results":"336","hashOfConfig":"236"},{"size":3580,"mtime":1668539471000,"results":"337","hashOfConfig":"236"},{"size":13947,"mtime":1668539471000,"results":"338","hashOfConfig":"236"},{"size":46829,"mtime":1668539471000,"results":"339","hashOfConfig":"236"},{"size":21476,"mtime":1668539471000,"results":"340","hashOfConfig":"236"},{"size":2038,"mtime":1668539471000,"results":"341","hashOfConfig":"236"},{"size":326,"mtime":1668539471000,"results":"342","hashOfConfig":"236"},{"size":22745,"mtime":1668539471000,"results":"343","hashOfConfig":"236"},{"size":410,"mtime":1668539471000,"results":"344","hashOfConfig":"236"},{"size":3898,"mtime":1668539471000,"results":"345","hashOfConfig":"236"},{"size":8055,"mtime":1668539471000,"results":"346","hashOfConfig":"236"},{"size":574,"mtime":1668539471000,"results":"347","hashOfConfig":"236"},{"size":2313,"mtime":1668539471000,"results":"348","hashOfConfig":"236"},{"size":2110,"mtime":1668539471000,"results":"349","hashOfConfig":"236"},{"size":740,"mtime":1668539471000,"results":"350","hashOfConfig":"236"},{"size":851,"mtime":1668539471000,"results":"351","hashOfConfig":"236"},{"size":2403,"mtime":1668539471000,"results":"352","hashOfConfig":"236"},{"size":1012,"mtime":1668539471000,"results":"353","hashOfConfig":"236"},{"size":590,"mtime":1668539471000,"results":"354","hashOfConfig":"355"},{"size":364,"mtime":1668539471000,"results":"356","hashOfConfig":"355"},{"size":43759,"mtime":1668625027109,"results":"357","hashOfConfig":"355"},{"size":5283,"mtime":1668539471000,"results":"358","hashOfConfig":"355"},{"size":86445,"mtime":1668539471000,"results":"359","hashOfConfig":"355"},{"size":5717,"mtime":1668539471000,"results":"360","hashOfConfig":"355"},{"size":7158,"mtime":1668539471000,"results":"361","hashOfConfig":"355"},{"size":26582,"mtime":1668539471000,"results":"362","hashOfConfig":"355"},{"size":10544,"mtime":1668539471000,"results":"363","hashOfConfig":"355"},{"size":35253,"mtime":1668539471000,"results":"364","hashOfConfig":"355"},{"size":2054,"mtime":1668539471000,"results":"365","hashOfConfig":"355"},{"size":206,"mtime":1668539471000,"results":"366","hashOfConfig":"355"},{"size":36851,"mtime":1668624446042,"results":"367","hashOfConfig":"355"},{"size":4404,"mtime":1668539471000,"results":"368","hashOfConfig":"355"},{"size":11091,"mtime":1668539471000,"results":"369","hashOfConfig":"355"},{"size":1570,"mtime":1668539471000,"results":"370","hashOfConfig":"355"},{"size":697,"mtime":1668539471000,"results":"371","hashOfConfig":"355"},{"size":876,"mtime":1668624933480,"results":"372","hashOfConfig":"355"},{"size":5528,"mtime":1668624554152,"results":"373","hashOfConfig":"355"},{"size":6639,"mtime":1668539471000,"results":"374","hashOfConfig":"355"},{"size":797,"mtime":1668539471000,"results":"375","hashOfConfig":"355"},{"size":13626,"mtime":1668539471000,"results":"376","hashOfConfig":"355"},{"size":2023,"mtime":1668539471000,"results":"377","hashOfConfig":"355"},{"size":3125,"mtime":1668539471000,"results":"378","hashOfConfig":"355"},{"size":1359,"mtime":1668539471000,"results":"379","hashOfConfig":"355"},{"size":1083,"mtime":1668539471000,"results":"380","hashOfConfig":"355"},{"size":4548,"mtime":1668539471000,"results":"381","hashOfConfig":"355"},{"size":742,"mtime":1668539471000,"results":"382","hashOfConfig":"355"},{"size":2108,"mtime":1668539471000,"results":"383","hashOfConfig":"355"},{"size":1918,"mtime":1668623679302,"results":"384","hashOfConfig":"355"},{"size":828,"mtime":1668539471000,"results":"385","hashOfConfig":"355"},{"size":7781,"mtime":1668539471000,"results":"386","hashOfConfig":"355"},{"size":225,"mtime":1668539471000,"results":"387","hashOfConfig":"355"},{"size":13305,"mtime":1668539471000,"results":"388","hashOfConfig":"355"},{"size":252,"mtime":1668539471000,"results":"389","hashOfConfig":"355"},{"size":2264,"mtime":1668539471000,"results":"390","hashOfConfig":"355"},{"size":7414,"mtime":1668539471000,"results":"391","hashOfConfig":"355"},{"size":3793,"mtime":1668539471000,"results":"392","hashOfConfig":"355"},{"size":1385,"mtime":1668539471000,"results":"393","hashOfConfig":"355"},{"size":1353,"mtime":1668539471000,"results":"394","hashOfConfig":"355"},{"size":6365,"mtime":1668539471000,"results":"395","hashOfConfig":"355"},{"size":1721,"mtime":1668539471000,"results":"396","hashOfConfig":"355"},{"size":1063,"mtime":1668539471000,"results":"397","hashOfConfig":"355"},{"size":3588,"mtime":1668539471000,"results":"398","hashOfConfig":"355"},{"size":5895,"mtime":1668539471000,"results":"399","hashOfConfig":"355"},{"size":1098,"mtime":1668539471000,"results":"400","hashOfConfig":"355"},{"size":370,"mtime":1668539471000,"results":"401","hashOfConfig":"355"},{"size":1846,"mtime":1668539471000,"results":"402","hashOfConfig":"355"},{"size":506,"mtime":1668539471000,"results":"403","hashOfConfig":"355"},{"size":448,"mtime":1668539471000,"results":"404","hashOfConfig":"355"},{"size":570,"mtime":1668539471000,"results":"405","hashOfConfig":"355"},{"size":346,"mtime":1668539471000,"results":"406","hashOfConfig":"355"},{"size":586,"mtime":1668539471000,"results":"407","hashOfConfig":"355"},{"size":40654,"mtime":1668539471000,"results":"408","hashOfConfig":"355"},{"size":2100,"mtime":1668539471000,"results":"409","hashOfConfig":"355"},{"size":802,"mtime":1668539471000,"results":"410","hashOfConfig":"355"},{"size":50,"mtime":1668539471000,"results":"411","hashOfConfig":"355"},{"size":9105,"mtime":1668539471000,"results":"412","hashOfConfig":"355"},{"size":686,"mtime":1668539471000,"results":"413","hashOfConfig":"355"},{"size":956,"mtime":1668539471000,"results":"414","hashOfConfig":"355"},{"size":35,"mtime":1668539471000,"results":"415","hashOfConfig":"355"},{"size":2462,"mtime":1668539471000,"results":"416","hashOfConfig":"355"},{"size":732,"mtime":1668539471000,"results":"417","hashOfConfig":"355"},{"size":5811,"mtime":1668539471000,"results":"418","hashOfConfig":"355"},{"size":3448,"mtime":1668539471000,"results":"419","hashOfConfig":"355"},{"size":4304,"mtime":1668539471000,"results":"420","hashOfConfig":"355"},{"size":2567,"mtime":1668539471000,"results":"421","hashOfConfig":"355"},{"size":2271,"mtime":1668539471000,"results":"422","hashOfConfig":"355"},{"size":4409,"mtime":1668539471000,"results":"423","hashOfConfig":"355"},{"size":5256,"mtime":1668539471000,"results":"424","hashOfConfig":"355"},{"size":7536,"mtime":1668539471000,"results":"425","hashOfConfig":"355"},{"size":5624,"mtime":1668539471000,"results":"426","hashOfConfig":"355"},{"size":678,"mtime":1668539471000,"results":"427","hashOfConfig":"355"},{"size":7729,"mtime":1668539471000,"results":"428","hashOfConfig":"355"},{"size":4692,"mtime":1668539471000,"results":"429","hashOfConfig":"355"},{"size":8578,"mtime":1668539471000,"results":"430","hashOfConfig":"355"},{"size":17195,"mtime":1668539471000,"results":"431","hashOfConfig":"355"},{"size":14748,"mtime":1668539471000,"results":"432","hashOfConfig":"355"},{"size":26640,"mtime":1668539471000,"results":"433","hashOfConfig":"355"},{"size":3087,"mtime":1668539471000,"results":"434","hashOfConfig":"355"},{"size":622,"mtime":1668539471000,"results":"435","hashOfConfig":"355"},{"size":3148,"mtime":1668539471000,"results":"436","hashOfConfig":"355"},{"size":52813,"mtime":1668539471000,"results":"437","hashOfConfig":"355"},{"size":436,"mtime":1668539471000,"results":"438","hashOfConfig":"355"},{"size":813,"mtime":1668539471000,"results":"439","hashOfConfig":"355"},{"size":1723,"mtime":1668539471000,"results":"440","hashOfConfig":"355"},{"size":1143,"mtime":1668539471000,"results":"441","hashOfConfig":"355"},{"size":10312,"mtime":1668539471000,"results":"442","hashOfConfig":"355"},{"size":79688,"mtime":1668539471000,"results":"443","hashOfConfig":"355"},{"size":1377,"mtime":1668539471000,"results":"444","hashOfConfig":"355"},{"size":366,"mtime":1668539471000,"results":"445","hashOfConfig":"355"},{"size":5163,"mtime":1668539471000,"results":"446","hashOfConfig":"355"},{"size":1126,"mtime":1668539471000,"results":"447","hashOfConfig":"355"},{"size":13947,"mtime":1668539471000,"results":"448","hashOfConfig":"355"},{"size":46829,"mtime":1668539471000,"results":"449","hashOfConfig":"355"},{"size":21476,"mtime":1668539471000,"results":"450","hashOfConfig":"355"},{"size":2038,"mtime":1668539471000,"results":"451","hashOfConfig":"355"},{"size":1587,"mtime":1668539471000,"results":"452","hashOfConfig":"355"},{"size":979,"mtime":1668539471000,"results":"453","hashOfConfig":"355"},{"size":785,"mtime":1668539471000,"results":"454","hashOfConfig":"355"},{"size":1263,"mtime":1668539471000,"results":"455","hashOfConfig":"355"},{"size":5824,"mtime":1668539471000,"results":"456","hashOfConfig":"355"},{"size":1960,"mtime":1668539471000,"results":"457","hashOfConfig":"355"},{"size":3580,"mtime":1668539471000,"results":"458","hashOfConfig":"355"},{"size":22745,"mtime":1668539471000,"results":"459","hashOfConfig":"355"},{"size":410,"mtime":1668539471000,"results":"460","hashOfConfig":"355"},{"size":326,"mtime":1668539471000,"results":"461","hashOfConfig":"355"},{"size":3898,"mtime":1668539471000,"results":"462","hashOfConfig":"355"},{"size":8055,"mtime":1668539471000,"results":"463","hashOfConfig":"355"},{"size":574,"mtime":1668539471000,"results":"464","hashOfConfig":"355"},{"size":2110,"mtime":1668539471000,"results":"465","hashOfConfig":"355"},{"size":2313,"mtime":1668539471000,"results":"466","hashOfConfig":"355"},{"size":740,"mtime":1668539471000,"results":"467","hashOfConfig":"355"},{"size":851,"mtime":1668539471000,"results":"468","hashOfConfig":"355"},{"size":2403,"mtime":1668539471000,"results":"469","hashOfConfig":"355"},{"size":1012,"mtime":1668539471000,"results":"470","hashOfConfig":"355"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},"ep7ssp",{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"473"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"473"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"473"},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"473"},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"473"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"473"},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515"},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"473"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"534","messages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541","usedDeprecatedRules":"473"},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"544","messages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"473"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"554","messages":"555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"473"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"473"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"473"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"473"},{"filePath":"616","messages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"634","messages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652","usedDeprecatedRules":"473"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"699","usedDeprecatedRules":"473"},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"702","messages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"712","messages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"714","messages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"716","messages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"718","messages":"719","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"549"},{"filePath":"720","messages":"721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"473"},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9mlens",{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"734","messages":"735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"740","messages":"741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"750","messages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"752","messages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"758","messages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"764","messages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"772","messages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"786","messages":"787","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"788","messages":"789","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"792","messages":"793","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"794","messages":"795","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"798","messages":"799","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"800","messages":"801","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"802","messages":"803","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"804","messages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"806","messages":"807","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"808","messages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"810","messages":"811","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"812","messages":"813","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"814","messages":"815","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"816","messages":"817","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"818","messages":"819","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"820","messages":"821","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"822","messages":"823","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"824","messages":"825","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"826","messages":"827","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"828","messages":"829","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"830","messages":"831","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"832","messages":"833","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"834","messages":"835","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"836","messages":"837","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"838","messages":"839","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"840","messages":"841","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"842","messages":"843","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"844","messages":"845","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"846","messages":"847","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"848","messages":"849","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"850","messages":"851","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"852","messages":"853","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"854","messages":"855","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"856","messages":"857","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"858","messages":"859","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"860","messages":"861","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"862","messages":"863","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"864","messages":"865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"866","messages":"867","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"868","messages":"869","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"870","messages":"871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"872","messages":"873","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"874","messages":"875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"876","messages":"877","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"878","messages":"879","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"880","messages":"881","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"882","messages":"883","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"884","messages":"885","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"886","messages":"887","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"888","messages":"889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"890","messages":"891","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"892","messages":"893","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"894","messages":"895","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"896","messages":"897","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"898","messages":"899","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"900","messages":"901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"902","messages":"903","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"904","messages":"905","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"906","messages":"907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"908","messages":"909","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"912","messages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"914","messages":"915","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"920","messages":"921","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"922","messages":"923","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"924","messages":"925","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"926","messages":"927","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"928","messages":"929","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"930","messages":"931","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"932","messages":"933","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"934","messages":"935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"936","messages":"937","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"938","messages":"939","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"940","messages":"941","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"942","messages":"943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"946","messages":"947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"948","messages":"949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"950","messages":"951","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"952","messages":"953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"956","messages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"958","messages":"959","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\rober\\Documents\\swaps-client\\src\\index.js",[],["960","961"],"C:\\Users\\rober\\Documents\\swaps-client\\src\\reportWebVitals.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\App.js",["962","963"],"import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { SWRConfig } from \"swr\";\nimport { ethers } from \"ethers\";\n\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nimport { Web3ReactProvider, useWeb3React } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\n\nimport { Switch, Route, NavLink, useLocation } from \"react-router-dom\";\n\nimport { ThemeProvider } from \"@tracer-protocol/tracer-ui\";\nimport { useAnalytics } from \"./segmentAnalytics\";\nimport { getTokens, getWhitelistedTokens } from \"./data/Tokens\";\n\nimport {\n  SLIPPAGE_BPS_KEY,\n  IS_PNL_IN_LEVERAGE_KEY,\n  SHOW_PNL_AFTER_FEES_KEY,\n  SHOULD_SHOW_POSITION_LINES_KEY,\n  REFERRAL_CODE_KEY,\n  REFERRAL_CODE_QUERY_PARAMS,\n  SHOULD_EAGER_CONNECT_LOCALSTORAGE_KEY,\n  CURRENT_PROVIDER_LOCALSTORAGE_KEY,\n} from \"./config/localstorage\";\n\nimport {\n  ARBITRUM,\n  ARBITRUM_GOERLI,\n  DEFAULT_SLIPPAGE_AMOUNT,\n  BASIS_POINTS_DIVISOR,\n  fetcher,\n  clearWalletConnectData,\n  switchNetwork,\n  helperToast,\n  getChainName,\n  useChainId,\n  getAccountUrl,\n  getInjectedHandler,\n  useEagerConnect,\n  useLocalStorageSerializeKey,\n  useInactiveListener,\n  getExplorerUrl,\n  getWalletConnectHandler,\n  activateInjectedProvider,\n  hasMetaMaskWalletExtension,\n  hasCoinBaseWalletExtension,\n  isMobileDevice,\n  clearWalletLinkData,\n  getBalanceAndSupplyData,\n  formatAmount,\n  formatTitleCase,\n  getUserTokenBalances,\n  hasChangedAccount,\n  setCurrentAccount,\n  networkOptions,\n  PLACEHOLDER_ACCOUNT,\n  getDefaultArbitrumRpcUrl,\n} from \"./Helpers\";\nimport ReaderV2 from \"./abis/ReaderV2.json\";\n\nimport Dashboard from \"./views/Dashboard/DashboardV2\";\nimport Stake from \"./views/Stake/StakeV2\";\nimport { Exchange } from \"./views/Exchange/Exchange\";\nimport Actions from \"./views/Actions/Actions\";\nimport OrdersOverview from \"./views/OrdersOverview/OrdersOverview\";\nimport PositionsOverview from \"./views/PositionsOverview/PositionsOverview\";\n// import BuyMYC from \"./views/BuyMYC/BuyMYC\";\nimport BuyMlp from \"./views/BuyMlp/BuyMlp\";\nimport SellMlp from \"./views/SellMlp/SellMlp\";\nimport Rewards from \"./views/Rewards/Rewards\";\nimport Referrals from \"./views/Referrals/Referrals\";\n// import NftWallet from \"./views/NftWallet/NftWallet\";\n// import BeginAccountTransfer from \"./views/BeginAccountTransfer/BeginAccountTransfer\";\n// import CompleteAccountTransfer from \"./views/CompleteAccountTransfer/CompleteAccountTransfer\";\n// import Debug from \"./views/Debug/Debug\";\nimport ConsentModal from \"./components/ConsentModal/ConsentModal\";\nimport MobileLinks from \"./components/Navigation/MobileNav\";\n\nimport cx from \"classnames\";\nimport { cssTransition, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport NetworkSelector from \"./components/NetworkSelector/NetworkSelector\";\nimport Modal from \"./components/Modal/Modal\";\nimport Checkbox from \"./components/Checkbox/Checkbox\";\n// import Footer from \"./Footer\";\n\nimport { RiMenuLine } from \"react-icons/ri\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { FiX } from \"react-icons/fi\";\n\nimport \"./Font.css\";\nimport \"./Shared.css\";\nimport \"./App.css\";\nimport \"./Input.css\";\nimport \"./AppOrder.css\";\n\nimport logoImg from \"./img/logo_MYC.svg\";\nimport logoSmallImg from \"./img/logo_MYC_small.svg\";\n// import poolsSmallImg from \"./img/myc_pools_short.svg\";\nimport connectWalletImg from \"./img/ic_wallet_24.svg\";\n\nimport metamaskImg from \"./img/metamask.png\";\nimport coinbaseImg from \"./img/coinbaseWallet.png\";\nimport walletConnectImg from \"./img/walletconnect-circle-blue.svg\";\nimport AddressDropdown from \"./components/AddressDropdown/AddressDropdown\";\nimport { ConnectWalletButton } from \"./components/Common/Button\";\nimport useEventToast from \"./components/EventToast/useEventToast\";\nimport { Link } from \"react-router-dom\";\nimport EventToastContainer from \"./components/EventToast/EventToastContainer\";\nimport useRouteQuery from \"./hooks/useRouteQuery\";\nimport { encodeReferralCode } from \"./Api/referrals\";\n\nimport { getContract } from \"./Addresses\";\nimport VaultV2 from \"./abis/VaultV2.json\";\nimport VaultV2b from \"./abis/VaultV2b.json\";\nimport PositionRouter from \"./abis/PositionRouter.json\";\nimport PageNotFound from \"./views/PageNotFound/PageNotFound\";\nimport useSWR from \"swr\";\nimport LinkDropdown from \"./components/Navigation/LinkDropdown/LinkDropdown\";\nimport Sidebar from \"./components/Navigation/Sidebar/Sidebar\";\n//import EventModal from \"./components/EventModal/EventModal\";\nimport AppDropdown from \"./components/AppDropdown/AppDropdown\";\nimport { useInfoTokens } from \"./hooks/useInfoTokens\";\n// import { Banner, BannerContent } from \"./components/Banner/Banner\";\n\nif (\"ethereum\" in window) {\n  window.ethereum.autoRefreshOnNetworkChange = false;\n}\n\nfunction getLibrary(provider) {\n  const library = new Web3Provider(provider);\n  return library;\n}\n\nconst Zoom = cssTransition({\n  enter: \"zoomIn\",\n  exit: \"zoomOut\",\n  appendPosition: false,\n  collapse: true,\n  collapseDuration: 200,\n  duration: 200,\n});\n\nfunction inPreviewMode() {\n  return false;\n}\n\nconst arbWsProvider = new ethers.providers.WebSocketProvider(getDefaultArbitrumRpcUrl(true));\nconst arbTestnetWsProvider = new ethers.providers.JsonRpcProvider(\"https://goerli-rollup.arbitrum.io/rpc/\");\n\nfunction getWsProvider(active, chainId) {\n  if (!active) {\n    return;\n  }\n  if (chainId === ARBITRUM) {\n    return arbWsProvider;\n  }\n\n  if (chainId === ARBITRUM_GOERLI) {\n    return arbTestnetWsProvider;\n  }\n}\n\nfunction AppHeaderLinks({ small, openSettings, clickCloseIcon, trackAction }) {\n  if (inPreviewMode()) {\n    return (\n      <div className=\"App-header-links preview\">\n        <div className=\"App-header-link-container App-header-link-home\">\n          <NavLink activeClassName=\"active\" exact to=\"/\">\n            HOME\n          </NavLink>\n        </div>\n        <div className=\"App-header-link-container\">\n          <NavLink activeClassName=\"active\" to=\"/earn\">\n            EARN\n          </NavLink>\n        </div>\n        <div className=\"App-header-link-container\">\n          <a\n            href=\"https://swaps.docs.mycelium.xyz/perpetual-swaps/mycelium-perpetual-swaps\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            ABOUT\n          </a>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"App-header-links\">\n      {small && (\n        <div className=\"App-header-links-header\">\n          <div className=\"App-header-menu-icon-block\" onClick={() => clickCloseIcon()}>\n            <FiX className=\"App-header-menu-icon\" />\n          </div>\n          <Link\n            className=\"App-header-link-main\"\n            to=\"/\"\n            onClick={() =>\n              trackAction &&\n              trackAction(\"Button clicked\", {\n                buttonName: \"Mycelium Nav Logo\",\n              })\n            }\n          >\n            <img src={logoImg} alt=\"Mycelium Swaps Logo\" />\n          </Link>\n        </div>\n      )}\n      {/* <div className=\"App-header-link-container\">\n        <NavLink exact activeClassName=\"active\" to=\"/dashboard\">\n          Dashboard\n        </NavLink>\n      </div> */}\n      <div className=\"App-header-link-container\">\n        <NavLink exact activeClassName=\"active\" to=\"/earn\">\n          Earn\n        </NavLink>\n      </div>\n      <div className=\"App-header-link-container\">\n        <NavLink exact activeClassName=\"active\" to=\"/buy_mlp\">\n          Buy\n        </NavLink>\n      </div>\n      <div className=\"App-header-link-container\">\n        <NavLink exact activeClassName=\"active\" to=\"/rewards\">\n          Rewards\n        </NavLink>\n      </div>\n      <div className=\"App-header-link-container\">\n        <NavLink exact activeClassName=\"active\" to=\"/referrals\">\n          Referrals\n        </NavLink>\n      </div>\n      <div className=\"App-header-link-container\">\n        <a\n          href=\"https://arbitrex.gitbook.io/arbitrex/arbitrex/about-arbitrex\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Docs\n        </a>\n      </div>\n      {small && (\n        <div className=\"App-header-link-container\">\n          {/* eslint-disable-next-line */}\n          <a href=\"#\" onClick={openSettings}>\n            Settings\n          </a>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction AppHeaderUser({\n  openSettings,\n  small,\n  setWalletModalVisible,\n  showNetworkSelectorModal,\n  disconnectAccountAndCloseSettings,\n  trackAction,\n}) {\n  const { chainId } = useChainId();\n  const { active, account } = useWeb3React();\n  const showSelector = true;\n\n  useEffect(() => {\n    if (active) {\n      setWalletModalVisible(false);\n    }\n  }, [active, setWalletModalVisible]);\n\n  const onNetworkSelect = useCallback(\n    (option) => {\n      if (option.value === chainId) {\n        return;\n      }\n      return switchNetwork(option.value, active);\n    },\n    [chainId, active]\n  );\n\n  const selectorLabel = getChainName(chainId);\n\n  if (!active) {\n    return (\n      <div className=\"App-header-user\">\n        {showSelector && (\n          <NetworkSelector\n            options={networkOptions}\n            label={selectorLabel}\n            onSelect={onNetworkSelect}\n            className=\"App-header-user-netowork\"\n            showCaret={true}\n            modalLabel=\"Select Network\"\n            small={small}\n            showModal={showNetworkSelectorModal}\n            trackAction={trackAction}\n          />\n        )}\n        <ConnectWalletButton\n          onClick={() => {\n            trackAction && trackAction(\"Button clicked\", { buttonName: \"Connect Wallet\" });\n            setWalletModalVisible(true);\n          }}\n          imgSrc={connectWalletImg}\n        >\n          {small ? \"Connect\" : \"Connect Wallet\"}\n        </ConnectWalletButton>\n        <AppDropdown />\n      </div>\n    );\n  }\n\n  const accountUrl = getAccountUrl(chainId, account);\n\n  return (\n    <div className=\"App-header-user\">\n      {showSelector && (\n        <NetworkSelector\n          options={networkOptions}\n          label={selectorLabel}\n          onSelect={onNetworkSelect}\n          className=\"App-header-user-netowork\"\n          showCaret={true}\n          modalLabel=\"Select Network\"\n          small={small}\n          showModal={showNetworkSelectorModal}\n          trackAction={trackAction}\n        />\n      )}\n      <div className=\"App-header-user-address\">\n        <AddressDropdown\n          account={account}\n          small={small}\n          accountUrl={accountUrl}\n          disconnectAccountAndCloseSettings={disconnectAccountAndCloseSettings}\n          openSettings={openSettings}\n          trackAction={trackAction}\n        />\n      </div>\n      <AppDropdown />\n    </div>\n  );\n}\n\nfunction FullApp() {\n  const location = useLocation();\n  const [sidebarVisible, setSidebarVisible] = useState(false);\n  const [loggedInTracked, setLoggedInTracked] = useState(false);\n  const { trackLogin, trackPageWithTraits, trackAction, analytics } = useAnalytics();\n\n  const exchangeRef = useRef();\n  const { connector, library, deactivate, activate, active, account } = useWeb3React();\n  const { chainId } = useChainId();\n  const readerAddress = getContract(chainId, \"Reader\");\n  const tokens = getTokens(chainId);\n  const tokenAddresses = tokens.map((token) => token.address);\n  const whitelistedTokens = getWhitelistedTokens(chainId);\n  const whitelistedTokenAddresses = whitelistedTokens.map((token) => token.address);\n  const nativeTokenAddress = getContract(chainId, \"NATIVE_TOKEN\");\n\n  useEventToast();\n  const [activatingConnector, setActivatingConnector] = useState();\n  useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector, chainId]);\n  const triedEager = useEagerConnect(setActivatingConnector);\n  useInactiveListener(!triedEager || !!activatingConnector);\n\n  const query = useRouteQuery();\n\n  useEffect(() => {\n    let referralCode = query.get(REFERRAL_CODE_QUERY_PARAMS);\n    if (referralCode && referralCode.length <= 20) {\n      const encodedReferralCode = encodeReferralCode(referralCode);\n      if (encodeReferralCode !== ethers.constants.HashZero) {\n        localStorage.setItem(REFERRAL_CODE_KEY, encodedReferralCode);\n      }\n    }\n  }, [query]);\n\n  const disconnectAccount = useCallback(() => {\n    // only works with WalletConnect\n    clearWalletConnectData();\n    // force clear localStorage connection for MM/CB Wallet (Brave legacy)\n    clearWalletLinkData();\n    deactivate();\n  }, [deactivate]);\n\n  const disconnectAccountAndCloseSettings = () => {\n    disconnectAccount();\n    localStorage.removeItem(SHOULD_EAGER_CONNECT_LOCALSTORAGE_KEY);\n    localStorage.removeItem(CURRENT_PROVIDER_LOCALSTORAGE_KEY);\n    setIsSettingsVisible(false);\n  };\n\n  const connectInjectedWallet = getInjectedHandler(activate);\n  const activateWalletConnect = () => {\n    getWalletConnectHandler(activate, deactivate, setActivatingConnector)();\n  };\n\n  const userOnMobileDevice = \"navigator\" in window && isMobileDevice(window.navigator);\n\n  const activateMetaMask = () => {\n    if (!hasMetaMaskWalletExtension()) {\n      helperToast.error(\n        <div>\n          MetaMask not detected.\n          <br />\n          <br />\n          <a href=\"https://metamask.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Install MetaMask\n          </a>\n          {userOnMobileDevice ? \", and use MYC with its built-in browser\" : \" to start using MYC\"}.\n        </div>\n      );\n      return false;\n    }\n    attemptActivateWallet(\"MetaMask\");\n  };\n  const activateCoinBase = () => {\n    if (!hasCoinBaseWalletExtension()) {\n      helperToast.error(\n        <div>\n          Coinbase Wallet not detected.\n          <br />\n          <br />\n          <a href=\"https://www.coinbase.com/wallet\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Install Coinbase Wallet\n          </a>\n          {userOnMobileDevice ? \", and use MYC with its built-in browser\" : \" to start using MYC\"}.\n        </div>\n      );\n      return false;\n    }\n    attemptActivateWallet(\"CoinBase\");\n  };\n\n  const attemptActivateWallet = (providerName) => {\n    localStorage.setItem(SHOULD_EAGER_CONNECT_LOCALSTORAGE_KEY, true);\n    localStorage.setItem(CURRENT_PROVIDER_LOCALSTORAGE_KEY, providerName);\n    activateInjectedProvider(providerName);\n    connectInjectedWallet();\n  };\n\n  const [walletModalVisible, setWalletModalVisible] = useState();\n  //const [isEventModalVisible, setEventModalVisible] = useState(false);\n  const connectWallet = () => setWalletModalVisible(true);\n\n  const [isDrawerVisible, setIsDrawerVisible] = useState(undefined);\n  const [isNativeSelectorModalVisible, setisNativeSelectorModalVisible] = useState(false);\n  const fadeVariants = {\n    hidden: { opacity: 0 },\n    visible: { opacity: 1 },\n  };\n  const slideVariants = {\n    hidden: { x: \"-100%\" },\n    visible: { x: 0 },\n  };\n\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\n  const [savedSlippageAmount, setSavedSlippageAmount] = useLocalStorageSerializeKey(\n    [chainId, SLIPPAGE_BPS_KEY],\n    DEFAULT_SLIPPAGE_AMOUNT\n  );\n  const [slippageAmount, setSlippageAmount] = useState(0);\n  const [slippageError, setSlippageError] = useState(\"\");\n  const [isPnlInLeverage, setIsPnlInLeverage] = useState(false);\n  const [showPnlAfterFees, setShowPnlAfterFees] = useState(false);\n\n  const MAX_DECIMALS = 2;\n\n  const parseSlippageAmount = (amount) => {\n    const strWithoutLeadingsZeroes = amount.replace(/^[0]+/g, \"0\");\n    const decimals = strWithoutLeadingsZeroes.toString().split(\".\")[1];\n    if (parseFloat(amount) > 5.0) {\n      setSlippageError(\"Slippage should be less than 5%\");\n    } else if (decimals?.length > MAX_DECIMALS) {\n      setSlippageError(\"Max slippage precision is 0.01%\");\n    }\n    // limit the amount of decimals\n    else if (!decimals || decimals?.length <= MAX_DECIMALS) {\n      // replace commas with periods for other locales\n      setSlippageAmount(strWithoutLeadingsZeroes.replace(/,/g, \".\"));\n      setSlippageError(\"\");\n    }\n    setSlippageAmount(amount);\n  };\n\n  const [savedIsPnlInLeverage, setSavedIsPnlInLeverage] = useLocalStorageSerializeKey(\n    [chainId, IS_PNL_IN_LEVERAGE_KEY],\n    false\n  );\n\n  const [savedShowPnlAfterFees, setSavedShowPnlAfterFees] = useLocalStorageSerializeKey(\n    [chainId, SHOW_PNL_AFTER_FEES_KEY],\n    false\n  );\n\n  const [savedShouldShowPositionLines, setSavedShouldShowPositionLines] = useLocalStorageSerializeKey(\n    [chainId, SHOULD_SHOW_POSITION_LINES_KEY],\n    false\n  );\n\n  const openSettings = () => {\n    const slippage = parseInt(savedSlippageAmount);\n    setSlippageAmount((slippage / BASIS_POINTS_DIVISOR) * 100);\n    setIsPnlInLeverage(savedIsPnlInLeverage);\n    setShowPnlAfterFees(savedShowPnlAfterFees);\n    setIsSettingsVisible(true);\n  };\n\n  const showNetworkSelectorModal = (val) => {\n    setisNativeSelectorModalVisible(val);\n  };\n\n  const saveAndCloseSettings = () => {\n    if (slippageError === \"\") {\n      const slippage = parseFloat(slippageAmount);\n      if (isNaN(slippage)) {\n        helperToast.error(\"Invalid slippage value\");\n        return;\n      }\n      if (slippage > 5) {\n        helperToast.error(\"Slippage should be less than 5%\");\n        return;\n      }\n\n      const basisPoints = (slippage * BASIS_POINTS_DIVISOR) / 100;\n      if (parseInt(basisPoints) !== parseFloat(basisPoints)) {\n        helperToast.error(\"Max slippage precision is 0.01%\");\n        return;\n      }\n\n      setSavedIsPnlInLeverage(isPnlInLeverage);\n      setSavedShowPnlAfterFees(showPnlAfterFees);\n      setSavedSlippageAmount(basisPoints);\n      setIsSettingsVisible(false);\n    }\n  };\n  useEffect(() => {\n    if (isDrawerVisible) {\n      document.body.style.overflow = \"hidden\";\n    } else {\n      document.body.style.overflow = \"unset\";\n    }\n    return () => (document.body.style.overflow = \"unset\");\n  }, [isDrawerVisible]);\n\n  const [pendingTxns, setPendingTxns] = useState([]);\n\n  useEffect(() => {\n    const pendingTxnHashes = {};\n    const checkPendingTxns = async () => {\n      const updatedPendingTxns = [];\n      for (let i = 0; i < pendingTxns.length; i++) {\n        const pendingTxn = pendingTxns[i];\n        // because the interval is 2 seconds, if the txn takes longer than 2 seconds there\n        // is potential for the interval event que to trigger multiple success or error notifications\n        if (pendingTxnHashes[pendingTxn.hash]) {\n          continue;\n        }\n        const receipt = await library.getTransactionReceipt(pendingTxn.hash);\n        pendingTxnHashes[pendingTxn.hash] = true;\n        if (receipt) {\n          if (receipt.status === 0) {\n            const txUrl = getExplorerUrl(chainId) + \"tx/\" + pendingTxn.hash;\n            helperToast.error(\n              <div>\n                Txn failed.{\" \"}\n                <a href={txUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                  View\n                </a>\n                <br />\n              </div>\n            );\n          }\n          if (receipt.status === 1 && pendingTxn.message) {\n            const txUrl = getExplorerUrl(chainId) + \"tx/\" + pendingTxn.hash;\n            helperToast.success(\n              <div>\n                {pendingTxn.message}{\" \"}\n                <a href={txUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                  View\n                </a>\n                <br />\n              </div>\n            );\n          }\n          continue;\n        }\n        updatedPendingTxns.push(pendingTxn);\n      }\n\n      if (updatedPendingTxns.length !== pendingTxns.length) {\n        setPendingTxns(updatedPendingTxns);\n      }\n    };\n\n    const interval = setInterval(() => {\n      checkPendingTxns();\n    }, 2 * 1000);\n    return () => clearInterval(interval);\n  }, [library, pendingTxns, chainId]);\n\n  const vaultAddress = getContract(chainId, \"Vault\");\n  const positionRouterAddress = getContract(chainId, \"PositionRouter\");\n\n  useEffect(() => {\n    const wsVaultAbi = chainId === ARBITRUM ? VaultV2.abi : VaultV2b.abi;\n    const wsProvider = getWsProvider(active, chainId);\n    if (!wsProvider) {\n      return;\n    }\n\n    const wsVault = new ethers.Contract(vaultAddress, wsVaultAbi, wsProvider);\n    const wsPositionRouter = new ethers.Contract(positionRouterAddress, PositionRouter.abi, wsProvider);\n\n    const callExchangeRef = (method, ...args) => {\n      if (!exchangeRef || !exchangeRef.current) {\n        return;\n      }\n\n      exchangeRef.current[method](...args);\n    };\n\n    // handle the subscriptions here instead of within the Exchange component to avoid unsubscribing and re-subscribing\n    // each time the Exchange components re-renders, which happens on every data update\n    const onUpdatePosition = (...args) => callExchangeRef(\"onUpdatePosition\", ...args);\n    const onClosePosition = (...args) => callExchangeRef(\"onClosePosition\", ...args);\n    const onIncreasePosition = (...args) => callExchangeRef(\"onIncreasePosition\", ...args);\n    const onDecreasePosition = (...args) => callExchangeRef(\"onDecreasePosition\", ...args);\n    const onCancelIncreasePosition = (...args) => callExchangeRef(\"onCancelIncreasePosition\", ...args);\n    const onCancelDecreasePosition = (...args) => callExchangeRef(\"onCancelDecreasePosition\", ...args);\n\n    wsVault.on(\"UpdatePosition\", onUpdatePosition);\n    wsVault.on(\"ClosePosition\", onClosePosition);\n    wsVault.on(\"IncreasePosition\", onIncreasePosition);\n    wsVault.on(\"DecreasePosition\", onDecreasePosition);\n    wsPositionRouter.on(\"CancelIncreasePosition\", onCancelIncreasePosition);\n    wsPositionRouter.on(\"CancelDecreasePosition\", onCancelDecreasePosition);\n\n    return function cleanup() {\n      wsVault.off(\"UpdatePosition\", onUpdatePosition);\n      wsVault.off(\"ClosePosition\", onClosePosition);\n      wsVault.off(\"IncreasePosition\", onIncreasePosition);\n      wsVault.off(\"DecreasePosition\", onDecreasePosition);\n      wsPositionRouter.off(\"CancelIncreasePosition\", onCancelIncreasePosition);\n      wsPositionRouter.off(\"CancelDecreasePosition\", onCancelDecreasePosition);\n    };\n  }, [active, chainId, vaultAddress, positionRouterAddress]);\n\n  const { data: tokenBalances } = useSWR(\n    [`FullApp:getTokenBalances:${active}`, chainId, readerAddress, \"getTokenBalances\", account || PLACEHOLDER_ACCOUNT],\n    {\n      fetcher: fetcher(library, ReaderV2, [tokenAddresses]),\n    }\n  );\n  const { data: fundingRateInfo } = useSWR([active, chainId, readerAddress, \"getFundingRates\"], {\n    fetcher: fetcher(library, ReaderV2, [vaultAddress, nativeTokenAddress, whitelistedTokenAddresses]),\n  });\n\n  const { infoTokens } = useInfoTokens(library, chainId, active, tokenBalances, fundingRateInfo);\n\n  // Track user wallet connect\n  useEffect(() => {\n    const accountChanged = hasChangedAccount(account);\n    if ((!loggedInTracked || accountChanged) && infoTokens) {\n      const sendTrackLoginData = async () => {\n        if (account && tokenBalances) {\n          const { balanceData } = getBalanceAndSupplyData(tokenBalances);\n\n          // Format MYC token balances from BigNumber to float\n          const tokenDecimals = tokens.map((token) => token.decimals);\n          let mlpBalances = {};\n          Object.keys(balanceData).forEach((token, i) => {\n            if (balanceData[token]) {\n              const fieldName = `balance${formatTitleCase(token)}`;\n              mlpBalances[fieldName] = parseFloat(formatAmount(balanceData[token], tokenDecimals[i], 4, true));\n            }\n          });\n\n          // Format user ERC20 token balances from BigNumber to float\n          const [userBalances] = getUserTokenBalances(infoTokens);\n\n          trackLogin(chainId, mlpBalances, userBalances);\n          setCurrentAccount(account);\n          setLoggedInTracked(true); // Only track once\n        }\n      };\n      sendTrackLoginData();\n    }\n  }, [account, chainId, tokenBalances, trackLogin, loggedInTracked, library, infoTokens, tokens]);\n\n  const selectorLabel = getChainName(chainId);\n\n  const onNetworkSelect = useCallback(\n    (option) => {\n      if (option.value === chainId) {\n        return;\n      }\n      return switchNetwork(option.value, active);\n    },\n    [chainId, active]\n  );\n\n  return (\n    <>\n      <div\n        className={cx(\"App ReferralsBannerActive\", {\n          \"full-width\": sidebarVisible,\n        })}\n      >\n        {/* <div className=\"App-background-side-1\"></div>\n        <div className=\"App-background-side-2\"></div>\n        <div className=\"App-background\"></div>\n        <div className=\"App-background-ball-1\"></div>\n        <div className=\"App-background-ball-2\"></div>\n        <div className=\"App-highlight\"></div> */}\n        <div className={cx(\"App-content\", { \"full-width\": sidebarVisible })}>\n          {isDrawerVisible && (\n            <AnimatePresence>\n              {isDrawerVisible && (\n                <motion.div\n                  className=\"App-header-backdrop\"\n                  initial=\"hidden\"\n                  animate=\"visible\"\n                  exit=\"hidden\"\n                  variants={fadeVariants}\n                  transition={{ duration: 0.2 }}\n                  onClick={() => setIsDrawerVisible(!isDrawerVisible)}\n                ></motion.div>\n              )}\n            </AnimatePresence>\n          )}\n          {isNativeSelectorModalVisible && (\n            <AnimatePresence>\n              {isNativeSelectorModalVisible && (\n                <motion.div\n                  className=\"selector-backdrop\"\n                  initial=\"hidden\"\n                  animate=\"visible\"\n                  exit=\"hidden\"\n                  variants={fadeVariants}\n                  transition={{ duration: 0.2 }}\n                  onClick={() => setisNativeSelectorModalVisible(!isNativeSelectorModalVisible)}\n                ></motion.div>\n              )}\n            </AnimatePresence>\n          )}\n          <nav>\n            <div className=\"App-header large default-container\">\n              <div className=\"App-header-container-left\">\n                <Link\n                  className=\"App-header-link-main\"\n                  to=\"/\"\n                  onClick={() =>\n                    trackAction &&\n                    trackAction(\"Button clicked\", {\n                      buttonName: \"Mycelium Nav Logo\",\n                    })\n                  }\n                >\n                  <img src={logoImg} className=\"big\" alt=\"Mycelium Swaps Logo\" />\n                  <img src={logoSmallImg} className=\"small\" alt=\"Mycelium Swaps Logo\" />\n                </Link>\n              </div>\n              <div className=\"App-header-container-right\">\n                {/* <AppHeaderLinks trackAction={trackAction} /> */}\n                <AppHeaderUser\n                  disconnectAccountAndCloseSettings={disconnectAccountAndCloseSettings}\n                  openSettings={openSettings}\n                  setActivatingConnector={setActivatingConnector}\n                  walletModalVisible={walletModalVisible}\n                  setWalletModalVisible={setWalletModalVisible}\n                  showNetworkSelectorModal={showNetworkSelectorModal}\n                  trackAction={trackAction}\n                />\n              </div>\n            </div>\n            <div className={cx(\"App-header small  default-container\", { active: isDrawerVisible })}>\n              <div\n                className={cx(\"App-header-link-container\", \"App-header-top\", {\n                  active: isDrawerVisible,\n                })}\n              >\n                <div className=\"App-header-container-left\">\n                  <Link\n                    className=\"App-header-link-main clickable\"\n                    to=\"/\"\n                    onClick={() => {\n                      trackAction &&\n                        trackAction(\"Button clicked\", {\n                          buttonName: \"Arbitrex Nav Logo\",\n                        });\n                    }}\n                  >\n                    <img src={logoSmallImg} className=\"small\" alt=\"Mycelium Swaps Logo\" />\n                    <img src={logoImg} className=\"big\" alt=\"Mycelium Swaps Logo\" />\n                  </Link>\n                </div>\n                <div>\n                  <div className=\"App-header-container-right\">\n                    <AppHeaderLinks trackAction={trackAction} />\n                    <LinkDropdown />\n                    <AppHeaderUser\n                      disconnectAccountAndCloseSettings={disconnectAccountAndCloseSettings}\n                      openSettings={openSettings}\n                      small\n                      setActivatingConnector={setActivatingConnector}\n                      walletModalVisible={walletModalVisible}\n                      setWalletModalVisible={setWalletModalVisible}\n                      showNetworkSelectorModal={showNetworkSelectorModal}\n                      trackAction={trackAction}\n                    />\n                  </div>\n                  {location?.pathname !== \"/\" && (\n                    <div className=\"App-header-user-link Trade-btn-mobile\">\n                      <NavLink exact activeClassName=\"active\" className=\"default-btn trade-link\" to=\"/\">\n                        Trade\n                      </NavLink>\n                    </div>\n                  )}\n                  <AppDropdown isMobile />\n                  {/* Hamburger menu */}\n                  <button className=\"App-header-menu-icon-block\" onClick={() => setIsDrawerVisible(!isDrawerVisible)}>\n                    <span />\n                    <span />\n                    <span />\n                  </button>\n                </div>\n              </div>\n            </div>\n          </nav>\n          <div\n            className={cx(\"App-header-links-container App-header-drawer\", {\n              closed: !isDrawerVisible,\n            })}\n          >\n            <MobileLinks\n              openSettings={openSettings}\n              clickCloseIcon={() => setIsDrawerVisible(false)}\n              trackAction={trackAction}\n              networkOptions={networkOptions}\n              selectorLabel={selectorLabel}\n              onNetworkSelect={onNetworkSelect}\n              setWalletModalVisible={setWalletModalVisible}\n              showNetworkSelectorModal={showNetworkSelectorModal}\n              disconnectAccountAndCloseSettings={disconnectAccountAndCloseSettings}\n            />\n          </div>\n          {/* <div className=\"default-container\">\n            <Banner>\n              <BannerTitle>\n                ARBITRUM NITRO UPGRADE IN PROGRESS\n              </BannerTitle>\n              <BannerContent>\n                The Arbitrum Network is expected to have 2-4 hours of downtime as it makes it's upgrade to Nitro. Trades may not go through during this period.\n              </BannerContent>\n            </Banner>\n          </div> */}\n          <Switch>\n            <Route exact path=\"/\">\n              <Exchange\n                ref={exchangeRef}\n                savedShowPnlAfterFees={savedShowPnlAfterFees}\n                savedIsPnlInLeverage={savedIsPnlInLeverage}\n                setSavedIsPnlInLeverage={setSavedIsPnlInLeverage}\n                savedSlippageAmount={savedSlippageAmount}\n                setPendingTxns={setPendingTxns}\n                pendingTxns={pendingTxns}\n                savedShouldShowPositionLines={savedShouldShowPositionLines}\n                setSavedShouldShowPositionLines={setSavedShouldShowPositionLines}\n                connectWallet={connectWallet}\n                infoTokens={infoTokens}\n                trackPageWithTraits={trackPageWithTraits}\n                trackAction={trackAction}\n                analytics={analytics}\n                sidebarVisible={sidebarVisible}\n              />\n            </Route>\n            {/*  <Route exact path=\"/dashboard\">\n              <Dashboard />\n            </Route> */}\n            <Route exact path=\"/earn\">\n              <Stake\n                setPendingTxns={setPendingTxns}\n                connectWallet={connectWallet}\n                trackAction={trackAction}\n                trackPageWithTraits={trackPageWithTraits}\n                analytics={analytics}\n                infoTokens={infoTokens}\n                savedSlippageAmount={savedSlippageAmount}\n              />\n            </Route>\n            <Route exact path=\"/buy_mlp\">\n              <BuyMlp\n                savedSlippageAmount={savedSlippageAmount}\n                setPendingTxns={setPendingTxns}\n                connectWallet={connectWallet}\n                trackPageWithTraits={trackPageWithTraits}\n                trackAction={trackAction}\n                analytics={analytics}\n              />\n            </Route>\n            <Route exact path=\"/sell_mlp\">\n              <SellMlp\n                savedSlippageAmount={savedSlippageAmount}\n                setPendingTxns={setPendingTxns}\n                connectWallet={connectWallet}\n              />\n            </Route>\n            <Route exact path=\"/rewards\">\n              <Rewards\n                connectWallet={connectWallet}\n                trackPageWithTraits={trackPageWithTraits}\n                trackAction={trackAction}\n                analytics={analytics}\n                infoTokens={infoTokens}\n                setPendingTxns={setPendingTxns}\n              />\n            </Route>\n            <Route exact path=\"/referrals\">\n              <Referrals\n                connectWallet={connectWallet}\n                trackPageWithTraits={trackPageWithTraits}\n                trackAction={trackAction}\n                analytics={analytics}\n                infoTokens={infoTokens}\n                pendingTxns={pendingTxns}\n                setPendingTxns={setPendingTxns}\n              />\n            </Route>\n            {/*\n            <Route exact path=\"/nft_wallet\">\n              <NftWallet />\n            </Route>\n            */}\n            <Route exact path=\"/actions/:account\">\n              <Actions trackAction={trackAction} />\n            </Route>\n            <Route exact path=\"/orders_overview\">\n              <OrdersOverview />\n            </Route>\n            <Route exact path=\"/positions_overview\">\n              <PositionsOverview />\n            </Route>\n            <Route exact path=\"/actions\">\n              <Actions trackAction={trackAction} />\n            </Route>\n            {/*\n            <Route exact path=\"/begin_account_transfer\">\n              <BeginAccountTransfer setPendingTxns={setPendingTxns} />\n            </Route>\n            <Route exact path=\"/complete_account_transfer/:sender/:receiver\">\n              <CompleteAccountTransfer setPendingTxns={setPendingTxns} />\n            </Route>\n            <Route exact path=\"/debug\">\n              <Debug />\n            </Route>\n            <Route exact path=\"/referral-terms\">\n              <ReferralTerms />\n            </Route> */}\n            <Route path=\"*\">\n              <PageNotFound />\n            </Route>\n          </Switch>\n        </div>\n        <Sidebar sidebarVisible={sidebarVisible} setSidebarVisible={setSidebarVisible} />\n        {/* <Footer /> */}\n      </div>\n      <ToastContainer\n        limit={3}\n        transition={Zoom}\n        position=\"bottom-right\"\n        autoClose={7000}\n        hideProgressBar={true}\n        newestOnTop={false}\n        closeOnClick={false}\n        draggable={false}\n        pauseOnHover\n      />\n      {/*   <EventModal\n        isModalVisible={isEventModalVisible}\n        setEventModalVisible={setEventModalVisible}\n        eventKey={\"referrals-comp\"}\n        twitterButtonText={\"Share your code for a chance to win\"}\n        twitterText={`🍄🍄🍄 @mycelium_xyz IYKYK\\n\\nUse my code for a discount: [insert code]\\nhttps://swaps.mycelium.xyz/referrals`}\n      /> */}\n      <EventToastContainer />\n      <Modal\n        className=\"Connect-wallet-modal\"\n        isVisible={walletModalVisible}\n        setIsVisible={setWalletModalVisible}\n        label=\"Connect Wallet\"\n      >\n        <button\n          className=\"Wallet-btn MetaMask-btn\"\n          onClick={() => {\n            activateMetaMask();\n            trackAction && trackAction(\"Button clicked\", { buttonName: \"Connect with MetaMask\" });\n          }}\n        >\n          <img src={metamaskImg} alt=\"MetaMask\" />\n          <div>MetaMask</div>\n        </button>\n        <button\n          className=\"Wallet-btn CoinbaseWallet-btn\"\n          onClick={() => {\n            activateCoinBase();\n            trackAction && trackAction(\"Button clicked\", { buttonName: \"Connect with Coinbase Wallet\" });\n          }}\n        >\n          <img src={coinbaseImg} alt=\"Coinbase Wallet\" />\n          <div>Coinbase Wallet</div>\n        </button>\n        <button\n          className=\"Wallet-btn WalletConnect-btn\"\n          onClick={() => {\n            activateWalletConnect();\n            trackAction && trackAction(\"Button clicked\", { buttonName: \"Connect with WalletConnect\" });\n          }}\n        >\n          <img src={walletConnectImg} alt=\"WalletConnect\" />\n          <div>WalletConnect</div>\n        </button>\n      </Modal>\n      <Modal\n        className=\"Connect-wallet-modal\"\n        isVisible={walletModalVisible}\n        setIsVisible={setWalletModalVisible}\n        label=\"Connect Wallet\"\n      >\n        <button\n          className=\"Wallet-btn MetaMask-btn\"\n          onClick={() => {\n            activateMetaMask();\n            trackAction && trackAction(\"Button clicked\", { buttonName: \"Connect with MetaMask\" });\n          }}\n        >\n          <img src={metamaskImg} alt=\"MetaMask\" />\n          <div>MetaMask</div>\n        </button>\n        <button\n          className=\"Wallet-btn CoinbaseWallet-btn\"\n          onClick={() => {\n            activateCoinBase();\n            trackAction && trackAction(\"Button clicked\", { buttonName: \"Connect with Coinbase Wallet\" });\n          }}\n        >\n          <img src={coinbaseImg} alt=\"Coinbase Wallet\" />\n          <div>Coinbase Wallet</div>\n        </button>\n        <button\n          className=\"Wallet-btn WalletConnect-btn\"\n          onClick={() => {\n            activateWalletConnect();\n            trackAction && trackAction(\"Button clicked\", { buttonName: \"Connect with WalletConnect\" });\n          }}\n        >\n          <img src={walletConnectImg} alt=\"WalletConnect\" />\n          <div>WalletConnect</div>\n        </button>\n      </Modal>\n      <Modal\n        className=\"App-settings\"\n        isVisible={isSettingsVisible}\n        setIsVisible={setIsSettingsVisible}\n        label=\"Settings\"\n      >\n        <div className=\"App-settings-row\">\n          <div>Allowed Slippage</div>\n          <div className=\"App-slippage-tolerance-input-container\">\n            <input\n              type=\"number\"\n              className=\"App-slippage-tolerance-input\"\n              step=\"0.01\"\n              min=\"0\"\n              value={slippageAmount}\n              onChange={(e) => parseSlippageAmount(e.target.value)}\n            />\n            <div className=\"App-slippage-tolerance-input-percent\">%</div>\n          </div>\n          {slippageError !== \"\" && <div className=\"App-slippage-tolerance-error\">{slippageError}</div>}\n        </div>\n        <div className=\"Exchange-settings-row\">\n          <Checkbox isChecked={showPnlAfterFees} setIsChecked={setShowPnlAfterFees}>\n            Display PnL after fees\n          </Checkbox>\n        </div>\n        <div className=\"Exchange-settings-row\">\n          <Checkbox isChecked={isPnlInLeverage} setIsChecked={setIsPnlInLeverage}>\n            Include PnL in leverage display\n          </Checkbox>\n        </div>\n        <button\n          className=\"App-cta Exchange-swap-button\"\n          onClick={() => {\n            saveAndCloseSettings();\n            trackAction &&\n              trackAction(\"Button clicked\", {\n                buttonName: \"Save wallet settings\",\n              });\n          }}\n        >\n          Save\n        </button>\n      </Modal>\n    </>\n  );\n}\n\nfunction PreviewApp() {\n  const [isDrawerVisible, setIsDrawerVisible] = useState(undefined);\n  const fadeVariants = {\n    hidden: { opacity: 0 },\n    visible: { opacity: 1 },\n  };\n  const slideVariants = {\n    hidden: { x: \"-100%\" },\n    visible: { x: 0 },\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <div className=\"App-background-side-1\"></div>\n        <div className=\"App-background-side-2\"></div>\n        <div className=\"App-background\"></div>\n        <div className=\"App-background-ball-1\"></div>\n        <div className=\"App-background-ball-2\"></div>\n        <div className=\"App-highlight\"></div>\n        <div className={cx(\"App-content\", { \"full-width\": isDrawerVisible })}>\n          {isDrawerVisible && (\n            <AnimatePresence>\n              {isDrawerVisible && (\n                <motion.div\n                  className=\"App-header-backdrop\"\n                  initial=\"hidden\"\n                  animate=\"visible\"\n                  exit=\"hidden\"\n                  variants={fadeVariants}\n                  transition={{ duration: 0.2 }}\n                  onClick={() => setIsDrawerVisible(!isDrawerVisible)}\n                ></motion.div>\n              )}\n            </AnimatePresence>\n          )}\n          <header>\n            <div className=\"App-header large preview\">\n              <div className=\"App-header-container-left\">\n                <NavLink exact activeClassName=\"active\" className=\"App-header-link-main\" to=\"/\">\n                  <img src={logoImg} alt=\"Mycelium Swaps Logo\" />\n                  MYC\n                </NavLink>\n              </div>\n              <div className=\"App-header-container-right\">\n                <AppHeaderLinks />\n              </div>\n            </div>\n            <div className={cx(\"App-header\", \"small\", { active: isDrawerVisible })}>\n              <div\n                className={cx(\"App-header-link-container\", \"App-header-top\", {\n                  active: isDrawerVisible,\n                })}\n              >\n                <div className=\"App-header-container-left\">\n                  <div className=\"App-header-link-main\">\n                    <img src={logoImg} alt=\"Mycelium Swaps Logo\" />\n                  </div>\n                </div>\n                <div className=\"App-header-container-right\">\n                  <div onClick={() => setIsDrawerVisible(!isDrawerVisible)}>\n                    {!isDrawerVisible && <RiMenuLine className=\"App-header-menu-icon\" />}\n                    {isDrawerVisible && <FaTimes className=\"App-header-menu-icon\" />}\n                  </div>\n                </div>\n              </div>\n              <AnimatePresence>\n                {isDrawerVisible && (\n                  <motion.div\n                    onClick={() => setIsDrawerVisible(false)}\n                    className=\"App-header-links-container App-header-drawer\"\n                    initial=\"hidden\"\n                    animate=\"visible\"\n                    exit=\"hidden\"\n                    variants={slideVariants}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <AppHeaderLinks small />\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          </header>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction App() {\n  const [hasConsented, setConsented] = useState(false);\n\n  useEffect(() => {\n    const consentAcknowledged = localStorage.getItem(\"consentAcknowledged\") === \"true\";\n    setConsented(consentAcknowledged);\n  }, []);\n\n  if (inPreviewMode()) {\n    return (\n      <Web3ReactProvider getLibrary={getLibrary}>\n        <ThemeProvider>\n          <PreviewApp />\n        </ThemeProvider>\n      </Web3ReactProvider>\n    );\n  }\n\n  return (\n    <SWRConfig value={{ refreshInterval: 5000 }}>\n      <Web3ReactProvider getLibrary={getLibrary}>\n        <ThemeProvider>\n          <FullApp />\n        </ThemeProvider>\n        <ConsentModal hasConsented={hasConsented} setConsented={setConsented} />\n      </Web3ReactProvider>\n    </SWRConfig>\n  );\n}\n\nexport default App;\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\segmentAnalytics.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\Helpers.js",["964","965","966"],"import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\nimport {\n  WalletConnectConnector,\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\n} from \"@web3-react/walletconnect-connector\";\nimport { toast } from \"react-toastify\";\nimport { useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\nimport { useLocalStorage } from \"react-use\";\nimport { ethers } from \"ethers\";\nimport { format as formatDateFn } from \"date-fns\";\nimport Token from \"./abis/Token.json\";\nimport _ from \"lodash\";\nimport { getContract } from \"./Addresses\";\nimport useSWR from \"swr\";\n\nimport OrderBookReader from \"./abis/OrderBookReader.json\";\nimport OrderBook from \"./abis/OrderBook.json\";\n\nimport { getWhitelistedTokens, isValidToken } from \"./data/Tokens\";\nimport ComingSoonTooltip from \"./components/Tooltip/ComingSoon\";\nimport { isAddress } from \"ethers/lib/utils\";\nimport { copyToClipboard } from './utils/common';\nimport {\n  REFERRAL_CODE_QUERY_PARAMS,\n  CURRENT_PROVIDER_LOCALSTORAGE_KEY,\n  WALLET_CONNECT_LOCALSTORAGE_KEY,\n  WALLET_LINK_LOCALSTORAGE_PREFIX,\n  SHOULD_EAGER_CONNECT_LOCALSTORAGE_KEY,\n} from \"./config/localstorage\";\n\nconst { AddressZero } = ethers.constants;\n\nexport const UI_VERSION = \"1.3\";\n\n// use a random placeholder account instead of the zero address as the zero address might have tokens\nexport const PLACEHOLDER_ACCOUNT = ethers.Wallet.createRandom().address;\n\nexport const ETHEREUM = 1;\nexport const ARBITRUM_GOERLI = 421613;\nexport const ARBITRUM = 42161;\n// TODO take it from web3\nexport const DEFAULT_CHAIN_ID = ARBITRUM;\nexport const CHAIN_ID = DEFAULT_CHAIN_ID;\n\nexport const MIN_PROFIT_TIME = 0;\n\nconst SELECTED_NETWORK_LOCAL_STORAGE_KEY = \"SELECTED_NETWORK\";\n\nconst CHAIN_NAMES_MAP = {\n  [ARBITRUM_GOERLI]: \"Testnet\",\n  [ARBITRUM]: \"Arbitrum\",\n};\n\nconst GAS_PRICE_ADJUSTMENT_MAP = {\n  [ARBITRUM]: \"0\",\n};\n\nconst MAX_GAS_PRICE_MAP = {};\n\nconst alchemyWhitelistedDomains = [\"swaps.mycelium.xyz\"];\n\nexport function getFallbackArbitrumRpcUrl(useWebsocket) {\n  if (useWebsocket) {\n    return \"wss://arb1.arbitrum.io/ws\";\n  }\n  return \"https://arb1.arbitrum.io/rpc\";\n}\nexport function getDefaultArbitrumRpcUrl(useWebsocket) {\n  if (alchemyWhitelistedDomains.includes(window.location.host)) {\n    if (useWebsocket) {\n      return \"wss://arb-mainnet.g.alchemy.com/v2/SKz5SvTuqIVjE38XsFsy0McZbgfFPOng\";\n    }\n    return \"https://arb-mainnet.g.alchemy.com/v2/SKz5SvTuqIVjE38XsFsy0McZbgfFPOng\";\n  }\n  return getFallbackArbitrumRpcUrl(useWebsocket);\n}\n\nexport function getFallbackArbitrumGoerliRpcUrl(useWebsocket) {\n  if (useWebsocket) {\n    return \"https://goerli-rollup.arbitrum.io/rpc\";\n  }\n  return \"https://goerli-rollup.arbitrum.io/rpc\";\n}\nexport function getDefaultArbitrumGoerliRpcUrl(useWebsocket) {\n  if (alchemyWhitelistedDomains.includes(window.location.host)) {\n    if (useWebsocket) {\n      return \"wss://arb-goerli.g.alchemy.com/v2/sI8AlA8NGlqAZR_28jfPm9JPQQqmsN4U\";\n    }\n    return \"https://arb-goerli.g.alchemy.com/v2/sI8AlA8NGlqAZR_28jfPm9JPQQqmsN4U\";\n  }\n  return getFallbackArbitrumGoerliRpcUrl(useWebsocket);\n}\n\nconst ETHEREUM_RPC_PROVIDERS = [\"https://cloudflare-eth.com\"];\nconst ARBITRUM_RPC_PROVIDERS = [getDefaultArbitrumRpcUrl()];\nconst ARBITRUM_GOERLI_RPC_PROVIDERS = [getDefaultArbitrumGoerliRpcUrl()];\n\nexport function getChainName(chainId) {\n  return CHAIN_NAMES_MAP[chainId];\n}\n\nexport const USDG_ADDRESS = getContract(CHAIN_ID, \"USDG\");\nexport const MAX_LEVERAGE = 100 * 10000;\n\nexport const MAX_PRICE_DEVIATION_BASIS_POINTS = 250;\nexport const DEFAULT_GAS_LIMIT = 1 * 1000 * 1000;\nexport const SECONDS_PER_YEAR = 31536000;\nexport const FORTNIGHTS_IN_YEAR = 365 / 14;\nexport const USDG_DECIMALS = 18;\nexport const USD_DECIMALS = 30;\nexport const BASIS_POINTS_DIVISOR = 10000;\nexport const DEPOSIT_FEE = 30;\nexport const DUST_BNB = \"2000000000000000\";\nexport const DUST_USD = expandDecimals(1, USD_DECIMALS);\nexport const PRECISION = expandDecimals(1, 30);\nexport const ETH_DECIMALS = 18;\nexport const MLP_DECIMALS = 18;\nexport const MYC_DECIMALS = 18;\nexport const DEFAULT_MAX_USDG_AMOUNT = expandDecimals(200 * 1000 * 1000, 18);\n\nexport const TAX_BASIS_POINTS = 40;\nexport const STABLE_TAX_BASIS_POINTS = 2;\nexport const MINT_BURN_FEE_BASIS_POINTS = 18;\nexport const SWAP_FEE_BASIS_POINTS = 20;\nexport const STABLE_SWAP_FEE_BASIS_POINTS = 3;\nexport const MARGIN_FEE_BASIS_POINTS = 9;\n\nexport const LIQUIDATION_FEE = expandDecimals(5, USD_DECIMALS);\n\nexport const MLP_COOLDOWN_DURATION = 15 * 60;\nexport const THRESHOLD_REDEMPTION_VALUE = expandDecimals(993, 27); // 0.993\nexport const FUNDING_RATE_PRECISION = 1000000;\n\nexport const SWAP = \"Swap\";\nexport const INCREASE = \"Increase\";\nexport const DECREASE = \"Decrease\";\nexport const LONG = \"Long\";\nexport const SHORT = \"Short\";\n\nexport const MARKET = \"Market\";\nexport const LIMIT = \"Limit\";\nexport const STOP = \"Stop\";\nexport const LEVERAGE_ORDER_OPTIONS = [MARKET, LIMIT];\nexport const SWAP_ORDER_OPTIONS = [MARKET, LIMIT];\nexport const SWAP_OPTIONS = [LONG, SHORT, SWAP];\nexport const DEFAULT_SLIPPAGE_AMOUNT = 30;\nexport const DEFAULT_HIGHER_SLIPPAGE_AMOUNT = 100;\n\nexport const TRIGGER_PREFIX_ABOVE = \">\";\nexport const TRIGGER_PREFIX_BELOW = \"<\";\n\nexport const MIN_PROFIT_BIPS = 0;\n\nexport const MLP_POOL_COLORS = {\n  ETH: \"#6062a6\",\n  BTC: \"#F7931A\",\n  USDC: \"#2775CA\",\n  PPUSD: \"#2A5ADA\",\n  \"USDC.e\": \"#2A5ADA\",\n  USDT: \"#67B18A\",\n  MIM: \"#9695F8\",\n  FRAX: \"#000\",\n  DAI: \"#FAC044\",\n  UNI: \"#E9167C\",\n  LINK: \"#3256D6\",\n  CTM: \"#F8B500\",\n  FXS: \"#3B3B3B\",\n  BAL: \"#1B1B1B\",\n  CRV: \"#CF0301\",\n  TEST: \"#994443\",\n};\n\nexport const HIGH_SPREAD_THRESHOLD = expandDecimals(1, USD_DECIMALS).div(100); // 1%;\n\nexport const ICONLINKS = {\n  [ARBITRUM_GOERLI]: {\n    TCR: {\n      coingecko: \"https://www.coingecko.com/en/coins/tracer-dao\",\n      arbitrum: `https://arbiscan.io/address/${getContract(ARBITRUM_GOERLI, \"TCR\")}`,\n    },\n    MLP: {\n      arbitrum: `https://arbiscan.io/address/${getContract(ARBITRUM_GOERLI, \"StakedMlpTracker\")}`,\n    },\n    MYC: {\n      coingecko: \"https://www.coingecko.com/en/coins/mycelium\",\n      arbitrum: \"https://arbiscan.io/token/0xc74fe4c715510ec2f8c61d70d397b32043f55abe\",\n    },\n    ETH: {\n      coingecko: \"https://www.coingecko.com/en/coins/ethereum\",\n    },\n    BTC: {\n      coingecko: \"https://www.coingecko.com/en/coins/wrapped-bitcoin\",\n      arbitrum: \"https://arbiscan.io/address/0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f\",\n    },\n    LINK: {\n      coingecko: \"https://www.coingecko.com/en/coins/chainlink\",\n      arbitrum: \"https://arbiscan.io/address/0xf97f4df75117a78c1a5a0dbb814af92458539fb4\",\n    },\n    UNI: {\n      coingecko: \"https://www.coingecko.com/en/coins/uniswap\",\n      arbitrum: \"https://arbiscan.io/address/0xfa7f8980b0f1e64a2062791cc3b0871572f1f7f0\",\n    },\n    USDC: {\n      coingecko: \"https://www.coingecko.com/en/coins/usd-coin\",\n      arbitrum: \"https://arbiscan.io/address/0xff970a61a04b1ca14834a43f5de4533ebddb5cc8\",\n    },\n    PPUSD: {\n      arbitrum: \"https://goerli-rollup-explorer.arbitrum.io/address/0x9e062eee2c0Ab96e1E1c8cE38bF14bA3fa0a35F6\",\n    },\n    TEST: {\n      arbitrum: \"https://goerli-rollup-explorer.arbitrum.io/address/0xf76A36092f52Ea0ad1dFdDB5aced4e9f414524F2\",\n    },\n    USDT: {\n      coingecko: \"https://www.coingecko.com/en/coins/tether\",\n      arbitrum: \"https://arbiscan.io/address/0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9\",\n    },\n    DAI: {\n      coingecko: \"https://www.coingecko.com/en/coins/dai\",\n      arbitrum: \"https://arbiscan.io/address/0xda10009cbd5d07dd0cecc66161fc93d7c9000da1\",\n    },\n    MIM: {\n      coingecko: \"https://www.coingecko.com/en/coins/magic-internet-money\",\n      arbitrum: \"https://arbiscan.io/address/0xfea7a6a0b346362bf88a9e4a88416b77a57d6c2a\",\n    },\n    FRAX: {\n      coingecko: \"https://www.coingecko.com/en/coins/frax\",\n      arbitrum: \"https://arbiscan.io/address/0x17fc002b466eec40dae837fc4be5c67993ddbd6f\",\n    },\n  },\n  42161: {\n    TCR: {\n      coingecko: \"https://www.coingecko.com/en/coins/tracer-dao\",\n      arbitrum: `https://arbiscan.io/address/${getContract(ARBITRUM, \"TCR\")}`,\n    },\n    MLP: {\n      arbitrum: `https://arbiscan.io/address/${getContract(ARBITRUM, \"StakedMlpTracker\")}`,\n    },\n    MYC: {\n      coingecko: \"https://www.coingecko.com/en/coins/mycelium\",\n      arbitrum: \"https://arbiscan.io/token/0xc74fe4c715510ec2f8c61d70d397b32043f55abe\",\n    },\n    ETH: {\n      coingecko: \"https://www.coingecko.com/en/coins/ethereum\",\n    },\n    BTC: {\n      coingecko: \"https://www.coingecko.com/en/coins/wrapped-bitcoin\",\n      arbitrum: \"https://arbiscan.io/address/0x2f2a2543b76a4166549f7aab2e75bef0aefc5b0f\",\n    },\n    LINK: {\n      coingecko: \"https://www.coingecko.com/en/coins/chainlink\",\n      arbitrum: \"https://arbiscan.io/address/0xf97f4df75117a78c1a5a0dbb814af92458539fb4\",\n    },\n    UNI: {\n      coingecko: \"https://www.coingecko.com/en/coins/uniswap\",\n      arbitrum: \"https://arbiscan.io/address/0xfa7f8980b0f1e64a2062791cc3b0871572f1f7f0\",\n    },\n    USDC: {\n      coingecko: \"https://www.coingecko.com/en/coins/usd-coin\",\n      arbitrum: \"https://arbiscan.io/address/0xff970a61a04b1ca14834a43f5de4533ebddb5cc8\",\n    },\n    USDT: {\n      coingecko: \"https://www.coingecko.com/en/coins/tether\",\n      arbitrum: \"https://arbiscan.io/address/0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9\",\n    },\n    DAI: {\n      coingecko: \"https://www.coingecko.com/en/coins/dai\",\n      arbitrum: \"https://arbiscan.io/address/0xda10009cbd5d07dd0cecc66161fc93d7c9000da1\",\n    },\n    MIM: {\n      coingecko: \"https://www.coingecko.com/en/coins/magic-internet-money\",\n      arbitrum: \"https://arbiscan.io/address/0xfea7a6a0b346362bf88a9e4a88416b77a57d6c2a\",\n    },\n    FRAX: {\n      coingecko: \"https://www.coingecko.com/en/coins/frax\",\n      arbitrum: \"https://arbiscan.io/address/0x17fc002b466eec40dae837fc4be5c67993ddbd6f\",\n    },\n    FXS: {\n      coingecko: \"https://www.coingecko.com/en/coins/frax-share\",\n      arbitrum: \"https://arbiscan.io/address/0x9d2F299715D94d8A7E6F5eaa8E654E8c74a988A7\",\n    },\n    BAL: {\n      coingecko: \"https://www.coingecko.com/en/coins/balancer\",\n      arbitrum: \"https://arbiscan.io/address/0x040d1EdC9569d4Bab2D15287Dc5A4F10F56a56B8\",\n    },\n    CRV: {\n      coingecko: \"https://www.coingecko.com/en/coins/crv-dao-token\",\n      arbitrum: \"https://arbiscan.io/address/0x11cDb42B0EB46D95f990BeDD4695A6e3fA034978\",\n    },\n  },\n};\n\nexport const platformTokens = {\n  [ARBITRUM_GOERLI]: {\n    // arbitrum testnet\n    TCR: {\n      name: \"TCR\",\n      symbol: \"TCR\",\n      decimals: 18,\n      address: getContract(ARBITRUM_GOERLI, \"TCR\"),\n      imageUrl: `${window?.location?.origin}/icons/ic_tcr_40.svg`,\n    },\n    MLP: {\n      name: \"TCR LP\",\n      symbol: \"MLP\",\n      decimals: 18,\n      address: getContract(ARBITRUM_GOERLI, \"StakedMlpTracker\"), // address of fsMLP token because user only holds fsMLP\n      imageUrl: `${window?.location?.origin}/icons/ic_mlp_custom.svg`,\n    },\n  },\n  [ARBITRUM]: {\n    // arbitrum\n    TCR: {\n      name: \"TCR\",\n      symbol: \"TCR\",\n      decimals: 18,\n      address: getContract(ARBITRUM, \"TCR\"),\n      imageUrl: `${window?.location?.origin}/icons/ic_tcr_40.svg`,\n    },\n    MYC: {\n      name: \"MYC\",\n      symbol: \"MYC\",\n      decimals: 18,\n      address: getContract(ARBITRUM, \"MYC\"),\n      imageUrl: `${window?.location?.origin}/icons/ic_myc_custom.svg`,\n    },\n    MLP: {\n      name: \"MYC LP\",\n      symbol: \"MLP\",\n      decimals: 18,\n      address: getContract(ARBITRUM, \"StakedMlpTracker\"), // address of fsMLP token because user only holds fsMLP\n      imageUrl: `${window?.location?.origin}/icons/ic_mlp_custom.svg`,\n    },\n  },\n};\n\nexport const networkOptions = [\n  \n  {\n    label: \"Testnet\",\n    value: ARBITRUM_GOERLI,\n    icon: \"ic_arbitrum_24.svg\",\n    color: \"#000000\",\n  },\n];\n\nconst supportedChainIds = [ARBITRUM, ARBITRUM_GOERLI];\nconst injectedConnector = new InjectedConnector({\n  supportedChainIds,\n});\n\nconst getWalletConnectConnector = () => {\n  const chainId = localStorage.getItem(SELECTED_NETWORK_LOCAL_STORAGE_KEY) || DEFAULT_CHAIN_ID;\n  return new WalletConnectConnector({\n    rpc: {\n      [ETHEREUM]: ETHEREUM_RPC_PROVIDERS[0],\n      [ARBITRUM]: ARBITRUM_RPC_PROVIDERS[0],\n      [ARBITRUM_GOERLI]: ARBITRUM_GOERLI_RPC_PROVIDERS[0],\n    },\n    qrcode: true,\n    chainId,\n  });\n};\n\nexport function isSupportedChain(chainId) {\n  return supportedChainIds.includes(chainId);\n}\n\nexport function deserialize(data) {\n  for (const [key, value] of Object.entries(data)) {\n    if (value._type === \"BigNumber\") {\n      data[key] = bigNumberify(value.value);\n    }\n  }\n  return data;\n}\n\nexport const helperToast = {\n  success: (content) => {\n    toast.success(content);\n  },\n  error: (content) => {\n    toast.error(content);\n  },\n};\n\nexport function useLocalStorageByChainId(chainId, key, defaultValue) {\n  const [internalValue, setInternalValue] = useLocalStorage(key, {});\n\n  const setValue = useCallback(\n    (value) => {\n      setInternalValue((internalValue) => {\n        if (typeof value === \"function\") {\n          value = value(internalValue[chainId] || defaultValue);\n        }\n        const newInternalValue = {\n          ...internalValue,\n          [chainId]: value,\n        };\n        return newInternalValue;\n      });\n    },\n    [chainId, setInternalValue, defaultValue]\n  );\n\n  let value;\n  if (chainId in internalValue) {\n    value = internalValue[chainId];\n  } else {\n    value = defaultValue;\n  }\n\n  return [value, setValue];\n}\n\nexport function useLocalStorageSerializeKey(key, value, opts) {\n  key = JSON.stringify(key);\n  return useLocalStorage(key, value, opts);\n}\n\nfunction getTriggerPrice(tokenAddress, max, info, orderOption, triggerPriceUsd) {\n  // Limit/stop orders are executed with price specified by user\n  if (orderOption && orderOption !== MARKET && triggerPriceUsd) {\n    return triggerPriceUsd;\n  }\n\n  // Market orders are executed with current market price\n  if (!info) {\n    return;\n  }\n  if (max && !info.maxPrice) {\n    return;\n  }\n  if (!max && !info.minPrice) {\n    return;\n  }\n  return max ? info.maxPrice : info.minPrice;\n}\n\nexport function getLiquidationPriceFromDelta({ liquidationAmount, size, collateral, averagePrice, isLong }) {\n  if (!size || size.eq(0)) {\n    return;\n  }\n\n  if (liquidationAmount.gt(collateral)) {\n    const liquidationDelta = liquidationAmount.sub(collateral);\n    const priceDelta = liquidationDelta.mul(averagePrice).div(size);\n    return isLong ? averagePrice.add(priceDelta) : averagePrice.sub(priceDelta);\n  }\n\n  const liquidationDelta = collateral.sub(liquidationAmount);\n  const priceDelta = liquidationDelta.mul(averagePrice).div(size);\n\n  return isLong ? averagePrice.sub(priceDelta) : averagePrice.add(priceDelta);\n}\n\nexport const replaceNativeTokenAddress = (path, nativeTokenAddress) => {\n  if (!path) {\n    return;\n  }\n\n  let updatedPath = [];\n  for (let i = 0; i < path.length; i++) {\n    let address = path[i];\n    if (address === AddressZero) {\n      address = nativeTokenAddress;\n    }\n    updatedPath.push(address);\n  }\n\n  return updatedPath;\n};\n\nexport function getMarginFee(sizeDelta) {\n  if (!sizeDelta) {\n    return bigNumberify(0);\n  }\n  const afterFeeUsd = sizeDelta.mul(BASIS_POINTS_DIVISOR - MARGIN_FEE_BASIS_POINTS).div(BASIS_POINTS_DIVISOR);\n  return sizeDelta.sub(afterFeeUsd);\n}\n\nexport function isTriggerRatioInverted(fromTokenInfo, toTokenInfo) {\n  if (!toTokenInfo || !fromTokenInfo) return false;\n  if (toTokenInfo.isStable || toTokenInfo.isUsdg) return true;\n  if (toTokenInfo.maxPrice) return toTokenInfo.maxPrice.lt(fromTokenInfo.maxPrice);\n  return false;\n}\n\nexport function getExchangeRate(tokenAInfo, tokenBInfo, inverted) {\n  if (!tokenAInfo || !tokenAInfo.minPrice || !tokenBInfo || !tokenBInfo.maxPrice) {\n    return;\n  }\n  if (inverted) {\n    return tokenAInfo.minPrice.mul(PRECISION).div(tokenBInfo.maxPrice);\n  }\n  return tokenBInfo.maxPrice.mul(PRECISION).div(tokenAInfo.minPrice);\n}\n\nexport function getMostAbundantStableToken(chainId, infoTokens) {\n  const whitelistedTokens = getWhitelistedTokens(chainId);\n  let availableAmount;\n  let stableToken = whitelistedTokens.find((t) => t.isStable);\n  for (let i = 0; i < whitelistedTokens.length; i++) {\n    const info = getTokenInfo(infoTokens, whitelistedTokens[i].address);\n    if (!info.isStable || !info.availableAmount) {\n      continue;\n    }\n\n    const adjustedAvailableAmount = adjustForDecimals(info.availableAmount, info.decimals, USD_DECIMALS);\n    if (!availableAmount || adjustedAvailableAmount.gt(availableAmount)) {\n      availableAmount = adjustedAvailableAmount;\n      stableToken = info;\n    }\n  }\n  return stableToken;\n}\n\nexport function shouldInvertTriggerRatio(tokenA, tokenB) {\n  if (tokenB.isStable || tokenB.isUsdg) return true;\n  if (tokenB.maxPrice && tokenA.maxPrice && tokenB.maxPrice.lt(tokenA.maxPrice)) return true;\n  return false;\n}\n\nexport function getExchangeRateDisplay(rate, tokenA, tokenB, opts = {}) {\n  if (!rate || !tokenA || !tokenB) return \"...\";\n  if (shouldInvertTriggerRatio(tokenA, tokenB)) {\n    [tokenA, tokenB] = [tokenB, tokenA];\n    rate = PRECISION.mul(PRECISION).div(rate);\n  }\n  const rateValue = formatAmount(rate, USD_DECIMALS, tokenA.isStable || tokenA.isUsdg ? 2 : 4, true);\n  if (opts.omitSymbols) {\n    return rateValue;\n  }\n  return `${rateValue} ${tokenA.symbol} / ${tokenB.symbol}`;\n}\n\nconst adjustForDecimalsFactory = (n) => (number) => {\n  if (n === 0) {\n    return number;\n  }\n  if (n > 0) {\n    return number.mul(expandDecimals(1, n));\n  }\n  return number.div(expandDecimals(1, -n));\n};\n\nexport function adjustForDecimals(amount, divDecimals, mulDecimals) {\n  return amount.mul(expandDecimals(1, mulDecimals)).div(expandDecimals(1, divDecimals));\n}\n\nexport function getTargetUsdgAmount(token, usdgSupply, totalTokenWeights) {\n  if (!token || !token.weight || !usdgSupply) {\n    return;\n  }\n\n  if (usdgSupply.eq(0)) {\n    return bigNumberify(0);\n  }\n\n  return token.weight.mul(usdgSupply).div(totalTokenWeights);\n}\n\nexport function getFeeBasisPoints(\n  token,\n  usdgDelta,\n  feeBasisPoints,\n  taxBasisPoints,\n  increment,\n  usdgSupply,\n  totalTokenWeights\n) {\n  if (!token || !token.usdgAmount || !usdgSupply || !totalTokenWeights) {\n    return 0;\n  }\n\n  feeBasisPoints = bigNumberify(feeBasisPoints);\n  taxBasisPoints = bigNumberify(taxBasisPoints);\n\n  const initialAmount = token.usdgAmount;\n  let nextAmount = initialAmount.add(usdgDelta);\n  if (!increment) {\n    nextAmount = usdgDelta.gt(initialAmount) ? bigNumberify(0) : initialAmount.sub(usdgDelta);\n  }\n\n  const targetAmount = getTargetUsdgAmount(token, usdgSupply, totalTokenWeights);\n  if (!targetAmount || targetAmount.eq(0)) {\n    return feeBasisPoints.toNumber();\n  }\n\n  const initialDiff = initialAmount.gt(targetAmount)\n    ? initialAmount.sub(targetAmount)\n    : targetAmount.sub(initialAmount);\n  const nextDiff = nextAmount.gt(targetAmount) ? nextAmount.sub(targetAmount) : targetAmount.sub(nextAmount);\n\n  if (nextDiff.lt(initialDiff)) {\n    const rebateBps = taxBasisPoints.mul(initialDiff).div(targetAmount);\n    return rebateBps.gt(feeBasisPoints) ? 0 : feeBasisPoints.sub(rebateBps).toNumber();\n  }\n\n  let averageDiff = initialDiff.add(nextDiff).div(2);\n  if (averageDiff.gt(targetAmount)) {\n    averageDiff = targetAmount;\n  }\n  const taxBps = taxBasisPoints.mul(averageDiff).div(targetAmount);\n  return feeBasisPoints.add(taxBps).toNumber();\n}\n\nexport function getBuyMlpToAmount(fromAmount, swapTokenAddress, infoTokens, mlpPrice, usdgSupply, totalTokenWeights) {\n  const defaultValue = { amount: bigNumberify(0), feeBasisPoints: 0 };\n  if (!fromAmount || !swapTokenAddress || !infoTokens || !mlpPrice || !usdgSupply || !totalTokenWeights) {\n    return defaultValue;\n  }\n\n  const swapToken = getTokenInfo(infoTokens, swapTokenAddress);\n  if (!swapToken || !swapToken.minPrice) {\n    return defaultValue;\n  }\n\n  let mlpAmount = fromAmount.mul(swapToken.minPrice).div(mlpPrice);\n  mlpAmount = adjustForDecimals(mlpAmount, swapToken.decimals, USDG_DECIMALS);\n\n  let usdgAmount = fromAmount.mul(swapToken.minPrice).div(PRECISION);\n  usdgAmount = adjustForDecimals(usdgAmount, swapToken.decimals, USDG_DECIMALS);\n  const feeBasisPoints = getFeeBasisPoints(\n    swapToken,\n    usdgAmount,\n    MINT_BURN_FEE_BASIS_POINTS,\n    TAX_BASIS_POINTS,\n    true,\n    usdgSupply,\n    totalTokenWeights\n  );\n\n  mlpAmount = mlpAmount.mul(BASIS_POINTS_DIVISOR - feeBasisPoints).div(BASIS_POINTS_DIVISOR);\n\n  return { amount: mlpAmount, feeBasisPoints };\n}\n\nexport function getSellMlpFromAmount(toAmount, swapTokenAddress, infoTokens, mlpPrice, usdgSupply, totalTokenWeights) {\n  const defaultValue = { amount: bigNumberify(0), feeBasisPoints: 0 };\n  if (!toAmount || !swapTokenAddress || !infoTokens || !mlpPrice || !usdgSupply || !totalTokenWeights) {\n    return defaultValue;\n  }\n\n  const swapToken = getTokenInfo(infoTokens, swapTokenAddress);\n  if (!swapToken || !swapToken.maxPrice) {\n    return defaultValue;\n  }\n\n  let mlpAmount = toAmount.mul(swapToken.maxPrice).div(mlpPrice);\n  mlpAmount = adjustForDecimals(mlpAmount, swapToken.decimals, USDG_DECIMALS);\n\n  let usdgAmount = toAmount.mul(swapToken.maxPrice).div(PRECISION);\n  usdgAmount = adjustForDecimals(usdgAmount, swapToken.decimals, USDG_DECIMALS);\n  const feeBasisPoints = getFeeBasisPoints(\n    swapToken,\n    usdgAmount,\n    MINT_BURN_FEE_BASIS_POINTS,\n    TAX_BASIS_POINTS,\n    false,\n    usdgSupply,\n    totalTokenWeights\n  );\n\n  mlpAmount = mlpAmount.mul(BASIS_POINTS_DIVISOR).div(BASIS_POINTS_DIVISOR - feeBasisPoints);\n\n  return { amount: mlpAmount, feeBasisPoints };\n}\n\nexport function getBuyMlpFromAmount(toAmount, fromTokenAddress, infoTokens, mlpPrice, usdgSupply, totalTokenWeights) {\n  const defaultValue = { amount: bigNumberify(0) };\n  if (!toAmount || !fromTokenAddress || !infoTokens || !mlpPrice || !usdgSupply || !totalTokenWeights) {\n    return defaultValue;\n  }\n\n  const fromToken = getTokenInfo(infoTokens, fromTokenAddress);\n  if (!fromToken || !fromToken.minPrice) {\n    return defaultValue;\n  }\n\n  let fromAmount = toAmount.mul(mlpPrice).div(fromToken.minPrice);\n  fromAmount = adjustForDecimals(fromAmount, MLP_DECIMALS, fromToken.decimals);\n\n  const usdgAmount = toAmount.mul(mlpPrice).div(PRECISION);\n  const feeBasisPoints = getFeeBasisPoints(\n    fromToken,\n    usdgAmount,\n    MINT_BURN_FEE_BASIS_POINTS,\n    TAX_BASIS_POINTS,\n    true,\n    usdgSupply,\n    totalTokenWeights\n  );\n\n  fromAmount = fromAmount.mul(BASIS_POINTS_DIVISOR).div(BASIS_POINTS_DIVISOR - feeBasisPoints);\n\n  return { amount: fromAmount, feeBasisPoints };\n}\n\nexport function getSellMlpToAmount(toAmount, fromTokenAddress, infoTokens, mlpPrice, usdgSupply, totalTokenWeights) {\n  const defaultValue = { amount: bigNumberify(0) };\n  if (!toAmount || !fromTokenAddress || !infoTokens || !mlpPrice || !usdgSupply || !totalTokenWeights) {\n    return defaultValue;\n  }\n\n  const fromToken = getTokenInfo(infoTokens, fromTokenAddress);\n  if (!fromToken || !fromToken.maxPrice) {\n    return defaultValue;\n  }\n\n  let fromAmount = toAmount.mul(mlpPrice).div(fromToken.maxPrice);\n  fromAmount = adjustForDecimals(fromAmount, MLP_DECIMALS, fromToken.decimals);\n\n  const usdgAmount = toAmount.mul(mlpPrice).div(PRECISION);\n  const feeBasisPoints = getFeeBasisPoints(\n    fromToken,\n    usdgAmount,\n    MINT_BURN_FEE_BASIS_POINTS,\n    TAX_BASIS_POINTS,\n    false,\n    usdgSupply,\n    totalTokenWeights\n  );\n\n  fromAmount = fromAmount.mul(BASIS_POINTS_DIVISOR - feeBasisPoints).div(BASIS_POINTS_DIVISOR);\n\n  return { amount: fromAmount, feeBasisPoints };\n}\n\nexport function getNextFromAmount(\n  chainId,\n  toAmount,\n  fromTokenAddress,\n  toTokenAddress,\n  infoTokens,\n  toTokenPriceUsd,\n  ratio,\n  usdgSupply,\n  totalTokenWeights\n) {\n  const defaultValue = { amount: bigNumberify(0) };\n\n  if (!toAmount || !fromTokenAddress || !toTokenAddress || !infoTokens) {\n    return defaultValue;\n  }\n\n  if (fromTokenAddress === toTokenAddress) {\n    return { amount: toAmount };\n  }\n\n  const fromToken = getTokenInfo(infoTokens, fromTokenAddress);\n  const toToken = getTokenInfo(infoTokens, toTokenAddress);\n\n  if (fromToken.isNative && toToken.isWrapped) {\n    return { amount: toAmount };\n  }\n\n  if (fromToken.isWrapped && toToken.isNative) {\n    return { amount: toAmount };\n  }\n\n  if (!fromToken || !fromToken.minPrice || !toToken || !toToken.maxPrice) {\n    return defaultValue;\n  }\n\n  const adjustDecimals = adjustForDecimalsFactory(fromToken.decimals - toToken.decimals);\n\n  let fromAmountBasedOnRatio;\n  if (ratio && !ratio.isZero()) {\n    fromAmountBasedOnRatio = toAmount.mul(ratio).div(PRECISION);\n  }\n\n  if (toTokenAddress === USDG_ADDRESS) {\n    const feeBasisPoints = getSwapFeeBasisPoints(fromToken.isStable);\n\n    if (ratio && !ratio.isZero()) {\n      return {\n        amount: adjustDecimals(\n          fromAmountBasedOnRatio.mul(BASIS_POINTS_DIVISOR + feeBasisPoints).div(BASIS_POINTS_DIVISOR)\n        ),\n      };\n    }\n    const fromAmount = toAmount.mul(PRECISION).div(fromToken.maxPrice);\n    return {\n      amount: adjustDecimals(fromAmount.mul(BASIS_POINTS_DIVISOR + feeBasisPoints).div(BASIS_POINTS_DIVISOR)),\n    };\n  }\n\n  if (fromTokenAddress === USDG_ADDRESS) {\n    const redemptionValue = toToken.redemptionAmount.mul(toToken.maxPrice).div(expandDecimals(1, toToken.decimals));\n    if (redemptionValue.gt(THRESHOLD_REDEMPTION_VALUE)) {\n      const feeBasisPoints = getSwapFeeBasisPoints(toToken.isStable);\n\n      const fromAmount =\n        ratio && !ratio.isZero()\n          ? fromAmountBasedOnRatio\n          : toAmount.mul(expandDecimals(1, toToken.decimals)).div(toToken.redemptionAmount);\n\n      return {\n        amount: adjustDecimals(fromAmount.mul(BASIS_POINTS_DIVISOR + feeBasisPoints).div(BASIS_POINTS_DIVISOR)),\n      };\n    }\n\n    const expectedAmount = toAmount.mul(toToken.maxPrice).div(PRECISION);\n\n    const stableToken = getMostAbundantStableToken(chainId, infoTokens);\n    if (!stableToken || stableToken.availableAmount.lt(expectedAmount)) {\n      const feeBasisPoints = getSwapFeeBasisPoints(toToken.isStable);\n\n      const fromAmount =\n        ratio && !ratio.isZero()\n          ? fromAmountBasedOnRatio\n          : toAmount.mul(expandDecimals(1, toToken.decimals)).div(toToken.redemptionAmount);\n\n      return {\n        amount: adjustDecimals(fromAmount.mul(BASIS_POINTS_DIVISOR + feeBasisPoints).div(BASIS_POINTS_DIVISOR)),\n      };\n    }\n\n    const feeBasisPoints0 = getSwapFeeBasisPoints(true);\n    const feeBasisPoints1 = getSwapFeeBasisPoints(false);\n\n    if (ratio && !ratio.isZero()) {\n      // apply fees twice usdg -> token1 -> token2\n      const fromAmount = fromAmountBasedOnRatio\n        .mul(BASIS_POINTS_DIVISOR + feeBasisPoints0 + feeBasisPoints1)\n        .div(BASIS_POINTS_DIVISOR);\n      return {\n        amount: adjustDecimals(fromAmount),\n        path: [USDG_ADDRESS, stableToken.address, toToken.address],\n      };\n    }\n\n    // get fromAmount for stableToken => toToken\n    let fromAmount = toAmount.mul(toToken.maxPrice).div(stableToken.minPrice);\n\n    // apply stableToken => toToken fees\n    fromAmount = fromAmount.mul(BASIS_POINTS_DIVISOR + feeBasisPoints1).div(BASIS_POINTS_DIVISOR);\n\n    // get fromAmount for USDG => stableToken\n    fromAmount = fromAmount.mul(stableToken.maxPrice).div(PRECISION);\n\n    // apply USDG => stableToken fees\n    fromAmount = fromAmount.mul(BASIS_POINTS_DIVISOR + feeBasisPoints0).div(BASIS_POINTS_DIVISOR);\n\n    return {\n      amount: adjustDecimals(fromAmount),\n      path: [USDG_ADDRESS, stableToken.address, toToken.address],\n    };\n  }\n\n  const fromAmount =\n    ratio && !ratio.isZero() ? fromAmountBasedOnRatio : toAmount.mul(toToken.maxPrice).div(fromToken.minPrice);\n\n  let usdgAmount = fromAmount.mul(fromToken.minPrice).div(PRECISION);\n  usdgAmount = adjustForDecimals(usdgAmount, toToken.decimals, USDG_DECIMALS);\n  const swapFeeBasisPoints =\n    fromToken.isStable && toToken.isStable ? STABLE_SWAP_FEE_BASIS_POINTS : SWAP_FEE_BASIS_POINTS;\n  const taxBasisPoints = fromToken.isStable && toToken.isStable ? STABLE_TAX_BASIS_POINTS : TAX_BASIS_POINTS;\n  const feeBasisPoints0 = getFeeBasisPoints(\n    fromToken,\n    usdgAmount,\n    swapFeeBasisPoints,\n    taxBasisPoints,\n    true,\n    usdgSupply,\n    totalTokenWeights\n  );\n  const feeBasisPoints1 = getFeeBasisPoints(\n    toToken,\n    usdgAmount,\n    swapFeeBasisPoints,\n    taxBasisPoints,\n    false,\n    usdgSupply,\n    totalTokenWeights\n  );\n  const feeBasisPoints = feeBasisPoints0 > feeBasisPoints1 ? feeBasisPoints0 : feeBasisPoints1;\n\n  return {\n    amount: adjustDecimals(fromAmount.mul(BASIS_POINTS_DIVISOR).div(BASIS_POINTS_DIVISOR - feeBasisPoints)),\n    feeBasisPoints,\n  };\n}\n\nexport function getNextToAmount(\n  chainId,\n  fromAmount,\n  fromTokenAddress,\n  toTokenAddress,\n  infoTokens,\n  toTokenPriceUsd,\n  ratio,\n  usdgSupply,\n  totalTokenWeights\n) {\n  const defaultValue = { amount: bigNumberify(0) };\n  if (!fromAmount || !fromTokenAddress || !toTokenAddress || !infoTokens) {\n    return defaultValue;\n  }\n\n  if (fromTokenAddress === toTokenAddress) {\n    return { amount: fromAmount };\n  }\n\n  const fromToken = getTokenInfo(infoTokens, fromTokenAddress);\n  const toToken = getTokenInfo(infoTokens, toTokenAddress);\n\n  if (fromToken.isNative && toToken.isWrapped) {\n    return { amount: fromAmount };\n  }\n\n  if (fromToken.isWrapped && toToken.isNative) {\n    return { amount: fromAmount };\n  }\n\n  if (!fromToken || !fromToken.minPrice || !toToken || !toToken.maxPrice) {\n    return defaultValue;\n  }\n\n  const adjustDecimals = adjustForDecimalsFactory(toToken.decimals - fromToken.decimals);\n\n  let toAmountBasedOnRatio = bigNumberify(0);\n  if (ratio && !ratio.isZero()) {\n    toAmountBasedOnRatio = fromAmount.mul(PRECISION).div(ratio);\n  }\n\n  if (toTokenAddress === USDG_ADDRESS) {\n    const feeBasisPoints = getSwapFeeBasisPoints(fromToken.isStable);\n\n    if (ratio && !ratio.isZero()) {\n      const toAmount = toAmountBasedOnRatio;\n      return {\n        amount: adjustDecimals(toAmount.mul(BASIS_POINTS_DIVISOR - feeBasisPoints).div(BASIS_POINTS_DIVISOR)),\n        feeBasisPoints,\n      };\n    }\n\n    const toAmount = fromAmount.mul(fromToken.minPrice).div(PRECISION);\n    return {\n      amount: adjustDecimals(toAmount.mul(BASIS_POINTS_DIVISOR - feeBasisPoints).div(BASIS_POINTS_DIVISOR)),\n      feeBasisPoints,\n    };\n  }\n\n  if (fromTokenAddress === USDG_ADDRESS) {\n    const redemptionValue = toToken.redemptionAmount\n      .mul(toTokenPriceUsd || toToken.maxPrice)\n      .div(expandDecimals(1, toToken.decimals));\n\n    if (redemptionValue.gt(THRESHOLD_REDEMPTION_VALUE)) {\n      const feeBasisPoints = getSwapFeeBasisPoints(toToken.isStable);\n\n      const toAmount =\n        ratio && !ratio.isZero()\n          ? toAmountBasedOnRatio\n          : fromAmount.mul(toToken.redemptionAmount).div(expandDecimals(1, toToken.decimals));\n\n      return {\n        amount: adjustDecimals(toAmount.mul(BASIS_POINTS_DIVISOR - feeBasisPoints).div(BASIS_POINTS_DIVISOR)),\n        feeBasisPoints,\n      };\n    }\n\n    const expectedAmount = fromAmount;\n\n    const stableToken = getMostAbundantStableToken(chainId, infoTokens);\n    if (!stableToken || stableToken.availableAmount.lt(expectedAmount)) {\n      const toAmount =\n        ratio && !ratio.isZero()\n          ? toAmountBasedOnRatio\n          : fromAmount.mul(toToken.redemptionAmount).div(expandDecimals(1, toToken.decimals));\n      const feeBasisPoints = getSwapFeeBasisPoints(toToken.isStable);\n      return {\n        amount: adjustDecimals(toAmount.mul(BASIS_POINTS_DIVISOR - feeBasisPoints).div(BASIS_POINTS_DIVISOR)),\n        feeBasisPoints,\n      };\n    }\n\n    const feeBasisPoints0 = getSwapFeeBasisPoints(true);\n    const feeBasisPoints1 = getSwapFeeBasisPoints(false);\n\n    if (ratio && !ratio.isZero()) {\n      const toAmount = toAmountBasedOnRatio\n        .mul(BASIS_POINTS_DIVISOR - feeBasisPoints0 - feeBasisPoints1)\n        .div(BASIS_POINTS_DIVISOR);\n      return {\n        amount: adjustDecimals(toAmount),\n        path: [USDG_ADDRESS, stableToken.address, toToken.address],\n        feeBasisPoints: feeBasisPoints0 + feeBasisPoints1,\n      };\n    }\n\n    // get toAmount for USDG => stableToken\n    let toAmount = fromAmount.mul(PRECISION).div(stableToken.maxPrice);\n    // apply USDG => stableToken fees\n    toAmount = toAmount.mul(BASIS_POINTS_DIVISOR - feeBasisPoints0).div(BASIS_POINTS_DIVISOR);\n\n    // get toAmount for stableToken => toToken\n    toAmount = toAmount.mul(stableToken.minPrice).div(toTokenPriceUsd || toToken.maxPrice);\n    // apply stableToken => toToken fees\n    toAmount = toAmount.mul(BASIS_POINTS_DIVISOR - feeBasisPoints1).div(BASIS_POINTS_DIVISOR);\n\n    return {\n      amount: adjustDecimals(toAmount),\n      path: [USDG_ADDRESS, stableToken.address, toToken.address],\n      feeBasisPoints: feeBasisPoints0 + feeBasisPoints1,\n    };\n  }\n\n  const toAmount =\n    ratio && !ratio.isZero()\n      ? toAmountBasedOnRatio\n      : fromAmount.mul(fromToken.minPrice).div(toTokenPriceUsd || toToken.maxPrice);\n\n  let usdgAmount = fromAmount.mul(fromToken.minPrice).div(PRECISION);\n  usdgAmount = adjustForDecimals(usdgAmount, fromToken.decimals, USDG_DECIMALS);\n  const swapFeeBasisPoints =\n    fromToken.isStable && toToken.isStable ? STABLE_SWAP_FEE_BASIS_POINTS : SWAP_FEE_BASIS_POINTS;\n  const taxBasisPoints = fromToken.isStable && toToken.isStable ? STABLE_TAX_BASIS_POINTS : TAX_BASIS_POINTS;\n  const feeBasisPoints0 = getFeeBasisPoints(\n    fromToken,\n    usdgAmount,\n    swapFeeBasisPoints,\n    taxBasisPoints,\n    true,\n    usdgSupply,\n    totalTokenWeights\n  );\n  const feeBasisPoints1 = getFeeBasisPoints(\n    toToken,\n    usdgAmount,\n    swapFeeBasisPoints,\n    taxBasisPoints,\n    false,\n    usdgSupply,\n    totalTokenWeights\n  );\n  const feeBasisPoints = feeBasisPoints0 > feeBasisPoints1 ? feeBasisPoints0 : feeBasisPoints1;\n\n  return {\n    amount: adjustDecimals(toAmount.mul(BASIS_POINTS_DIVISOR - feeBasisPoints).div(BASIS_POINTS_DIVISOR)),\n    feeBasisPoints,\n  };\n}\n\nexport function getProfitPrice(closePrice, position) {\n  let profitPrice;\n  if (position && position.averagePrice && closePrice) {\n    profitPrice = position.isLong\n      ? position.averagePrice.mul(BASIS_POINTS_DIVISOR + MIN_PROFIT_BIPS).div(BASIS_POINTS_DIVISOR)\n      : position.averagePrice.mul(BASIS_POINTS_DIVISOR - MIN_PROFIT_BIPS).div(BASIS_POINTS_DIVISOR);\n  }\n  return profitPrice;\n}\n\nexport function calculatePositionDelta(\n  price,\n  { size, collateral, isLong, averagePrice, lastIncreasedTime },\n  sizeDelta\n) {\n  if (!sizeDelta) {\n    sizeDelta = size;\n  }\n  const priceDelta = averagePrice.gt(price) ? averagePrice.sub(price) : price.sub(averagePrice);\n  let delta = sizeDelta.mul(priceDelta).div(averagePrice);\n  const pendingDelta = delta;\n\n  const minProfitExpired = lastIncreasedTime + MIN_PROFIT_TIME < Date.now() / 1000;\n  const hasProfit = isLong ? price.gt(averagePrice) : price.lt(averagePrice);\n  if (!minProfitExpired && hasProfit && delta.mul(BASIS_POINTS_DIVISOR).lte(size.mul(MIN_PROFIT_BIPS))) {\n    delta = bigNumberify(0);\n  }\n\n  const deltaPercentage = delta.mul(BASIS_POINTS_DIVISOR).div(collateral);\n  const pendingDeltaPercentage = pendingDelta.mul(BASIS_POINTS_DIVISOR).div(collateral);\n\n  return {\n    delta,\n    pendingDelta,\n    pendingDeltaPercentage,\n    hasProfit,\n    deltaPercentage,\n  };\n}\n\nexport function getDeltaStr({ delta, deltaPercentage, hasProfit }) {\n  let deltaStr;\n  let deltaPercentageStr;\n\n  if (delta.gt(0)) {\n    deltaStr = hasProfit ? \"+\" : \"-\";\n    deltaPercentageStr = hasProfit ? \"+\" : \"-\";\n  } else {\n    deltaStr = \"\";\n    deltaPercentageStr = \"\";\n  }\n  deltaStr += `$${formatAmount(delta, USD_DECIMALS, 2, true)}`;\n  deltaPercentageStr += `${formatAmount(deltaPercentage, 2, 2)}%`;\n\n  return { deltaStr, deltaPercentageStr };\n}\n\nexport function getDeltaAfterFees({ delta, totalFees, collateral, hasProfit }) {\n  let hasProfitAfterFees;\n  let pendingDeltaAfterFees;\n\n  if (hasProfit) {\n    if (delta.gt(totalFees)) {\n      hasProfitAfterFees = true;\n      pendingDeltaAfterFees = delta.sub(totalFees);\n    } else {\n      hasProfitAfterFees = false;\n      pendingDeltaAfterFees = totalFees.sub(delta);\n    }\n  } else {\n    hasProfitAfterFees = false;\n    pendingDeltaAfterFees = delta.add(totalFees);\n  }\n\n  let deltaPercentageAfterFees = pendingDeltaAfterFees.mul(BASIS_POINTS_DIVISOR).div(collateral);\n\n  return { pendingDeltaAfterFees, deltaPercentageAfterFees, hasProfitAfterFees };\n}\n\nexport function getLeverage({\n  size,\n  sizeDelta,\n  increaseSize,\n  collateral,\n  collateralDelta,\n  increaseCollateral,\n  entryFundingRate,\n  cumulativeFundingRate,\n  hasProfit,\n  delta,\n  includeDelta,\n}) {\n  if (!size && !sizeDelta) {\n    return;\n  }\n  if (!collateral && !collateralDelta) {\n    return;\n  }\n\n  let nextSize = size ? size : bigNumberify(0);\n  if (sizeDelta) {\n    if (increaseSize) {\n      nextSize = size.add(sizeDelta);\n    } else {\n      if (sizeDelta.gte(size)) {\n        return;\n      }\n      nextSize = size.sub(sizeDelta);\n    }\n  }\n\n  let remainingCollateral = collateral ? collateral : bigNumberify(0);\n  if (collateralDelta) {\n    if (increaseCollateral) {\n      remainingCollateral = collateral.add(collateralDelta);\n    } else {\n      if (collateralDelta.gte(collateral)) {\n        return;\n      }\n      remainingCollateral = collateral.sub(collateralDelta);\n    }\n  }\n\n  if (delta && includeDelta) {\n    if (hasProfit) {\n      remainingCollateral = remainingCollateral.add(delta);\n    } else {\n      if (delta.gt(remainingCollateral)) {\n        return;\n      }\n\n      remainingCollateral = remainingCollateral.sub(delta);\n    }\n  }\n\n  if (remainingCollateral.eq(0)) {\n    return;\n  }\n\n  remainingCollateral = sizeDelta\n    ? remainingCollateral.mul(BASIS_POINTS_DIVISOR - MARGIN_FEE_BASIS_POINTS).div(BASIS_POINTS_DIVISOR)\n    : remainingCollateral;\n  if (entryFundingRate && cumulativeFundingRate) {\n    const fundingFee = size.mul(cumulativeFundingRate.sub(entryFundingRate)).div(FUNDING_RATE_PRECISION);\n    remainingCollateral = remainingCollateral.sub(fundingFee);\n  }\n\n  return nextSize.mul(BASIS_POINTS_DIVISOR).div(remainingCollateral);\n}\n\nexport function getLiquidationPrice(data) {\n  let {\n    isLong,\n    size,\n    collateral,\n    averagePrice,\n    entryFundingRate,\n    cumulativeFundingRate,\n    sizeDelta,\n    collateralDelta,\n    increaseCollateral,\n    increaseSize,\n    delta,\n    hasProfit,\n    includeDelta,\n  } = data;\n  if (!size || !collateral || !averagePrice) {\n    return;\n  }\n\n  let nextSize = size ? size : bigNumberify(0);\n  let remainingCollateral = collateral;\n\n  if (sizeDelta) {\n    if (increaseSize) {\n      nextSize = size.add(sizeDelta);\n    } else {\n      if (sizeDelta.gte(size)) {\n        return;\n      }\n      nextSize = size.sub(sizeDelta);\n    }\n\n    if (includeDelta && !hasProfit) {\n      const adjustedDelta = sizeDelta.mul(delta).div(size);\n      remainingCollateral = remainingCollateral.sub(adjustedDelta);\n    }\n  }\n\n  if (collateralDelta) {\n    if (increaseCollateral) {\n      remainingCollateral = remainingCollateral.add(collateralDelta);\n    } else {\n      if (collateralDelta.gte(remainingCollateral)) {\n        return;\n      }\n      remainingCollateral = remainingCollateral.sub(collateralDelta);\n    }\n  }\n\n  let positionFee = getMarginFee(size).add(LIQUIDATION_FEE);\n  if (entryFundingRate && cumulativeFundingRate) {\n    const fundingFee = size.mul(cumulativeFundingRate.sub(entryFundingRate)).div(FUNDING_RATE_PRECISION);\n    positionFee = positionFee.add(fundingFee);\n  }\n\n  const liquidationPriceForFees = getLiquidationPriceFromDelta({\n    liquidationAmount: positionFee,\n    size: nextSize,\n    collateral: remainingCollateral,\n    averagePrice,\n    isLong,\n  });\n\n  const liquidationPriceForMaxLeverage = getLiquidationPriceFromDelta({\n    liquidationAmount: nextSize.mul(BASIS_POINTS_DIVISOR).div(MAX_LEVERAGE),\n    size: nextSize,\n    collateral: remainingCollateral,\n    averagePrice,\n    isLong,\n  });\n\n  if (!liquidationPriceForFees) {\n    return liquidationPriceForMaxLeverage;\n  }\n  if (!liquidationPriceForMaxLeverage) {\n    return liquidationPriceForFees;\n  }\n\n  if (isLong) {\n    // return the higher price\n    return liquidationPriceForFees.gt(liquidationPriceForMaxLeverage)\n      ? liquidationPriceForFees\n      : liquidationPriceForMaxLeverage;\n  }\n\n  // return the lower price\n  return liquidationPriceForFees.lt(liquidationPriceForMaxLeverage)\n    ? liquidationPriceForFees\n    : liquidationPriceForMaxLeverage;\n}\n\nexport function getUsd(amount, tokenAddress, max, infoTokens, orderOption, triggerPriceUsd) {\n  if (!amount) {\n    return;\n  }\n  if (tokenAddress === USDG_ADDRESS) {\n    return amount.mul(PRECISION).div(expandDecimals(1, 18));\n  }\n  const info = getTokenInfo(infoTokens, tokenAddress);\n  const price = getTriggerPrice(tokenAddress, max, info, orderOption, triggerPriceUsd);\n  if (!price) {\n    return;\n  }\n\n  return amount.mul(price).div(expandDecimals(1, info.decimals));\n}\n\nexport function getPositionKey(account, collateralTokenAddress, indexTokenAddress, isLong, nativeTokenAddress) {\n  const tokenAddress0 = collateralTokenAddress === AddressZero ? nativeTokenAddress : collateralTokenAddress;\n  const tokenAddress1 = indexTokenAddress === AddressZero ? nativeTokenAddress : indexTokenAddress;\n  return account + \":\" + tokenAddress0 + \":\" + tokenAddress1 + \":\" + isLong;\n}\n\nexport function getPositionContractKey(account, collateralToken, indexToken, isLong) {\n  return ethers.utils.solidityKeccak256(\n    [\"address\", \"address\", \"address\", \"bool\"],\n    [account, collateralToken, indexToken, isLong]\n  );\n}\n\nexport function getSwapFeeBasisPoints(isStable) {\n  return isStable ? STABLE_SWAP_FEE_BASIS_POINTS : SWAP_FEE_BASIS_POINTS;\n}\n\nconst RPC_PROVIDERS = {\n  [ETHEREUM]: ETHEREUM_RPC_PROVIDERS,\n  [ARBITRUM]: ARBITRUM_RPC_PROVIDERS,\n  [ARBITRUM_GOERLI]: ARBITRUM_GOERLI_RPC_PROVIDERS,\n};\n\nconst FALLBACK_PROVIDERS = {\n  [ARBITRUM]: [getFallbackArbitrumRpcUrl()],\n  [ARBITRUM_GOERLI]: [getFallbackArbitrumGoerliRpcUrl()],\n};\n\nexport function shortenAddress(address, length) {\n  if (!length) {\n    return \"\";\n  }\n  if (!address) {\n    return address;\n  }\n  if (address.length < 10) {\n    return address;\n  }\n  let left = Math.floor((length - 3) / 2) + 1;\n  return address.substring(0, left) + \"...\" + address.substring(address.length - (length - (left + 3)), address.length);\n}\n\nexport function formatTimeTill(time) {\n  const dateNow = new Date() / 1000;\n\n  if (time < dateNow) {\n    return \"0d 0h 0s\";\n  }\n\n  const secondsTill = Math.floor(time - dateNow);\n\n  let minutes = Math.floor(secondsTill / 60);\n  let hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  hours = hours - days * 24;\n  minutes = minutes - days * 24 * 60 - hours * 60;\n  return `${days}d ${hours}h ${minutes}m`;\n}\n\nexport function formatDateTime(time) {\n  return formatDateFn(time * 1000, \"dd MMM yyyy, h:mm a\");\n}\n\nexport function getTimeRemaining(time) {\n  const now = parseInt(Date.now() / 1000);\n  if (time < now) {\n    return \"0h 0m\";\n  }\n  const diff = time - now;\n  const hours = parseInt(diff / (60 * 60));\n  const minutes = parseInt((diff - hours * 60 * 60) / 60);\n  return `${hours}h ${minutes}m`;\n}\n\nexport function formatDate(time) {\n  return formatDateFn(time * 1000, \"dd MMM yyyy\");\n}\n\nexport function hasMetaMaskWalletExtension() {\n  return window.ethereum;\n}\n\nexport function hasCoinBaseWalletExtension() {\n  const { ethereum } = window;\n\n  if (!ethereum?.providers && !ethereum?.isCoinbaseWallet) {\n    return false;\n  }\n  return window.ethereum.isCoinbaseWallet || ethereum.providers.find(({ isCoinbaseWallet }) => isCoinbaseWallet);\n}\n\nexport function activateInjectedProvider(providerName) {\n  const { ethereum } = window;\n\n  if (!ethereum?.providers && !ethereum?.isCoinbaseWallet && !ethereum?.isMetaMask) {\n    return undefined;\n  }\n\n  let provider;\n  if (ethereum?.providers) {\n    switch (providerName) {\n      case \"CoinBase\":\n        provider = ethereum.providers.find(({ isCoinbaseWallet }) => isCoinbaseWallet);\n        break;\n      case \"MetaMask\":\n      default:\n        provider = ethereum.providers.find(({ isMetaMask }) => isMetaMask);\n        break;\n    }\n  }\n\n  if (provider) {\n    ethereum.setSelectedProvider(provider);\n  }\n}\n\nexport function getInjectedConnector() {\n  return injectedConnector;\n}\n\nexport function useChainId() {\n  let { chainId } = useWeb3React();\n\n  if (!chainId) {\n    const chainIdFromLocalStorage = localStorage.getItem(SELECTED_NETWORK_LOCAL_STORAGE_KEY);\n    if (chainIdFromLocalStorage) {\n      chainId = parseInt(chainIdFromLocalStorage);\n      if (!chainId) {\n        // localstorage value is invalid\n        localStorage.removeItem(SELECTED_NETWORK_LOCAL_STORAGE_KEY);\n      }\n    }\n  }\n\n  if (!chainId || !supportedChainIds.includes(chainId)) {\n    chainId = DEFAULT_CHAIN_ID;\n  }\n  return { chainId };\n}\n\nexport function useENS(address) {\n  const [ensName, setENSName] = useState();\n\n  useEffect(() => {\n    async function resolveENS() {\n      if (address) {\n        const provider = new ethers.providers.JsonRpcProvider(\"https://rpc.ankr.com/eth\");\n        const name = await provider.lookupAddress(address.toLowerCase());\n        if (name) {\n          setENSName(name);\n        } else {\n          setENSName();\n        }\n      }\n    }\n    resolveENS();\n  }, [address]);\n\n  return { ensName };\n}\n\nexport function clearWalletConnectData() {\n  localStorage.removeItem(WALLET_CONNECT_LOCALSTORAGE_KEY);\n}\n\nexport function clearWalletLinkData() {\n  Object.entries(localStorage)\n    .map((x) => x[0])\n    .filter((x) => x.startsWith(WALLET_LINK_LOCALSTORAGE_PREFIX))\n    .map((x) => localStorage.removeItem(x));\n}\n\nexport function useEagerConnect(setActivatingConnector) {\n  const { activate, active } = useWeb3React();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    (async function () {\n      if (Boolean(localStorage.getItem(SHOULD_EAGER_CONNECT_LOCALSTORAGE_KEY)) !== true) {\n        // only works with WalletConnect\n        clearWalletConnectData();\n        // force clear localStorage connection for MM/CB Wallet (Brave legacy)\n        clearWalletLinkData();\n        return;\n      }\n\n      let shouldTryWalletConnect = false;\n      try {\n        // naive validation to not trigger Wallet Connect if data is corrupted\n        const rawData = localStorage.getItem(WALLET_CONNECT_LOCALSTORAGE_KEY);\n        if (rawData) {\n          const data = JSON.parse(rawData);\n          if (data && data.connected) {\n            shouldTryWalletConnect = true;\n          }\n        }\n      } catch (ex) {\n        if (ex instanceof SyntaxError) {\n          // rawData is not a valid json\n          clearWalletConnectData();\n        }\n      }\n\n      if (shouldTryWalletConnect) {\n        try {\n          const connector = getWalletConnectConnector();\n          setActivatingConnector(connector);\n          await activate(connector, undefined, true);\n          // in case Wallet Connect is activated no need to check injected wallet\n          return;\n        } catch (ex) {\n          // assume data in localstorage is corrupted and delete it to not retry on next page load\n          clearWalletConnectData();\n        }\n      }\n\n      try {\n        const connector = getInjectedConnector();\n        const currentProviderName = localStorage.getItem(CURRENT_PROVIDER_LOCALSTORAGE_KEY) ?? false;\n        if (currentProviderName !== false) {\n          activateInjectedProvider(currentProviderName);\n        }\n        const authorized = await connector.isAuthorized();\n        if (authorized) {\n          setActivatingConnector(connector);\n          await activate(connector, undefined, true);\n        }\n      } catch (ex) {}\n\n      setTried(true);\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n\nexport function useInactiveListener(suppress = false) {\n  const injected = getInjectedConnector();\n  const { active, error, activate } = useWeb3React();\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        activate(injected);\n      };\n      const handleChainChanged = (chainId) => {\n        activate(injected);\n      };\n      const handleAccountsChanged = (accounts) => {\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      };\n      const handleNetworkChanged = (networkId) => {\n        activate(injected);\n      };\n\n      ethereum.on(\"connect\", handleConnect);\n      ethereum.on(\"chainChanged\", handleChainChanged);\n      ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      ethereum.on(\"networkChanged\", handleNetworkChanged);\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener(\"connect\", handleConnect);\n          ethereum.removeListener(\"chainChanged\", handleChainChanged);\n          ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n          ethereum.removeListener(\"networkChanged\", handleNetworkChanged);\n        }\n      };\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [active, error, suppress, activate]);\n}\n\nexport function getProvider(library, chainId) {\n  let provider;\n  if (library) {\n    return library.getSigner();\n  }\n  provider = _.sample(RPC_PROVIDERS[chainId]);\n  return new ethers.providers.StaticJsonRpcProvider(provider, { chainId });\n}\n\nexport function getFallbackProvider(chainId) {\n  if (!FALLBACK_PROVIDERS[chainId]) {\n    return;\n  }\n\n  const provider = _.sample(FALLBACK_PROVIDERS[chainId]);\n  return new ethers.providers.StaticJsonRpcProvider(provider, { chainId });\n}\n\nexport const getContractCall = ({ provider, contractInfo, arg0, arg1, method, params, additionalArgs, onError }) => {\n  if (ethers.utils.isAddress(arg0)) {\n    const address = arg0;\n    const contract = new ethers.Contract(address, contractInfo.abi, provider);\n\n    if (additionalArgs) {\n      return contract[method](...params.concat(additionalArgs));\n    }\n    return contract[method](...params);\n  }\n\n  if (!provider) {\n    return;\n  }\n\n  return provider[method](arg1, ...params);\n};\n\n// prettier-ignore\nexport const fetcher = (library, contractInfo, additionalArgs) => (...args) => {\n  // eslint-disable-next-line\n  const [id, chainId, arg0, arg1, ...params] = args;\n  const provider = getProvider(library, chainId);\n\n  const method = ethers.utils.isAddress(arg0) ? arg1 : arg0;\n\n  const contractCall = getContractCall({\n    provider,\n    contractInfo,\n    arg0,\n    arg1,\n    method,\n    params,\n    additionalArgs,\n  })\n\n  let shouldCallFallback = true\n\n  const handleFallback = async (resolve, reject, error) => {\n    if (!shouldCallFallback) {\n      return\n    }\n    // prevent fallback from being called twice\n    shouldCallFallback = false\n\n    const fallbackProvider = getFallbackProvider(chainId)\n    if (!fallbackProvider) {\n      reject(error)\n      return\n    }\n\n    console.info(\"using fallbackProvider for\", method)\n    const fallbackContractCall = getContractCall({\n      provider: fallbackProvider,\n      contractInfo,\n      arg0,\n      arg1,\n      method,\n      params,\n      additionalArgs,\n    })\n\n    fallbackContractCall.then((result) => resolve(result)).catch((e) => {\n      console.error(\"fallback fetcher error\", id, contractInfo.contractName, method, e);\n      reject(e)\n    })\n  }\n\n  return new Promise(async (resolve, reject) => {\n    contractCall.then((result) => {\n      shouldCallFallback = false\n      resolve(result)\n    }).catch((e) => {\n      console.error(\"fetcher error\", id, contractInfo.contractName, method, e);\n      handleFallback(resolve, reject, e)\n    })\n\n    setTimeout(() => {\n      handleFallback(resolve, reject, \"contractCall timeout\")\n    }, 2000)\n  })\n};\n\nexport function bigNumberify(n) {\n  return ethers.BigNumber.from(n);\n}\n\nexport function expandDecimals(n, decimals) {\n  return bigNumberify(n).mul(bigNumberify(10).pow(decimals));\n}\n\nexport const trimZeroDecimals = (amount) => {\n  if (parseFloat(amount) === parseInt(amount)) {\n    return parseInt(amount).toString();\n  }\n  return amount;\n};\n\nexport const limitDecimals = (amount, maxDecimals) => {\n  let amountStr = amount.toString();\n  if (maxDecimals === undefined) {\n    return amountStr;\n  }\n  if (maxDecimals === 0) {\n    return amountStr.split(\".\")[0];\n  }\n  const dotIndex = amountStr.indexOf(\".\");\n  if (dotIndex !== -1) {\n    let decimals = amountStr.length - dotIndex - 1;\n    if (decimals > maxDecimals) {\n      amountStr = amountStr.substr(0, amountStr.length - (decimals - maxDecimals));\n    }\n  }\n  return amountStr;\n};\n\nexport const padDecimals = (amount, minDecimals) => {\n  let amountStr = amount.toString();\n  const dotIndex = amountStr.indexOf(\".\");\n  if (dotIndex !== -1) {\n    const decimals = amountStr.length - dotIndex - 1;\n    if (decimals < minDecimals) {\n      amountStr = amountStr.padEnd(amountStr.length + (minDecimals - decimals), \"0\");\n    }\n  } else {\n    amountStr = amountStr + Number(0).toFixed(minDecimals).slice(1);\n  }\n  return amountStr;\n};\n\nexport const formatKeyAmount = (map, key, tokenDecimals, displayDecimals, useCommas) => {\n  if (!map || !map[key]) {\n    return \"...\";\n  }\n\n  return formatAmount(map[key], tokenDecimals, displayDecimals, useCommas);\n};\n\nexport const formatArrayAmount = (arr, index, tokenDecimals, displayDecimals, useCommas) => {\n  if (!arr || !arr[index]) {\n    return \"...\";\n  }\n\n  return formatAmount(arr[index], tokenDecimals, displayDecimals, useCommas);\n};\n\nfunction _parseOrdersData(ordersData, account, indexes, extractor, uintPropsLength, addressPropsLength) {\n  if (!ordersData || ordersData.length === 0) {\n    return [];\n  }\n  const [uintProps, addressProps] = ordersData;\n  const count = uintProps.length / uintPropsLength;\n\n  const orders = [];\n  for (let i = 0; i < count; i++) {\n    const sliced = addressProps\n      .slice(addressPropsLength * i, addressPropsLength * (i + 1))\n      .concat(uintProps.slice(uintPropsLength * i, uintPropsLength * (i + 1)));\n\n    if (sliced[0] === AddressZero && sliced[1] === AddressZero) {\n      continue;\n    }\n\n    const order = extractor(sliced);\n    order.index = indexes[i];\n    order.account = account;\n    orders.push(order);\n  }\n\n  return orders;\n}\n\nfunction parseDecreaseOrdersData(chainId, decreaseOrdersData, account, indexes) {\n  const extractor = (sliced) => {\n    const isLong = sliced[4].toString() === \"1\";\n    return {\n      collateralToken: sliced[0],\n      indexToken: sliced[1],\n      collateralDelta: sliced[2],\n      sizeDelta: sliced[3],\n      isLong,\n      triggerPrice: sliced[5],\n      triggerAboveThreshold: sliced[6].toString() === \"1\",\n      type: DECREASE,\n    };\n  };\n  return _parseOrdersData(decreaseOrdersData, account, indexes, extractor, 5, 2).filter((order) => {\n    return isValidToken(chainId, order.collateralToken) && isValidToken(chainId, order.indexToken);\n  });\n}\n\nfunction parseIncreaseOrdersData(chainId, increaseOrdersData, account, indexes) {\n  const extractor = (sliced) => {\n    const isLong = sliced[5].toString() === \"1\";\n    return {\n      purchaseToken: sliced[0],\n      collateralToken: sliced[1],\n      indexToken: sliced[2],\n      purchaseTokenAmount: sliced[3],\n      sizeDelta: sliced[4],\n      isLong,\n      triggerPrice: sliced[6],\n      triggerAboveThreshold: sliced[7].toString() === \"1\",\n      type: INCREASE,\n    };\n  };\n  return _parseOrdersData(increaseOrdersData, account, indexes, extractor, 5, 3).filter((order) => {\n    return (\n      isValidToken(chainId, order.purchaseToken) &&\n      isValidToken(chainId, order.collateralToken) &&\n      isValidToken(chainId, order.indexToken)\n    );\n  });\n}\n\nfunction parseSwapOrdersData(chainId, swapOrdersData, account, indexes) {\n  if (!swapOrdersData || !swapOrdersData.length) {\n    return [];\n  }\n\n  const extractor = (sliced) => {\n    const triggerAboveThreshold = sliced[6].toString() === \"1\";\n    const shouldUnwrap = sliced[7].toString() === \"1\";\n\n    return {\n      path: [sliced[0], sliced[1], sliced[2]].filter((address) => address !== AddressZero),\n      amountIn: sliced[3],\n      minOut: sliced[4],\n      triggerRatio: sliced[5],\n      triggerAboveThreshold,\n      type: SWAP,\n      shouldUnwrap,\n    };\n  };\n  return _parseOrdersData(swapOrdersData, account, indexes, extractor, 5, 3).filter((order) => {\n    return order.path.every((token) => isValidToken(chainId, token));\n  });\n}\n\nexport function getOrderKey(order) {\n  return `${order.type}-${order.account}-${order.index}`;\n}\n\nexport function useAccountOrders(flagOrdersEnabled, overrideAccount) {\n  const { library, account: connectedAccount } = useWeb3React();\n  const active = true; // this is used in Actions.js so set active to always be true\n  const account = overrideAccount || connectedAccount;\n\n  const { chainId } = useChainId();\n  const shouldRequest = active && account && flagOrdersEnabled;\n\n  const orderBookAddress = getContract(chainId, \"OrderBook\");\n  const orderBookReaderAddress = getContract(chainId, \"OrderBookReader\");\n  const key = shouldRequest ? [active, chainId, orderBookAddress, account] : false;\n  const {\n    data: orders = [],\n    mutate: updateOrders,\n    error: ordersError,\n  } = useSWR(key, {\n    dedupingInterval: 5000,\n    fetcher: async (active, chainId, orderBookAddress, account) => {\n      const provider = getProvider(library, chainId);\n      const orderBookContract = new ethers.Contract(orderBookAddress, OrderBook.abi, provider);\n      const orderBookReaderContract = new ethers.Contract(orderBookReaderAddress, OrderBookReader.abi, provider);\n\n      const fetchLastIndex = async (type) => {\n        const method = type.toLowerCase() + \"OrdersIndex\";\n        return await orderBookContract[method](account).then((res) => bigNumberify(res._hex).toNumber());\n      };\n\n      const fetchLastIndexes = async () => {\n        const [swap, increase, decrease] = await Promise.all([\n          fetchLastIndex(\"swap\"),\n          fetchLastIndex(\"increase\"),\n          fetchLastIndex(\"decrease\"),\n        ]);\n\n        return { swap, increase, decrease };\n      };\n\n      const getRange = (to, from) => {\n        const LIMIT = 10;\n        const _indexes = [];\n        from = from || Math.max(to - LIMIT, 0);\n        for (let i = to - 1; i >= from; i--) {\n          _indexes.push(i);\n        }\n        return _indexes;\n      };\n\n      const getIndexes = (knownIndexes, lastIndex) => {\n        if (knownIndexes.length === 0) {\n          return getRange(lastIndex);\n        }\n        return [\n          ...knownIndexes,\n          ...getRange(lastIndex, knownIndexes[knownIndexes.length - 1] + 1).sort((a, b) => b - a),\n        ];\n      };\n\n      const getOrders = async (method, knownIndexes, lastIndex, parseFunc) => {\n        const indexes = getIndexes(knownIndexes, lastIndex);\n        const ordersData = await orderBookReaderContract[method](orderBookAddress, account, indexes);\n        const orders = parseFunc(chainId, ordersData, account, indexes);\n\n        return orders;\n      };\n\n      try {\n        const lastIndexes = await fetchLastIndexes();\n        const serverIndexes = { swap: [], increase: [], decrease: [] };\n\n        const [swapOrders = [], increaseOrders = [], decreaseOrders = []] = await Promise.all([\n          getOrders(\"getSwapOrders\", serverIndexes.swap, lastIndexes.swap, parseSwapOrdersData),\n          getOrders(\"getIncreaseOrders\", serverIndexes.increase, lastIndexes.increase, parseIncreaseOrdersData),\n          getOrders(\"getDecreaseOrders\", serverIndexes.decrease, lastIndexes.decrease, parseDecreaseOrdersData),\n        ]);\n        return [...swapOrders, ...increaseOrders, ...decreaseOrders];\n      } catch (ex) {\n        console.error(ex);\n      }\n    },\n  });\n\n  return [orders, updateOrders, ordersError];\n}\n\nexport const formatAmount = (amount, tokenDecimals, displayDecimals, useCommas, defaultValue) => {\n  if (!defaultValue) {\n    defaultValue = \"...\";\n  }\n  if (amount === undefined || amount.toString().length === 0) {\n    return defaultValue;\n  }\n  if (displayDecimals === undefined) {\n    displayDecimals = 4;\n  }\n  let amountStr = ethers.utils.formatUnits(amount, tokenDecimals);\n  amountStr = limitDecimals(amountStr, displayDecimals);\n  if (displayDecimals !== 0) {\n    amountStr = padDecimals(amountStr, displayDecimals);\n  }\n  if (useCommas) {\n    return numberWithCommas(amountStr);\n  }\n  return amountStr;\n};\n\nexport const formatAmountFree = (amount, tokenDecimals, displayDecimals) => {\n  if (!amount) {\n    return \"...\";\n  }\n  let amountStr = ethers.utils.formatUnits(amount, tokenDecimals);\n  amountStr = limitDecimals(amountStr, displayDecimals);\n  return trimZeroDecimals(amountStr);\n};\n\nexport const parseValue = (value, tokenDecimals) => {\n  const pValue = parseFloat(value);\n  if (isNaN(pValue)) {\n    return undefined;\n  }\n  value = limitDecimals(value, tokenDecimals);\n  const amount = ethers.utils.parseUnits(value, tokenDecimals);\n  return bigNumberify(amount);\n};\n\nexport function numberWithCommas(x) {\n  if (!x) {\n    return \"...\";\n  }\n  var parts = x.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return parts.join(\".\");\n}\n\nexport function getExplorerUrl(chainId) {\n  if (chainId === 3) {\n    return \"https://ropsten.etherscan.io/\";\n  } else if (chainId === 42) {\n    return \"https://kovan.etherscan.io/\";\n  } else if (chainId === ARBITRUM_GOERLI) {\n    return \"https://goerli-rollup-explorer.arbitrum.io/\";\n  } else if (chainId === ARBITRUM) {\n    return \"https://arbiscan.io/\";\n  }\n  return \"https://etherscan.io/\";\n}\n\nexport function getAccountUrl(chainId, account) {\n  if (!account) {\n    return getExplorerUrl(chainId);\n  }\n  return getExplorerUrl(chainId) + \"address/\" + account;\n}\n\nexport function getTokenUrl(chainId, address) {\n  if (!address) {\n    return getExplorerUrl(chainId);\n  }\n  return getExplorerUrl(chainId) + \"token/\" + address;\n}\n\nexport function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport async function setGasPrice(txnOpts, provider, chainId) {\n  let maxGasPrice = MAX_GAS_PRICE_MAP[chainId];\n  const premium = GAS_PRICE_ADJUSTMENT_MAP[chainId] || bigNumberify(0);\n\n  if (maxGasPrice) {\n    const gasPrice = await provider.getGasPrice();\n    if (gasPrice.gt(maxGasPrice)) {\n      maxGasPrice = gasPrice;\n    }\n\n    const feeData = await provider.getFeeData();\n    txnOpts.maxFeePerGas = maxGasPrice;\n    txnOpts.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas.add(premium);\n  } else {\n    const gasPrice = await provider.getGasPrice();\n    txnOpts.gasPrice = gasPrice.add(premium);\n  }\n}\n\nexport async function getGasLimit(contract, method, params = [], value, gasBuffer) {\n  const defaultGasBuffer = 300000;\n  const defaultValue = bigNumberify(0);\n\n  if (!value) {\n    value = defaultValue;\n  }\n\n  let gasLimit = await contract.estimateGas[method](...params, { value });\n\n  if (!gasBuffer) {\n    gasBuffer = defaultGasBuffer;\n  }\n\n  return gasLimit.add(gasBuffer);\n}\n\nexport function approveTokens({\n  setIsApproving,\n  library,\n  tokenAddress,\n  spender,\n  chainId,\n  onApproveSubmitted,\n  getTokenInfo,\n  infoTokens,\n  pendingTxns,\n  setPendingTxns,\n  includeMessage,\n}) {\n  setIsApproving(true);\n  const contract = new ethers.Contract(tokenAddress, Token.abi, library.getSigner());\n  contract\n    .approve(spender, ethers.constants.MaxUint256)\n    .then(async (res) => {\n      const txUrl = getExplorerUrl(chainId) + \"tx/\" + res.hash;\n      helperToast.success(\n        <div>\n          Approval submitted!{\" \"}\n          <a href={txUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n            View status.\n          </a>\n          <br />\n        </div>\n      );\n      if (onApproveSubmitted) {\n        onApproveSubmitted();\n      }\n      if (getTokenInfo && infoTokens && pendingTxns && setPendingTxns) {\n        const token = getTokenInfo(infoTokens, tokenAddress);\n        const pendingTxn = {\n          hash: res.hash,\n          message: includeMessage ? `${token.symbol} Approved!` : false,\n        };\n        setPendingTxns([...pendingTxns, pendingTxn]);\n      }\n    })\n    .catch((e) => {\n      console.error(e);\n      let failMsg;\n      if (\n        [\"not enough funds for gas\", \"failed to execute call with revert code InsufficientGasFunds\"].includes(\n          e.data?.message\n        )\n      ) {\n        failMsg = (\n          <div>\n            There is not enough ETH in your account on Arbitrum to send this transaction.\n            <br />\n            <br />\n            <a href={\"https://arbitrum.io/bridge-tutorial/\"} target=\"_blank\" rel=\"noopener noreferrer\">\n              Bridge ETH to Arbitrum\n            </a>\n          </div>\n        );\n      } else if (e.message?.includes(\"User denied transaction signature\")) {\n        failMsg = \"Approval was cancelled.\";\n      } else {\n        failMsg = \"Approval failed.\";\n      }\n      helperToast.error(failMsg);\n    })\n    .finally(() => {\n      setIsApproving(false);\n    });\n}\n\nexport const shouldRaiseGasError = (token, amount) => {\n  if (!amount) {\n    return false;\n  }\n  if (token.address !== AddressZero) {\n    return false;\n  }\n  if (!token.balance) {\n    return false;\n  }\n  if (amount.gte(token.balance)) {\n    return true;\n  }\n  if (token.balance.sub(amount).lt(DUST_BNB)) {\n    return true;\n  }\n  return false;\n};\n\nexport const getTokenInfo = (infoTokens, tokenAddress, replaceNative, nativeTokenAddress) => {\n  if (replaceNative && tokenAddress === nativeTokenAddress) {\n    return infoTokens[AddressZero];\n  }\n  return infoTokens[tokenAddress];\n};\n\nconst NETWORK_METADATA = {\n  [ARBITRUM_GOERLI]: {\n    chainId: \"0x\" + ARBITRUM_GOERLI.toString(16),\n    chainName: \"Arbitrum Goerli\",\n    nativeCurrency: {\n      name: \"ETH\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpcUrls: ARBITRUM_GOERLI_RPC_PROVIDERS,\n    blockExplorerUrls: [getExplorerUrl(ARBITRUM_GOERLI)],\n  },\n  [ARBITRUM]: {\n    chainId: \"0x\" + ARBITRUM.toString(16),\n    chainName: \"Arbitrum\",\n    nativeCurrency: {\n      name: \"ETH\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpcUrls: ARBITRUM_RPC_PROVIDERS,\n    blockExplorerUrls: [getExplorerUrl(ARBITRUM)],\n  },\n};\n\nexport const addNetwork = async (metadata) => {\n  await window.ethereum.request({ method: \"wallet_addEthereumChain\", params: [metadata] }).catch();\n};\n\nexport const switchNetwork = async (chainId, active) => {\n  if (!active) {\n    // chainId in localStorage allows to switch network even if wallet is not connected\n    // or there is no wallet at all\n    localStorage.setItem(SELECTED_NETWORK_LOCAL_STORAGE_KEY, chainId);\n    document.location.reload();\n    return;\n  }\n\n  try {\n    const chainIdHex = \"0x\" + chainId.toString(16);\n    await window.ethereum.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: chainIdHex }],\n    });\n    helperToast.success(\"Connected to \" + getChainName(chainId));\n    return getChainName(chainId);\n  } catch (ex) {\n    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n    // This error code indicates that the chain has not been added to MetaMask.\n    // 4001 error means user has denied the request\n    // If the error code is not 4001, then we need to add the network\n    if (ex.code !== 4001) {\n      return await addNetwork(NETWORK_METADATA[chainId]);\n    }\n\n    console.error(\"error\", ex);\n  }\n};\n\nexport const getWalletConnectHandler = (activate, deactivate, setActivatingConnector) => {\n  const fn = async () => {\n    const walletConnect = getWalletConnectConnector();\n    setActivatingConnector(walletConnect);\n    activate(walletConnect, (ex) => {\n      if (ex instanceof UnsupportedChainIdError) {\n        helperToast.error(\"Unsupported chain. Switch to Arbitrum network on your wallet and try again\");\n        console.warn(ex);\n      } else if (!(ex instanceof UserRejectedRequestErrorWalletConnect)) {\n        helperToast.error(ex.message);\n        console.warn(ex);\n      }\n      clearWalletConnectData();\n      deactivate();\n    });\n  };\n  return fn;\n};\n\nexport const getInjectedHandler = (activate) => {\n  const fn = async () => {\n    activate(getInjectedConnector(), (e) => {\n      const chainId = localStorage.getItem(SELECTED_NETWORK_LOCAL_STORAGE_KEY) || DEFAULT_CHAIN_ID;\n\n      if (e instanceof UnsupportedChainIdError) {\n        helperToast.error(\n          <div>\n            <div>Your wallet is not connected to {getChainName(chainId)}.</div>\n            <br />\n            <div className=\"clickable underline margin-bottom\" onClick={() => switchNetwork(chainId, true)}>\n              Switch to {getChainName(chainId)}\n            </div>\n            <div className=\"clickable underline\" onClick={() => switchNetwork(chainId, true)}>\n              Add {getChainName(chainId)}\n            </div>\n          </div>\n        );\n        return;\n      }\n      const errString = e.message ?? e.toString();\n      helperToast.error(errString);\n    });\n  };\n  return fn;\n};\n\nexport function isMobileDevice(navigator) {\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n}\n\nexport function setTokenUsingIndexPrices(token, indexPrices, nativeTokenAddress) {\n  if (!indexPrices) {\n    return;\n  }\n\n  const tokenAddress = token.isNative ? nativeTokenAddress : token.address;\n\n  const indexPrice = indexPrices[tokenAddress];\n  if (!indexPrice) {\n    return;\n  }\n\n  const indexPriceBn = bigNumberify(indexPrice);\n  if (indexPriceBn.eq(0)) {\n    return;\n  }\n\n  const spread = token.maxPrice.sub(token.minPrice);\n  const spreadBps = spread.mul(BASIS_POINTS_DIVISOR).div(token.maxPrice);\n\n  if (spreadBps.gt(MAX_PRICE_DEVIATION_BASIS_POINTS - 1)) {\n    // only set of the values as there will be a spread between the index price and the Chainlink price\n    if (indexPriceBn.gt(token.minPrimaryPrice)) {\n      token.maxPrice = indexPriceBn;\n    } else {\n      token.minPrice = indexPriceBn;\n    }\n    return;\n  }\n\n  const halfSpreadBps = spreadBps.div(2).toNumber();\n  token.maxPrice = indexPriceBn.mul(BASIS_POINTS_DIVISOR + halfSpreadBps).div(BASIS_POINTS_DIVISOR);\n  token.minPrice = indexPriceBn.mul(BASIS_POINTS_DIVISOR - halfSpreadBps).div(BASIS_POINTS_DIVISOR);\n}\n\nexport const CHART_PERIODS = {\n  \"5m\": 60 * 5,\n  \"15m\": 60 * 15,\n  \"1h\": 60 * 60,\n  \"4h\": 60 * 60 * 4,\n  \"1d\": 60 * 60 * 24,\n};\n\nexport function getTotalVolumeSum(volumes) {\n  if (!volumes || volumes.length === 0) {\n    return;\n  }\n\n  let volume = bigNumberify(0);\n  for (let i = 0; i < volumes.length; i++) {\n    volume = volume.add(volumes[i].data.volume);\n  }\n\n  return volume;\n}\n\nexport function getBalanceAndSupplyData(balances) {\n  if (!balances || balances.length === 0) {\n    return {};\n  }\n\n  const keys = [\"myc\", \"esMyc\", \"mlp\", \"stakedMycTracker\"];\n  const balanceData = {};\n  const supplyData = {};\n  const propsLength = 2;\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    balanceData[key] = balances[i * propsLength];\n    supplyData[key] = balances[i * propsLength + 1];\n  }\n\n  return { balanceData, supplyData };\n}\n\nexport function getDepositBalanceData(depositBalances) {\n  if (!depositBalances || depositBalances.length === 0) {\n    return;\n  }\n\n  const keys = [\n    \"mycInStakedMyc\",\n    \"esMycInStakedMyc\",\n    \"stakedMycInBonusMyc\",\n    \"bonusMycInFeeMyc\",\n    \"bnMycInFeeMyc\",\n    \"mlpInStakedMlp\",\n  ];\n  const data = {};\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    data[key] = depositBalances[i];\n  }\n\n  return data;\n}\n\nexport function getVestingData(vestingInfo) {\n  if (!vestingInfo || vestingInfo.length === 0) {\n    return;\n  }\n\n  const keys = [\"mycVester\", \"mlpVester\"];\n  const data = {};\n  const propsLength = 7;\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    data[key] = {\n      pairAmount: vestingInfo[i * propsLength],\n      vestedAmount: vestingInfo[i * propsLength + 1],\n      escrowedBalance: vestingInfo[i * propsLength + 2],\n      claimedAmounts: vestingInfo[i * propsLength + 3],\n      claimable: vestingInfo[i * propsLength + 4],\n      maxVestableAmount: vestingInfo[i * propsLength + 5],\n      averageStakedAmount: vestingInfo[i * propsLength + 6],\n    };\n\n    data[key + \"PairAmount\"] = data[key].pairAmount;\n    data[key + \"VestedAmount\"] = data[key].vestedAmount;\n    data[key + \"EscrowedBalance\"] = data[key].escrowedBalance;\n    data[key + \"ClaimSum\"] = data[key].claimedAmounts.add(data[key].claimable);\n    data[key + \"Claimable\"] = data[key].claimable;\n    data[key + \"MaxVestableAmount\"] = data[key].maxVestableAmount;\n    data[key + \"AverageStakedAmount\"] = data[key].averageStakedAmount;\n  }\n\n  return data;\n}\n\nexport function getStakingData(stakingInfo) {\n  if (!stakingInfo || stakingInfo.length === 0) {\n    return;\n  }\n\n  const keys = [\"stakedMycTracker\", \"bonusMycTracker\", \"feeMycTracker\", \"stakedMlpTracker\", \"feeMlpTracker\"];\n  const data = {};\n  const propsLength = 5;\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    data[key] = {\n      claimable: stakingInfo[i * propsLength],\n      tokensPerInterval: stakingInfo[i * propsLength + 1],\n      averageStakedAmounts: stakingInfo[i * propsLength + 2],\n      cumulativeRewards: stakingInfo[i * propsLength + 3],\n      totalSupply: stakingInfo[i * propsLength + 4],\n    };\n  }\n\n  return data;\n}\n\nexport function getProcessedData(\n  balanceData,\n  supplyData,\n  depositBalanceData,\n  stakingData,\n  vestingData,\n  aum,\n  nativeTokenPrice,\n  stakedMycSupply,\n  mycPrice,\n  mycSupply\n) {\n  if (\n    !balanceData ||\n    !supplyData ||\n    !depositBalanceData ||\n    !stakingData ||\n    !vestingData ||\n    !aum ||\n    !nativeTokenPrice ||\n    !stakedMycSupply ||\n    !mycPrice ||\n    !mycSupply\n  ) {\n    return {};\n  }\n\n  const data = {};\n\n  data.mycBalance = balanceData.myc;\n  data.mycBalanceUsd = balanceData.myc.mul(mycPrice).div(expandDecimals(1, 18));\n\n  data.mycSupply = bigNumberify(mycSupply);\n\n  data.mycSupplyUsd = data.mycSupply.mul(mycPrice).div(expandDecimals(1, 18));\n  data.stakedMycSupply = stakedMycSupply;\n  data.stakedMycSupplyUsd = stakedMycSupply.mul(mycPrice).div(expandDecimals(1, 18));\n  data.mycInStakedMyc = depositBalanceData.mycInStakedMyc;\n  data.mycInStakedMycUsd = depositBalanceData.mycInStakedMyc.mul(mycPrice).div(expandDecimals(1, 18));\n\n  data.esMycBalance = balanceData.esMyc;\n  data.esMycBalanceUsd = balanceData.esMyc.mul(mycPrice).div(expandDecimals(1, 18));\n\n  data.stakedMycTrackerSupply = supplyData.stakedMycTracker;\n  data.stakedMycTrackerSupplyUsd = supplyData.stakedMycTracker.mul(mycPrice).div(expandDecimals(1, 18));\n  data.stakedEsMycSupply = data.stakedMycTrackerSupply.sub(data.stakedMycSupply);\n  data.stakedEsMycSupplyUsd = data.stakedEsMycSupply.mul(mycPrice).div(expandDecimals(1, 18));\n\n  data.esMycInStakedMyc = depositBalanceData.esMycInStakedMyc;\n  data.esMycInStakedMycUsd = depositBalanceData.esMycInStakedMyc.mul(mycPrice).div(expandDecimals(1, 18));\n\n  data.bnMycInFeeMyc = depositBalanceData.bnMycInFeeMyc;\n  data.bonusMycInFeeMyc = depositBalanceData.bonusMycInFeeMyc;\n  data.feeMycSupply = stakingData.feeMycTracker.totalSupply;\n  data.feeMycSupplyUsd = data.feeMycSupply.mul(mycPrice).div(expandDecimals(1, 18));\n\n  data.stakedMycTrackerRewards = stakingData.stakedMycTracker.claimable;\n  data.stakedMycTrackerRewardsUsd = stakingData.stakedMycTracker.claimable.mul(mycPrice).div(expandDecimals(1, 18));\n\n  data.bonusMycTrackerRewards = stakingData.bonusMycTracker.claimable;\n\n  data.feeMycTrackerRewards = stakingData.feeMycTracker.claimable;\n  data.feeMycTrackerRewardsUsd = stakingData.feeMycTracker.claimable.mul(nativeTokenPrice).div(expandDecimals(1, 18));\n\n  data.boostBasisPoints = bigNumberify(0);\n  if (data && data.bnMycInFeeMyc && data.bonusMycInFeeMyc && data.bonusMycInFeeMyc.gt(0)) {\n    data.boostBasisPoints = data.bnMycInFeeMyc.mul(BASIS_POINTS_DIVISOR).div(data.bonusMycInFeeMyc);\n  }\n\n  data.stakedMycTrackerAnnualRewardsUsd = stakingData.stakedMycTracker.tokensPerInterval\n    .mul(SECONDS_PER_YEAR)\n    .mul(mycPrice)\n    .div(expandDecimals(1, 18));\n  data.mycAprForEsMyc =\n    data.stakedMycTrackerSupplyUsd && data.stakedMycTrackerSupplyUsd.gt(0)\n      ? data.stakedMycTrackerAnnualRewardsUsd.mul(BASIS_POINTS_DIVISOR).div(data.stakedMycTrackerSupplyUsd)\n      : bigNumberify(0);\n  data.feeMycTrackerAnnualRewardsUsd = stakingData.feeMycTracker.tokensPerInterval\n    .mul(SECONDS_PER_YEAR)\n    .mul(nativeTokenPrice)\n    .div(expandDecimals(1, 18));\n  data.mycAprForNativeToken =\n    data.feeMycSupplyUsd && data.feeMycSupplyUsd.gt(0)\n      ? data.feeMycTrackerAnnualRewardsUsd.mul(BASIS_POINTS_DIVISOR).div(data.feeMycSupplyUsd)\n      : bigNumberify(0);\n  data.mycBoostAprForNativeToken = data.mycAprForNativeToken.mul(data.boostBasisPoints).div(BASIS_POINTS_DIVISOR);\n  data.mycAprTotal = data.mycAprForNativeToken.add(data.mycAprForEsMyc);\n  data.mycAprTotalWithBoost = data.mycAprForNativeToken.add(data.mycBoostAprForNativeToken).add(data.mycAprForEsMyc);\n  data.mycAprForNativeTokenWithBoost = data.mycAprForNativeToken.add(data.mycBoostAprForNativeToken);\n\n  data.totalMycRewardsUsd = data.stakedMycTrackerRewardsUsd.add(data.feeMycTrackerRewardsUsd);\n\n  data.mlpSupply = supplyData.mlp;\n  data.mlpPrice =\n    data.mlpSupply && data.mlpSupply.gt(0)\n      ? aum.mul(expandDecimals(1, MLP_DECIMALS)).div(data.mlpSupply)\n      : bigNumberify(0);\n\n  data.mlpSupplyUsd = supplyData.mlp.mul(data.mlpPrice).div(expandDecimals(1, 18));\n\n  data.mlpBalance = depositBalanceData.mlpInStakedMlp;\n  data.mlpBalanceUsd = depositBalanceData.mlpInStakedMlp.mul(data.mlpPrice).div(expandDecimals(1, MLP_DECIMALS));\n\n  data.stakedMlpTrackerRewards = stakingData.stakedMlpTracker.claimable;\n  data.stakedMlpTrackerRewardsUsd = stakingData.stakedMlpTracker.claimable.mul(mycPrice).div(expandDecimals(1, 18));\n\n  data.feeMlpTrackerRewards = stakingData.feeMlpTracker.claimable;\n  data.feeMlpTrackerRewardsUsd = stakingData.feeMlpTracker.claimable.mul(nativeTokenPrice).div(expandDecimals(1, 18));\n\n  data.stakedMlpTrackerAnnualRewardsUsd = stakingData.stakedMlpTracker.tokensPerInterval\n    .mul(SECONDS_PER_YEAR)\n    .mul(mycPrice)\n    .div(expandDecimals(1, 18));\n  data.mlpAprForEsMyc =\n    data.mlpSupplyUsd && data.mlpSupplyUsd.gt(0)\n      ? data.stakedMlpTrackerAnnualRewardsUsd.mul(BASIS_POINTS_DIVISOR).div(data.mlpSupplyUsd)\n      : bigNumberify(0);\n  data.feeMlpTrackerAnnualRewardsUsd = stakingData.feeMlpTracker.tokensPerInterval\n    .mul(SECONDS_PER_YEAR)\n    .mul(nativeTokenPrice)\n    .div(expandDecimals(1, 18));\n  data.mlpAprForNativeToken =\n    data.mlpSupplyUsd && data.mlpSupplyUsd.gt(0)\n      ? data.feeMlpTrackerAnnualRewardsUsd.mul(BASIS_POINTS_DIVISOR).div(data.mlpSupplyUsd)\n      : bigNumberify(0);\n\n  data.mlpAprTotal = data.mlpAprForNativeToken.add(data.mlpAprForEsMyc);\n\n  data.totalMlpRewardsUsd = data.stakedMlpTrackerRewardsUsd.add(data.feeMlpTrackerRewardsUsd);\n\n  data.totalEsMycRewards = data.stakedMycTrackerRewards.add(data.stakedMlpTrackerRewards);\n  data.totalEsMycRewardsUsd = data.stakedMycTrackerRewardsUsd.add(data.stakedMlpTrackerRewardsUsd);\n\n  data.mycVesterRewards = vestingData.mycVester.claimable;\n  data.mlpVesterRewards = vestingData.mlpVester.claimable;\n  data.mlpVesterRewardsUsd = vestingData.mlpVester.claimable.mul(mycPrice).div(expandDecimals(1, 18));\n  data.totalVesterRewards = data.mycVesterRewards.add(data.mlpVesterRewards);\n  data.totalVesterRewardsUsd = data.totalVesterRewards.mul(mycPrice).div(expandDecimals(1, 18));\n  data.mlpVesterVestedAmountUsd = vestingData.mlpVesterVestedAmount.mul(mycPrice).div(expandDecimals(1, 18));\n\n  data.totalNativeTokenRewards = data.feeMycTrackerRewards.add(data.feeMlpTrackerRewards);\n  data.totalNativeTokenRewardsUsd = data.feeMycTrackerRewardsUsd.add(data.feeMlpTrackerRewardsUsd);\n\n  data.totalRewardsUsd = data.totalEsMycRewardsUsd.add(data.totalNativeTokenRewardsUsd).add(data.totalVesterRewardsUsd);\n\n  return data;\n}\n\nexport async function addTokenToMetamask(token) {\n  try {\n    const wasAdded = await window.ethereum.request({\n      method: \"wallet_watchAsset\",\n      params: {\n        type: \"ERC20\",\n        options: {\n          address: token.address,\n          symbol: token.symbol,\n          decimals: token.decimals,\n          image: token.imageUrl,\n        },\n      },\n    });\n    if (wasAdded) {\n      // https://github.com/MetaMask/metamask-extension/issues/11377\n      // We can show a toast message when the token is added to metamask but because of the bug we can't. Once the bug is fixed we can show a toast message.\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function sleep(ms) {\n  return new Promise((resolve) => resolve(), ms);\n}\n\nexport function getPageTitle(data) {\n  return `${data} | Perpetual Swaps`;\n}\n\nexport function isHashZero(value) {\n  return value === ethers.constants.HashZero;\n}\nexport function isAddressZero(value) {\n  return value === ethers.constants.AddressZero;\n}\n\nexport function useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n}\n\nexport function hasUserConsented() {\n  const consent = localStorage.getItem(\"consentAcknowledged\");\n  return consent && consent === \"true\";\n}\n\nexport function formatTitleCase(string, isLowerCase = false) {\n  return `${string[0].toUpperCase()}${isLowerCase ? string.slice(1).toLowerCase() : string.slice(1)}`;\n}\n\nexport const NETWORK_NAME = {\n  [ARBITRUM]: \"Arbitrum\",\n  [ARBITRUM_GOERLI]: \"Testnet\",\n};\n\nexport function getSpread(fromTokenInfo, toTokenInfo, isLong, nativeTokenAddress) {\n  if (fromTokenInfo && fromTokenInfo.maxPrice && toTokenInfo && toTokenInfo.minPrice) {\n    const fromDiff = fromTokenInfo.maxPrice.sub(fromTokenInfo.minPrice);\n    const fromSpread = fromDiff.mul(PRECISION).div(fromTokenInfo.maxPrice);\n    const toDiff = toTokenInfo.maxPrice.sub(toTokenInfo.minPrice);\n    const toSpread = toDiff.mul(PRECISION).div(toTokenInfo.maxPrice);\n\n    let value = fromSpread.add(toSpread);\n\n    const fromTokenAddress = fromTokenInfo.isNative ? nativeTokenAddress : fromTokenInfo.address;\n    const toTokenAddress = toTokenInfo.isNative ? nativeTokenAddress : toTokenInfo.address;\n\n    if (isLong && fromTokenAddress === toTokenAddress) {\n      value = fromSpread;\n    }\n\n    return {\n      value,\n      isHigh: value.gt(HIGH_SPREAD_THRESHOLD),\n    };\n  }\n}\n\nexport function getUserTokenBalances(infoTokens) {\n  let userBalances = {};\n  let tokenPrices = {};\n  let poolBalances = {};\n  Object.keys(infoTokens).forEach((token) => {\n    if (infoTokens[token]) {\n      const tokenName = formatTitleCase(infoTokens[token].symbol, true);\n      const balanceFieldName = `balance${tokenName}`;\n      const priceFieldName = `price${tokenName}`;\n      const poolBalanceFieldName = `poolBalance${tokenName}`;\n      userBalances[balanceFieldName] = parseFloat(\n        formatAmount(infoTokens[token].balance, infoTokens[token].decimals, infoTokens[token].decimals, false)\n      );\n      tokenPrices[priceFieldName] = parseFloat(formatAmount(infoTokens[token].maxPrice, USD_DECIMALS, 2, false));\n      poolBalances[poolBalanceFieldName] = parseFloat(\n        formatAmount(infoTokens[token].poolAmount, infoTokens[token].decimals, 2, false)\n      );\n    }\n  });\n  return [userBalances, tokenPrices, poolBalances];\n}\n\nexport function saveAccountToLocalStorage(address) {\n  const prevIdentifiedAccounts = window.localStorage.getItem(\"identifiedAddresses\");\n  if (!prevIdentifiedAccounts) {\n    // Create new localStorage variable to store imported accounts\n    localStorage.setItem(\"identifiedAddresses\", JSON.stringify([address]));\n  } else {\n    const parsedAccounts = JSON.parse(prevIdentifiedAccounts);\n    if (!parsedAccounts.includes(address)) {\n      parsedAccounts.push(address);\n    }\n    localStorage.setItem(\"identifiedAddresses\", JSON.stringify(parsedAccounts));\n  }\n}\n\nexport function getPreviousAccounts() {\n  const prevIdentifiedAccounts = window.localStorage.getItem(\"identifiedAddresses\");\n  if (prevIdentifiedAccounts) {\n    return JSON.parse(prevIdentifiedAccounts);\n  } else {\n    return [];\n  }\n}\n\nexport function setCurrentAccount(account) {\n  window.localStorage.setItem(\"walletAddress\", account);\n}\n\nexport function hasBeenIdentified(account) {\n  const prevIdentifiedAccounts = window.localStorage.getItem(\"identifiedAddresses\");\n  const formattedAddresses = JSON.parse(prevIdentifiedAccounts) || [];\n  return Boolean(formattedAddresses.includes(account));\n}\n\nexport function hasChangedAccount(account) {\n  const prevAccount = window.localStorage.getItem(\"walletAddress\");\n  return Boolean(prevAccount && prevAccount !== account);\n}\n\nexport function getUrlParameters(searchString) {\n  const queryString = searchString;\n  const urlParams = new URLSearchParams(queryString);\n  const keys = urlParams.keys();\n  const params = {};\n  for (const key of keys) params[key] = urlParams.get(key);\n  return params;\n}\n\nexport function getWindowFeatures() {\n  return {\n    screenHeight: window?.innerHeight || \"unknown\",\n    screenWidth: window?.innerWidth || \"unknown\",\n    screenDensity: window?.devicePixelRatio || \"unknown\",\n  };\n}\n\nconst defaultTruncateLength = 10;\n\nexport function truncateMiddleEthAddress(address, truncateLength) {\n  const strLength = truncateLength || defaultTruncateLength;\n  if (!isAddress(address)) {\n    console.warn(\"Calling toTruncatedMiddleEthAddress on a string not matching a valid Eth address format\");\n    return address;\n  }\n\n  if (strLength < 7) {\n    console.warn(\"Cannot truncate Eth address by desired amount. Returning original string.\");\n    return address;\n  }\n\n  const leadingCharsNum = strLength / 2 - 1;\n  const trailingCharsNum = strLength - leadingCharsNum - 3;\n\n  return `${address.slice(0, leadingCharsNum)}...${address.slice(-trailingCharsNum)}`;\n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\Addresses.js",["967"],"import { ARBITRUM_GOERLI } from \"./Helpers\";\n\nconst CONTRACTS = {\n  1: {\n    UniswapMycEthPool: \"0x66dD48889Df1Fc32cBa3aBfA2c453906d527eB2e\",\n\n    UniswapTcrEthPool: \"0x10b5c63a0a94ec3036238190bc88608a02e91e2c\",\n    SushiswapTcrEthPool: \"0xe55c3e83852429334a986b265d03b879a3d188ac\",\n\n    UniswapEthUsdcPool: \"0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640\",\n    BalancerVault: \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\",\n\n    TCR: \"0x0000000000000000000000000000000000000000\",\n    MYC: \"0x0000000000000000000000000000000000000000\",\n\n    WETH: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    USDC: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n  },\n\n  421613: {\n    // arbitrum goerli\n    Vault: \"0x21C577722EF0AdF247c600E7c21bfc25DDf20c99\",\n    Router: \"0xFaBa3f2F1A4cf35a07cfFeb2F7ACE3BcCc2d2973\",\n    VaultReader: \"0x6131e9d8dA3A30fFe0D5bA6c0149702218e2a2C1\",\n    Reader: \"0xD3E64F364f304fF21C06914Dc459C49fB77F0F1a\",\n    MlpManager: \"0x9ac416970c46AA156cfB8A558c7599633ff0A6a7\",\n    RewardRouter: \"0x8e256078AfAE075cF48cDBE4079b352262e9457c\",\n    RewardReader: \"0x4289375Fe05aA4D49b9132FE332669b3988F8de4\",\n\n    // https://github.com/OffchainLabs/arbitrum/blob/950c2f91b2e951cd3764394e0a73eac3797aecf3/packages/arb-ts/src/lib/networks.ts#L65\n    NATIVE_TOKEN: \"0x08466D6683d2A39E3597500c1F17b792555FCAB9\",\n    MLP: \"0x25C7873FC2B2FB0A5A5D6346ee8940dCCd6A88B8\",\n    TCR: \"0x428F127d29f45dbB05B99a5d3adeA8171A3Ec390\",\n    MYC: \"0x428F127d29f45dbB05B99a5d3adeA8171A3Ec390\",\n    ES_MYC: \"0xe2b9C2F3c8BD2b6Bc1E75b5650133be26Ca324Af\",\n    BN_MYC: \"0x6cb7A4b0360Cf1B54eE9140F8Da45726671E7fdb\",\n    USDG: \"0x52d1A1d053CF2132C9bF9989aaaaF7921f9011BE\",\n\n    StakedMycTracker: \"0x45E8f0770DD204388477CfA42315E883572E0DAA\",\n    BonusMycTracker: \"0xa8D1b5e8b09782d64d75cd1d55444a3AbEaD0821\",\n    FeeMycTracker: \"0x9e958AC42115a17C6d734D02c164e761daa2BC47\",\n    StakedMlpTracker: \"0xFCe0334D8dd8Ae6f6dEb2784a7a6e1Bd3Dc645A2\",\n    FeeMlpTracker: \"0xbdf67A0a70e4A5907559f4fA784b544365A2564F\",\n\n    StakedMycDistributor: \"0x92E6D5464A3B4070031df73e0782951bD1a16d8C\",\n    StakedMlpDistributor: \"0x74F067d10D4783937Ef7d9Dc6DeF27e7489e7802\",\n\n    MycVester: \"0x59A3640b4C8aCF9D6E6107e9Ba16d8B7d7cC412c\",\n    MlpVester: \"0xd3A37697c1B21DdE4F97636E294399e0fab9D235\",\n\n    OrderBook: \"0xB131725c12789064875c9ee126f83c96D771bD90\",\n    OrderExecutor: \"0x9B12CF1bC134a9eE01DC456fbb13a662C2dcf443\",\n    OrderBookReader: \"0xf2A0764144bEB244cD04356b5b2078E0ef682FF6\",\n    PositionRouter: \"0x2d78AE5147D358d803e6306D96db1AB995a4AAF1\",\n    PositionManager: \"0xb65B42c48DB28e13Cd490f72dDDEEe57eD2072f6\",\n\n    ReferralStorage: \"0x956BbBe040A2378B63C21011e3c71978d7B75a56\",\n    ReferralReader: \"0x27ec154C4D6e496027FBED863aC7a0186942Cc09\",\n\n    // TODO: Change these once deployed\n    FeeDistributor: \"0x057B99E0112A0D9fDA7503bDc8b6995fA2ff997D\",\n    FeeDistributorReader: \"0x55ce0A81b697f1eff846e8a56D3f303A5BE490b1\",\n  },\n  42161: {\n    // arbitrum mainnet\n    Vault: \"0xDfbA8AD57d2c62F61F0a60B2C508bCdeb182f855\",\n    Router: \"0x3cd2F02B9e39ccC781d0C07fc0286F654e53A76D\",\n    VaultReader: \"0x261f953172ed61155a3f18fF807139Abe8234196\",\n    Reader: \"0x77AE0F7128C6AC9f0efdb8A6F0Aabd5b979Ea80e\",\n    MlpManager: \"0x2DE28AB4827112Cd3F89E5353Ca5A8D80dB7018f\",\n    RewardRouter: \"0xd98d8e458F7aD22DD3C1d7A8B35C74005eb52b0b\",\n    RewardReader: \"0x676CF948e84560808EEfb7Af9D3a46e0d6A6F988\",\n    NATIVE_TOKEN: \"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\",\n    MLP: \"0x752b746426b6D0c3188bb530660374f92FD9cf7c\",\n    TCR: \"0xA72159FC390f0E3C6D415e658264c7c4051E9b87\",\n    MYC: \"0xc74fe4c715510ec2f8c61d70d397b32043f55abe\",\n    ES_MYC: \"0x7CEC785fba5ee648B48FBffc378d74C8671BB3cb\",\n    BN_MYC: \"0xb97f91bd8f7fb6ac761Fb84cB953e4F52f049486\",\n    USDG: \"0xe61a61B9Ce1Bd12e17a53AeeeE1005Ef6C1b2E80\",\n    StakedMycTracker: \"0x2BC8E28f5d41a4b112BC62EB7Db1B757c85f37Ff\",\n    BonusMycTracker: \"0xbF86a15fa2604dbA2ad7E843c589FAAAd78bF318\",\n    FeeMycTracker: \"0x0cA0147c21F9DB9D4627e6a996342A11D25972C5\",\n    StakedMlpTracker: \"0xF7Bd2ed13BEf9C27a2188f541Dc5ED85C5325306\",\n    FeeMlpTracker: \"0xF0BFB95087E611897096982c33B6934C8aBfA083\",\n\n    StakedMycDistributor: \"0x3169b5719B8a7b40580965E8557379Fe15209aAD\",\n    StakedMlpDistributor: \"0xB000f7dF69d74a1F3b3cdb8ddEB3317a0823af2b\",\n\n    MycVester: \"0x67fF0614F6E4E04362B3b919Adc7371884895Ae8\",\n    MlpVester: \"0xCB6ac1EacF498118f4609462c0979fFB3eBD1821\",\n\n    OrderBook: \"0x74F28832cA4337bFC6035400eAB80AFD61cdf35b\",\n    // OrderBookV1: \"0x2EeEf7852a306a580acF94F7c18C3FF124A59d4f\",\n    OrderExecutor: \"0xC4e695a2ae9fd060E24Cdb87874b684dB7447a18\",\n    OrderBookReader: \"0x1044345924277FD2e9bdF14Edad8C1d1a67a4B8e\",\n\n    PositionRouter: \"0xE510571cAc76279DADf6c4b6eAcE5370F86e3dC2\",\n    PositionManager: \"0x3892b8cF646b17709C91E653319bA5504a5FEafe\",\n\n    UniswapMycTcrPool: \"0xc9f423c406e690b7f7715f9e048489caafb2266b\",\n    // TODO this uniswap pool has low liquidity so cant use for pricing\n    UniswapMycEthPool: \"0x6a034ac28064ffa8375e4668f4ecebdf3aafcba0\",\n    UniswapTcrEthPool: \"0xe8bfb2918853576f0965e29bb86001ea93019003\",\n\n    BalancerVault: \"0xBA12222222228d8Ba445958a75a0704d566BF2C8\",\n\n    ReferralStorage: \"0x3Cd316df040f8A76eb2b496B92b358d3b2EFB9F5\",\n    ReferralReader: \"0xb220724b6b68a84392eC22e841eDe5519863A21F\",\n\n    FeeDistributor: \"0xc136c6a977af230B4F288dCE7f9432b0e91e4657\",\n    FeeDistributorReader: \"0xe6d60D6A7d39d9435403e0993890D6B50B4B03BC\",\n\n    LentMYC: \"0x9B225FF56C48671d4D04786De068Ed8b88b672d6\",\n  },\n};\n\nexport function getContract(chainId, name) {\n  if (!CONTRACTS[chainId]) {\n    throw new Error(`Unknown chainId ${chainId}`);\n  }\n  if (!CONTRACTS[chainId][name]) {\n    throw new Error(`Unknown contract \"${name}\" for chainId ${chainId}`);\n  }\n  return CONTRACTS[chainId][name];\n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\data\\Tokens.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Stake\\StakeV2.js",["968","969","970","971","972","973","974","975","976","977"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport Modal from \"../../components/Modal/Modal\";\nimport Tooltip from \"../../components/Tooltip/Tooltip\";\n\nimport Vault from \"../../abis/Vault.json\";\nimport ReaderV2 from \"../../abis/ReaderV2.json\";\nimport Vester from \"../../abis/Vester.json\";\nimport RewardRouter from \"../../abis/RewardRouter.json\";\nimport RewardReader from \"../../abis/RewardReader.json\";\nimport Token from \"../../abis/Token.json\";\nimport MlpManager from \"../../abis/MlpManager.json\";\n\nimport { ethers } from \"ethers\";\nimport {\n  helperToast,\n  bigNumberify,\n  fetcher,\n  formatAmount,\n  formatKeyAmount,\n  formatAmountFree,\n  getChainName,\n  parseValue,\n  approveTokens,\n  useLocalStorageSerializeKey,\n  useChainId,\n  MLP_DECIMALS,\n  USD_DECIMALS,\n  ARBITRUM,\n  PLACEHOLDER_ACCOUNT,\n  getBalanceAndSupplyData,\n  getDepositBalanceData,\n  getVestingData,\n  getStakingData,\n  getProcessedData,\n  getPageTitle,\n} from \"../../Helpers\";\nimport {\n  callContract,\n  useMYCPrice,\n  useStakingApr,\n  useTotalMYCSupply,\n} from \"../../Api\";\nimport { getConstant } from \"../../Constants\";\n\nimport useSWR from \"swr\";\n\nimport { getContract } from \"../../Addresses\";\n\nimport mlp40Icon from \"../../img/ic_mlp_40.svg\";\nimport myc40Icon from \"../../img/ic_myc_40.svg\";\nimport * as StakeV2Styled from \"./StakeV2Styles\";\n\nimport \"./StakeV2.css\";\n\nimport SEO from \"../../components/Common/SEO\";\nimport ClaimModal from \"./ClaimModal\";\nimport Toggle from \"../../components/Toggle/Toggle\";\nimport MlpPriceChart from \"./MlpPriceChart\";\n\nfunction CompoundModal(props) {\n  const {\n    isVisible,\n    setIsVisible,\n    rewardRouterAddress,\n    active,\n    account,\n    library,\n    chainId,\n    setPendingTxns,\n    totalVesterRewards,\n    nativeTokenSymbol,\n    wrappedTokenSymbol,\n    processedData,\n    vesterAddress,\n    stakedMlpTrackerAddress,\n    esMycAddress,\n  } = props;\n  const [isCompounding, setIsCompounding] = useState(false);\n  const [isDepositing, setIsDepositing] = useState(false);\n\n  const [shouldClaimMyc, setShouldClaimMyc] = useLocalStorageSerializeKey(\n    [chainId, \"StakeV2-compound-should-claim-myc\"],\n    true\n  );\n\n  const [shouldClaimEsMyc, setShouldClaimEsMyc] = useLocalStorageSerializeKey(\n    [chainId, \"StakeV2-compound-should-claim-esMyc\"],\n    true\n  );\n\n  const [shouldBuyMlpWithEth, setShouldBuyMlpWithEth] = useLocalStorageSerializeKey(\n    [chainId, \"StakeV2-compound-should-buy-mlp\"],\n    true\n  );\n\n  const mycAddress = getContract(chainId, \"MYC\");\n  const [isApproving, setIsApproving] = useState(false);\n\n  const { data: tokenAllowance } = useSWR(\n    active && [active, chainId, mycAddress, \"allowance\", account, stakedMlpTrackerAddress],\n    {\n      fetcher: fetcher(library, Token),\n    }\n  );\n\n  const needApproval = tokenAllowance && totalVesterRewards && totalVesterRewards.gt(tokenAllowance);\n\n  const isPrimaryEnabled = () => {\n    return !isCompounding && !isApproving && !isCompounding && !isDepositing;\n  };\n\n  const getPrimaryText = () => {\n    if (isApproving) {\n      return `Approving MYC...`;\n    }\n    if (needApproval) {\n      return `Approve MYC`;\n    }\n    if (isCompounding) {\n      return \"Compounding...\";\n    }\n    if (isDepositing) {\n      return \"Depositing...\";\n    }\n    return \"Compound\";\n  };\n\n  const onClickPrimary = () => {\n    if (needApproval) {\n      approveTokens({\n        setIsApproving,\n        library,\n        tokenAddress: mycAddress,\n        spender: stakedMlpTrackerAddress,\n        chainId,\n      });\n      return;\n    }\n\n    setIsCompounding(true);\n\n    const contract = new ethers.Contract(rewardRouterAddress, RewardRouter.abi, library.getSigner());\n    callContract(\n      chainId,\n      contract,\n      \"handleRewards\",\n      [\n        shouldClaimMyc, // shouldClaimMyc,\n        false, // shouldStakeMYC,\n        shouldClaimEsMyc, // shouldClaimEsMyc,\n        false, // shouldStakeEsMyc,\n        false, // shouldStakeMultiplierPoints,\n        shouldBuyMlpWithEth, // shouldClaimWeth,\n        false, // shouldConvertWeth,\n        shouldBuyMlpWithEth, // shouldBuyMlpWithEth\n      ],\n      {\n        sentMsg: \"Compound submitted!\",\n        failMsg: \"Compound failed.\",\n        successMsg: \"Compound completed!\",\n        setPendingTxns,\n      }\n    )\n      .then(async (res) => {\n        if (shouldClaimEsMyc) {\n          await res.wait();\n          depositEsMyc();\n        } else {\n          setIsVisible(false);\n        }\n      })\n      .finally(() => {\n        setIsCompounding(false);\n      });\n  };\n\n  const depositEsMyc = async () => {\n    setIsDepositing(true);\n    const contract = new ethers.Contract(vesterAddress, Vester.abi, library.getSigner());\n    const esMyc = new ethers.Contract(esMycAddress, Token.abi, library.getSigner());\n    const balance = await esMyc.balanceOf(account);\n\n    callContract(chainId, contract, \"deposit\", [balance], {\n      sentMsg: \"Deposit submitted!\",\n      failMsg: \"Deposit failed!\",\n      successMsg: \"Deposited!\",\n      setPendingTxns,\n    })\n      .then(async (res) => {\n        setIsVisible(false);\n      })\n      .finally(() => {\n        setIsDepositing(false);\n      });\n  };\n\n  return (\n    <div className=\"StakeModal\">\n      <Modal isVisible={isVisible} setIsVisible={setIsVisible} label=\"Compound Rewards\">\n        <div className=\"CompoundModal-menu\">\n          <StakeV2Styled.ModalRow>\n            <StakeV2Styled.ModalRowHeader>Claim Vested MYC</StakeV2Styled.ModalRowHeader>\n            {shouldClaimMyc && (\n              <>\n                <StakeV2Styled.ModalRowText large inline>\n                  {formatKeyAmount(processedData, \"mlpVesterRewards\", 18, 4)} MYC\n                </StakeV2Styled.ModalRowText>{\" \"}\n                <StakeV2Styled.ModalRowText inline secondary>\n                  (${formatKeyAmount(processedData, \"mlpVesterRewardsUsd\", USD_DECIMALS, 4)})\n                </StakeV2Styled.ModalRowText>\n              </>\n            )}\n            <Toggle isChecked={shouldClaimMyc} handleToggle={setShouldClaimMyc} />\n          </StakeV2Styled.ModalRow>\n          <StakeV2Styled.ModalRow>\n            <StakeV2Styled.ModalRowHeader>Claim and vest esMYC Rewards</StakeV2Styled.ModalRowHeader>\n            {shouldClaimEsMyc && (\n              <>\n                <StakeV2Styled.ModalRowText inline large>\n                  {formatKeyAmount(processedData, \"stakedMlpTrackerRewards\", 18, 4)} esMYC\n                </StakeV2Styled.ModalRowText>{\" \"}\n                <StakeV2Styled.ModalRowText inline secondary>\n                  ($\n                  {formatKeyAmount(processedData, \"stakedMlpTrackerRewardsUsd\", USD_DECIMALS, 2, true)})\n                </StakeV2Styled.ModalRowText>\n              </>\n            )}\n            <Toggle isChecked={shouldClaimEsMyc} handleToggle={setShouldClaimEsMyc} />\n          </StakeV2Styled.ModalRow>\n          <StakeV2Styled.ModalRow>\n            <StakeV2Styled.ModalRowHeader>Buy MLP with {wrappedTokenSymbol} Rewards</StakeV2Styled.ModalRowHeader>\n            {shouldBuyMlpWithEth && (\n              <>\n                <StakeV2Styled.ModalRowText large inline>\n                  {formatKeyAmount(processedData, \"feeMlpTrackerRewards\", 18, 4)} {nativeTokenSymbol} (\n                  {wrappedTokenSymbol})\n                </StakeV2Styled.ModalRowText>{\" \"}\n                <StakeV2Styled.ModalRowText inline secondary>\n                  ($\n                  {formatKeyAmount(processedData, \"feeMlpTrackerRewardsUsd\", USD_DECIMALS, 2, true)})\n                </StakeV2Styled.ModalRowText>\n              </>\n            )}\n            <Toggle isChecked={shouldBuyMlpWithEth} handleToggle={setShouldBuyMlpWithEth} />\n          </StakeV2Styled.ModalRow>\n        </div>\n        <div className=\"Exchange-swap-button-container\">\n          <button className=\"App-cta Exchange-swap-button\" onClick={onClickPrimary} disabled={!isPrimaryEnabled()}>\n            {getPrimaryText()}\n          </button>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nfunction VesterDepositModal(props) {\n  const {\n    isVisible,\n    setIsVisible,\n    chainId,\n    title,\n    maxAmount,\n    value,\n    setValue,\n    balance,\n    vestedAmount,\n    maxVestableAmount,\n    vesterAddress,\n    setPendingTxns,\n  } = props;\n  const [isDepositing, setIsDepositing] = useState(false);\n  const { library, account } = useWeb3React();\n\n  const { data: ethBalance } = useSWR([library, \"getBalance\", account, \"latest\"], {\n    fetcher: (library, method, ...params) => library[method](...params),\n  });\n\n  let amount = parseValue(value, 18);\n\n  let nextDepositAmount = vestedAmount;\n  if (amount) {\n    nextDepositAmount = vestedAmount.add(amount);\n  }\n\n  const getError = () => {\n    if (ethBalance?.eq(0)) {\n      return [\"Not enough ETH for gas\"];\n    }\n\n    if (!amount || amount.eq(0)) {\n      return \"Enter an amount\";\n    }\n    if (maxAmount && amount.gt(maxAmount)) {\n      return \"Max amount exceeded\";\n    }\n  };\n\n  const onClickPrimary = () => {\n    setIsDepositing(true);\n    const contract = new ethers.Contract(vesterAddress, Vester.abi, library.getSigner());\n\n    callContract(chainId, contract, \"deposit\", [amount], {\n      sentMsg: \"Deposit submitted!\",\n      failMsg: \"Deposit failed!\",\n      successMsg: \"Deposited!\",\n      setPendingTxns,\n    })\n      .then(async (res) => {\n        setIsVisible(false);\n      })\n      .finally(() => {\n        setIsDepositing(false);\n      });\n  };\n\n  const isPrimaryEnabled = () => {\n    const error = getError();\n    if (error) {\n      return false;\n    }\n    if (isDepositing) {\n      return false;\n    }\n    return true;\n  };\n\n  const getPrimaryText = () => {\n    const error = getError();\n    if (error) {\n      return error;\n    }\n    if (isDepositing) {\n      return \"Depositing...\";\n    }\n    return \"Deposit\";\n  };\n\n  return (\n    <>\n      <SEO\n        title={getPageTitle(\"Earn\")}\n        description=\"Claim fees and liquidity mining rewards earned via providing liquidity to the Mycelium Perpetual Swap liquidity pool.\"\n      />\n      <div className=\"StakeModal\">\n        <Modal isVisible={isVisible} setIsVisible={setIsVisible} label={title} className=\"non-scrollable\">\n          <div className=\"Exchange-swap-section\">\n            <div className=\"Exchange-swap-section-top\">\n              <div className=\"muted\">\n                <div className=\"Exchange-swap-usd\">Deposit</div>\n              </div>\n              <div\n                className=\"muted align-right clickable\"\n                onClick={() => setValue(formatAmountFree(maxAmount, 18, 18))}\n              >\n                Max: {formatAmount(maxAmount, 18, 4, true)}\n              </div>\n            </div>\n            <div className=\"Exchange-swap-section-bottom\">\n              <div>\n                <input\n                  type=\"number\"\n                  placeholder=\"0.0\"\n                  className=\"Exchange-swap-input\"\n                  value={value}\n                  onChange={(e) => setValue(e.target.value)}\n                />\n              </div>\n              <div className=\"PositionEditor-token-symbol\">esMYC</div>\n            </div>\n          </div>\n          <div className=\"VesterDepositModal-info-rows\">\n            <div className=\"Exchange-info-row\">\n              <div className=\"Exchange-info-label\">Wallet</div>\n              <div className=\"align-right\">{formatAmount(balance, 18, 2, true)} esMYC</div>\n            </div>\n            <div className=\"Exchange-info-row\">\n              <div className=\"Exchange-info-label\">Vault Capacity</div>\n              <div className=\"align-right\">\n                <Tooltip\n                  handle={`${formatAmount(nextDepositAmount, 18, 2, true)} / ${formatAmount(\n                    maxVestableAmount,\n                    18,\n                    2,\n                    true\n                  )}`}\n                  position=\"right-bottom\"\n                  renderContent={() => {\n                    return (\n                      <>\n                        Vault Capacity for your Account\n                        <br />\n                        <br />\n                        Deposited: {formatAmount(vestedAmount, 18, 2, true)} esMYC\n                        <br />\n                        Max Capacity: {formatAmount(maxVestableAmount, 18, 2, true)} esMYC\n                        <br />\n                      </>\n                    );\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"Exchange-swap-button-container\">\n            <button className=\"App-cta Exchange-swap-button\" onClick={onClickPrimary} disabled={!isPrimaryEnabled()}>\n              {getPrimaryText()}\n            </button>\n          </div>\n        </Modal>\n      </div>\n    </>\n  );\n}\n\nfunction VesterWithdrawModal(props) {\n  const { isVisible, setIsVisible, chainId, title, library, vesterAddress, setPendingTxns } = props;\n  const [isWithdrawing, setIsWithdrawing] = useState(false);\n\n  const onClickPrimary = () => {\n    setIsWithdrawing(true);\n    const contract = new ethers.Contract(vesterAddress, Vester.abi, library.getSigner());\n\n    callContract(chainId, contract, \"withdraw\", [], {\n      sentMsg: \"Withdraw submitted.\",\n      failMsg: \"Withdraw failed.\",\n      successMsg: \"Withdrawn!\",\n      setPendingTxns,\n    })\n      .then(async (res) => {\n        setIsVisible(false);\n      })\n      .finally(() => {\n        setIsWithdrawing(false);\n      });\n  };\n\n  return (\n    <div className=\"StakeModal\">\n      <Modal isVisible={isVisible} setIsVisible={setIsVisible} label={title}>\n        <div>\n          This will withdraw and unreserve all tokens as well as pause vesting.\n          <br />\n          <br />\n          esMYC tokens that have been converted to MYC will remain as MYC tokens.\n          <br />\n          <br />\n          To claim MYC tokens without withdrawing, use the \"Claim\" button under the Total Rewards section.\n          <br />\n          <br />\n        </div>\n        <div className=\"Exchange-swap-button-container\">\n          <button className=\"App-cta Exchange-swap-button\" onClick={onClickPrimary} disabled={isWithdrawing}>\n            {!isWithdrawing && \"Confirm Withdraw\"}\n            {isWithdrawing && \"Confirming...\"}\n          </button>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nexport default function StakeV2({\n  setPendingTxns,\n  connectWallet,\n  trackAction,\n  savedSlippageAmount,\n  infoTokens,\n  trackPageWithTraits,\n  analytics,\n}) {\n  const { active, library, account } = useWeb3React();\n  const { chainId } = useChainId();\n\n  const chainName = getChainName(chainId);\n\n  const [isVesterDepositModalVisible, setIsVesterDepositModalVisible] = useState(false);\n  const [vesterDepositTitle, setVesterDepositTitle] = useState(\"\");\n  const [vesterDepositStakeTokenLabel, setVesterDepositStakeTokenLabel] = useState(\"\");\n  const [vesterDepositMaxAmount, setVesterDepositMaxAmount] = useState(\"\");\n  const [vesterDepositBalance, setVesterDepositBalance] = useState(\"\");\n  const [vesterDepositEscrowedBalance, setVesterDepositEscrowedBalance] = useState(\"\");\n  const [vesterDepositVestedAmount, setVesterDepositVestedAmount] = useState(\"\");\n  const [vesterDepositAverageStakedAmount, setVesterDepositAverageStakedAmount] = useState(\"\");\n  const [vesterDepositMaxVestableAmount, setVesterDepositMaxVestableAmount] = useState(\"\");\n  const [vesterDepositValue, setVesterDepositValue] = useState(\"\");\n  const [vesterDepositReserveAmount, setVesterDepositReserveAmount] = useState(\"\");\n  const [vesterDepositMaxReserveAmount, setVesterDepositMaxReserveAmount] = useState(\"\");\n  const [vesterDepositAddress, setVesterDepositAddress] = useState(\"\");\n\n  const [isVesterWithdrawModalVisible, setIsVesterWithdrawModalVisible] = useState(false);\n  const [vesterWithdrawTitle, setVesterWithdrawTitle] = useState(false);\n  const [vesterWithdrawAddress, setVesterWithdrawAddress] = useState(\"\");\n\n  const [isCompoundModalVisible, setIsCompoundModalVisible] = useState(false);\n  const [isClaimModalVisible, setIsClaimModalVisible] = useState(false);\n\n  const rewardRouterAddress = getContract(chainId, \"RewardRouter\");\n  const rewardReaderAddress = getContract(chainId, \"RewardReader\");\n  const readerAddress = getContract(chainId, \"Reader\");\n\n  const vaultAddress = getContract(chainId, \"Vault\");\n  const nativeTokenAddress = getContract(chainId, \"NATIVE_TOKEN\");\n  const mycAddress = getContract(chainId, \"MYC\");\n  const esMycAddress = getContract(chainId, \"ES_MYC\");\n  const bnMycAddress = getContract(chainId, \"BN_MYC\");\n  const mlpAddress = getContract(chainId, \"MLP\");\n\n  const stakedMycTrackerAddress = getContract(chainId, \"StakedMycTracker\");\n  const bonusMycTrackerAddress = getContract(chainId, \"BonusMycTracker\");\n  const feeMycTrackerAddress = getContract(chainId, \"FeeMycTracker\");\n\n  const stakedMlpTrackerAddress = getContract(chainId, \"StakedMlpTracker\");\n  const feeMlpTrackerAddress = getContract(chainId, \"FeeMlpTracker\");\n\n  const mlpManagerAddress = getContract(chainId, \"MlpManager\");\n\n  const mycVesterAddress = getContract(chainId, \"MycVester\");\n  const mlpVesterAddress = getContract(chainId, \"MlpVester\");\n\n  const vesterAddresses = [mycVesterAddress, mlpVesterAddress];\n\n  const nativeTokenSymbol = getConstant(chainId, \"nativeTokenSymbol\");\n  const wrappedTokenSymbol = getConstant(chainId, \"wrappedTokenSymbol\");\n\n  const walletTokens = [mycAddress, esMycAddress, mlpAddress, stakedMycTrackerAddress];\n  const depositTokens = [\n    mycAddress,\n    esMycAddress,\n    stakedMycTrackerAddress,\n    bonusMycTrackerAddress,\n    bnMycAddress,\n    mlpAddress,\n  ];\n  const rewardTrackersForDepositBalances = [\n    stakedMycTrackerAddress,\n    stakedMycTrackerAddress,\n    bonusMycTrackerAddress,\n    feeMycTrackerAddress,\n    feeMycTrackerAddress,\n    feeMlpTrackerAddress,\n  ];\n  const rewardTrackersForStakingInfo = [\n    stakedMycTrackerAddress,\n    bonusMycTrackerAddress,\n    feeMycTrackerAddress,\n    stakedMlpTrackerAddress,\n    feeMlpTrackerAddress,\n  ];\n\n  const { data: walletBalances } = useSWR(\n    [\n      `StakeV2:walletBalances:${active}`,\n      chainId,\n      readerAddress,\n      \"getTokenBalancesWithSupplies\",\n      account || PLACEHOLDER_ACCOUNT,\n    ],\n    {\n      fetcher: fetcher(library, ReaderV2, [walletTokens]),\n    }\n  );\n\n  const { data: depositBalances } = useSWR(\n    [\n      `StakeV2:depositBalances:${active}`,\n      chainId,\n      rewardReaderAddress,\n      \"getDepositBalances\",\n      account || PLACEHOLDER_ACCOUNT,\n    ],\n    {\n      fetcher: fetcher(library, RewardReader, [depositTokens, rewardTrackersForDepositBalances]),\n    }\n  );\n\n  const { data: stakingInfo } = useSWR(\n    [`StakeV2:stakingInfo:${active}`, chainId, rewardReaderAddress, \"getStakingInfo\", account || PLACEHOLDER_ACCOUNT],\n    {\n      fetcher: fetcher(library, RewardReader, [rewardTrackersForStakingInfo]),\n    }\n  );\n\n  const { data: stakedMycSupply } = useSWR(\n    [`StakeV2:stakedMycSupply:${active}`, chainId, mycAddress, \"balanceOf\", stakedMycTrackerAddress],\n    {\n      fetcher: fetcher(library, Token),\n    }\n  );\n\n  const { data: aums } = useSWR([`StakeV2:getAums:${active}`, chainId, mlpManagerAddress, \"getAums\"], {\n    fetcher: fetcher(library, MlpManager),\n  });\n\n  const { data: nativeTokenPrice } = useSWR(\n    [`StakeV2:nativeTokenPrice:${active}`, chainId, vaultAddress, \"getMinPrice\", nativeTokenAddress],\n    {\n      fetcher: fetcher(library, Vault),\n    }\n  );\n\n  const { data: vestingInfo } = useSWR(\n    [`StakeV2:vestingInfo:${active}`, chainId, readerAddress, \"getVestingInfo\", account || PLACEHOLDER_ACCOUNT],\n    {\n      fetcher: fetcher(library, ReaderV2, [vesterAddresses]),\n    }\n  );\n\n  const { data: ethBalance } = useSWR([library, \"getBalance\", account, \"latest\"], {\n    fetcher: (library, method, ...params) => library[method](...params),\n  });\n\n  const { mycPrice } = useMYCPrice(chainId, { arbitrum: chainId === ARBITRUM ? library : undefined }, active);\n\n  const { total: mycSupply } = useTotalMYCSupply();\n\n  let aum;\n  if (aums && aums.length > 0) {\n    aum = aums[0].add(aums[1]).div(2);\n  }\n\n  const { balanceData, supplyData } = getBalanceAndSupplyData(walletBalances);\n  const depositBalanceData = getDepositBalanceData(depositBalances);\n  const stakingData = getStakingData(stakingInfo);\n  const vestingData = getVestingData(vestingInfo);\n\n  const processedData = getProcessedData(\n    balanceData,\n    supplyData,\n    depositBalanceData,\n    stakingData,\n    vestingData,\n    aum,\n    nativeTokenPrice,\n    stakedMycSupply,\n    mycPrice,\n    mycSupply\n  );\n\n  const stakingApr = useStakingApr(mycPrice, nativeTokenPrice);\n\n  let totalRewardTokens;\n  if (processedData && processedData.bnMycInFeeMyc && processedData.bonusMycInFeeMyc) {\n    totalRewardTokens = processedData.bnMycInFeeMyc.add(processedData.bonusMycInFeeMyc);\n  }\n\n  let totalRewardTokensAndMlp;\n  if (totalRewardTokens && processedData && processedData.mlpBalance) {\n    totalRewardTokensAndMlp = totalRewardTokens.add(processedData.mlpBalance);\n  }\n\n  let earnMsg;\n  if (totalRewardTokensAndMlp && totalRewardTokensAndMlp.gt(0)) {\n    earnMsg = (\n      <div>\n        You are earning {nativeTokenSymbol} rewards with{\" \"}\n        {formatKeyAmount(processedData, \"mlpBalance\", MLP_DECIMALS, 2, true)} MLP tokens.\n      </div>\n    );\n  }\n\n  const showMlpCompoundModal = () => {\n    if (ethBalance?.eq(0)) {\n      helperToast.error(\"You don't have any ETH to pay for gas\");\n    } else {\n      setIsCompoundModalVisible(true);\n    }\n  };\n\n  const showMlpClaimModal = () => {\n    if (ethBalance?.eq(0)) {\n      helperToast.error(\"You don't have any ETH to pay for gas\");\n    } else {\n      setIsClaimModalVisible(true);\n    }\n  };\n\n  const showMycVesterDepositModal = () => {\n    if (ethBalance?.eq(0)) {\n      helperToast.error(\"You don't have any ETH to pay for gas\");\n      return;\n    } else if (!vestingData) {\n      helperToast.error(\"Loading vesting data, please wait.\");\n      return;\n    }\n    // let remainingVestableAmount = vestingData.mlpVester.maxVestableAmount.sub(vestingData.mlpVester.vestedAmount);\n    // if (processedData.esMycBalance.lt(remainingVestableAmount)) {\n    // }\n    let remainingVestableAmount = processedData.esMycBalance;\n    let maxVestableAmount = bigNumberify(remainingVestableAmount).add(vestingData.mlpVesterVestedAmount);\n\n    setIsVesterDepositModalVisible(true);\n    setVesterDepositTitle(\"esMYC Vault\");\n    setVesterDepositStakeTokenLabel(\"staked MYC + esMYC + Multiplier Points\");\n    setVesterDepositMaxAmount(remainingVestableAmount);\n    setVesterDepositBalance(processedData.esMycBalance);\n    setVesterDepositEscrowedBalance(vestingData.mlpVester.escrowedBalance);\n    setVesterDepositVestedAmount(vestingData.mlpVester.vestedAmount);\n    setVesterDepositMaxVestableAmount(maxVestableAmount);\n    setVesterDepositAverageStakedAmount(vestingData.mlpVester.averageStakedAmount);\n    setVesterDepositReserveAmount(vestingData.mlpVester.pairAmount);\n    setVesterDepositMaxReserveAmount(totalRewardTokens);\n    setVesterDepositValue(\"\");\n    setVesterDepositAddress(mlpVesterAddress);\n  };\n\n  const showMycVesterWithdrawModal = () => {\n    if (ethBalance?.eq(0)) {\n      helperToast.error(\"You don't have any ETH to pay for gas\");\n      return;\n    } else if (!vestingData || !vestingData.mlpVesterVestedAmount || vestingData.mlpVesterVestedAmount.eq(0)) {\n      helperToast.error(\"You have not deposited any tokens for vesting.\");\n      return;\n    }\n\n    setIsVesterWithdrawModalVisible(true);\n    setVesterWithdrawTitle(\"Withdraw from esMYC Vault\");\n    setVesterWithdrawAddress(mlpVesterAddress);\n  };\n\n  return (\n    <div className=\"StakeV2 Page page-layout default-container\">\n      <VesterDepositModal\n        isVisible={isVesterDepositModalVisible}\n        setIsVisible={setIsVesterDepositModalVisible}\n        chainId={chainId}\n        title={vesterDepositTitle}\n        stakeTokenLabel={vesterDepositStakeTokenLabel}\n        maxAmount={vesterDepositMaxAmount}\n        balance={vesterDepositBalance}\n        escrowedBalance={vesterDepositEscrowedBalance}\n        vestedAmount={vesterDepositVestedAmount}\n        averageStakedAmount={vesterDepositAverageStakedAmount}\n        maxVestableAmount={vesterDepositMaxVestableAmount}\n        reserveAmount={vesterDepositReserveAmount}\n        maxReserveAmount={vesterDepositMaxReserveAmount}\n        value={vesterDepositValue}\n        setValue={setVesterDepositValue}\n        vesterAddress={vesterDepositAddress}\n        setPendingTxns={setPendingTxns}\n      />\n      <VesterWithdrawModal\n        isVisible={isVesterWithdrawModalVisible}\n        setIsVisible={setIsVesterWithdrawModalVisible}\n        vesterAddress={vesterWithdrawAddress}\n        chainId={chainId}\n        title={vesterWithdrawTitle}\n        library={library}\n        setPendingTxns={setPendingTxns}\n      />\n      <CompoundModal\n        active={active}\n        account={account}\n        setPendingTxns={setPendingTxns}\n        isVisible={isCompoundModalVisible}\n        setIsVisible={setIsCompoundModalVisible}\n        rewardRouterAddress={rewardRouterAddress}\n        totalVesterRewards={processedData.totalVesterRewards}\n        wrappedTokenSymbol={wrappedTokenSymbol}\n        nativeTokenSymbol={nativeTokenSymbol}\n        library={library}\n        chainId={chainId}\n        processedData={processedData}\n        vesterAddress={mlpVesterAddress}\n        stakedMlpTrackerAddress={stakedMlpTrackerAddress}\n        esMycAddress={esMycAddress}\n      />\n      <ClaimModal\n        active={active}\n        setPendingTxns={setPendingTxns}\n        connectWallet={connectWallet}\n        library={library}\n        chainId={chainId}\n        isVisible={isClaimModalVisible}\n        setIsVisible={setIsClaimModalVisible}\n        rewardRouterAddress={rewardRouterAddress}\n        wrappedTokenSymbol={wrappedTokenSymbol}\n        nativeTokenSymbol={nativeTokenSymbol}\n        processedData={processedData}\n      />\n\n      <StakeV2Styled.StakeV2Content className=\"StakeV2-content\">\n        <StakeV2Styled.StakeV2Cards className=\"StakeV2-cards\">\n          <StakeV2Styled.StakeV2Card>\n            <div className=\"Page-title-section\">\n              <div className=\"Page-title\">Stake and Earn || Coming Soon</div>\n              <div className=\"Page-description\">\n                Stake your $ARBX and earn rewards.\n                \n              </div>\n              {earnMsg && <div className=\"Page-description\">{earnMsg}</div>}\n            </div>\n            \n            \n          </StakeV2Styled.StakeV2Card>\n        </StakeV2Styled.StakeV2Cards>\n      </StakeV2Styled.StakeV2Content>\n    </div>\n  );\n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Dashboard\\DashboardV2.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Actions\\Actions.js",["978","979","980"],"import React from \"react\";\nimport useSWR from \"swr\";\nimport { ethers } from \"ethers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useParams } from \"react-router-dom\";\n\nimport \"./Actions.css\";\n\nimport { getContract } from \"../../Addresses\";\nimport { formatAmount, fetcher, getTokenInfo, useChainId, useAccountOrders } from \"../../Helpers\";\n\nimport { useInfoTokens } from \"../../hooks/useInfoTokens\";\nimport { getToken, getTokens, getWhitelistedTokens } from \"../../data/Tokens\";\nimport { getPositions, getPositionQuery } from \"../Exchange/Exchange\";\n\nimport PositionsList from \"../../components/Exchange/PositionsList\";\nimport OrdersList from \"../../components/Exchange/OrdersList\";\n\nimport TradeHistory from \"../../components/Exchange/TradeHistory\";\nimport Reader from \"../../abis/Reader.json\";\n\nconst USD_DECIMALS = 30;\n\nexport default function Actions(props) {\n  const { trackAction } = props;\n  const { account } = useParams();\n  const { active, library } = useWeb3React();\n\n  const { chainId } = useChainId();\n  const nativeTokenAddress = getContract(chainId, \"NATIVE_TOKEN\");\n  const vaultAddress = getContract(chainId, \"Vault\");\n  const readerAddress = getContract(chainId, \"Reader\");\n\n  let checkSummedAccount = \"\";\n  if (ethers.utils.isAddress(account)) {\n    checkSummedAccount = ethers.utils.getAddress(account);\n  }\n\n  const tokens = getTokens(chainId);\n  const whitelistedTokens = getWhitelistedTokens(chainId);\n  const positionQuery = getPositionQuery(whitelistedTokens, nativeTokenAddress);\n\n  const whitelistedTokenAddresses = whitelistedTokens.map((token) => token.address);\n  const tokenAddresses = tokens.map((token) => token.address);\n  const { data: tokenBalances } = useSWR([active, chainId, readerAddress, \"getTokenBalances\", account], {\n    fetcher: fetcher(library, Reader, [tokenAddresses]),\n  });\n\n  const { data: positionData } = useSWR([active, chainId, readerAddress, \"getPositions\", vaultAddress, account], {\n    fetcher: fetcher(library, Reader, [\n      positionQuery.collateralTokens,\n      positionQuery.indexTokens,\n      positionQuery.isLong,\n    ]),\n  });\n\n  const { data: fundingRateInfo } = useSWR([active, chainId, readerAddress, \"getFundingRates\"], {\n    fetcher: fetcher(library, Reader, [vaultAddress, nativeTokenAddress, whitelistedTokenAddresses]),\n  });\n\n  const { infoTokens } = useInfoTokens(library, chainId, active, tokenBalances, fundingRateInfo);\n  const { positions, positionsMap } = getPositions(\n    chainId,\n    positionQuery,\n    positionData,\n    infoTokens,\n    false,\n    false,\n    checkSummedAccount,\n    undefined,\n    undefined\n  );\n\n  const flagOrdersEnabled = true;\n  const [orders, updateOrders] = useAccountOrders(flagOrdersEnabled, checkSummedAccount);\n\n  return (\n    <div className=\"Actions\">\n      {checkSummedAccount.length > 0 && <div className=\"Actions-section\">Account: {checkSummedAccount}</div>}\n      {checkSummedAccount.length > 0 && (\n        <div className=\"Actions-section\">\n          <div className=\"Actions-title\">Positions</div>\n          <PositionsList\n            positions={positions}\n            positionsMap={positionsMap}\n            infoTokens={infoTokens}\n            active={active}\n            orders={orders}\n            account={checkSummedAccount}\n            library={library}\n            flagOrdersEnabled={false}\n            savedIsPnlInLeverage={false}\n            chainId={chainId}\n            nativeTokenAddress={nativeTokenAddress}\n            showPnlAfterFees={false}\n            trackAction={trackAction}\n          />\n        </div>\n      )}\n      {flagOrdersEnabled && checkSummedAccount.length > 0 && (\n        <div className=\"Actions-section\">\n          <div className=\"Actions-title\">Orders</div>\n          <OrdersList\n            account={checkSummedAccount}\n            infoTokens={infoTokens}\n            positionsMap={positionsMap}\n            chainId={chainId}\n            orders={orders}\n            updateOrders={updateOrders}\n            hideActions\n            trackAction={trackAction}\n          />\n        </div>\n      )}\n      <div className=\"Actions-section\">\n        <div className=\"Actions-title\">Actions</div>\n        <TradeHistory\n          account={checkSummedAccount}\n          infoTokens={infoTokens}\n          getTokenInfo={getTokenInfo}\n          chainId={chainId}\n          nativeTokenAddress={nativeTokenAddress}\n        />\n      </div>\n    </div>\n  );\n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\SellMlp\\SellMlp.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\PositionsOverview\\PositionsOverview.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\OrdersOverview\\OrdersOverview.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Exchange\\Exchange.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Rewards\\Rewards.js",["981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999"],"import React, { useState, useMemo, useEffect } from \"react\";\n\nimport useSWR from \"swr\";\n\nimport {\n  getPageTitle,\n  getTokenInfo,\n  useChainId,\n  useENS,\n  fetcher,\n  expandDecimals,\n  ETH_DECIMALS,\n  helperToast,\n  useLocalStorageSerializeKey,\n} from \"../../Helpers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { callContract } from \"../../Api\";\nimport { ethers } from \"ethers\";\nimport TraderRewards from \"./TraderRewards\";\nimport Leaderboard from \"./Leaderboard\";\nimport * as Styles from \"./Rewards.styles\";\n\nimport SEO from \"../../components/Common/SEO\";\nimport { getContract } from \"../../Addresses\";\n\nimport FeeDistributor from \"../../abis/FeeDistributor.json\";\nimport FeeDistributorReader from \"../../abis/FeeDistributorReader.json\";\nimport ViewSwitch from \"../../components/ViewSwitch/ViewSwitch\";\nimport { RoundDropdown } from \"../../components/RewardsRoundSelect/RewardsRoundSelect\";\nimport { getServerUrl } from \"src/lib\";\n\nconst PersonalHeader = () => (\n  <div className=\"Page-title-section mt-0\">\n    <div className=\"Page-title\">Trader Rewards || Coming Soon</div>\n    <div className=\"Page-description\">\n      Be in the top 8% of traders to earn weekly rewards.\n      \n    </div>\n  </div>\n);\n\nconst LeaderboardHeader = () => (\n  <div className=\"Page-title-section mt-0\">\n    \n  </div>\n);\n\nexport default function Rewards(props) {\n  const { connectWallet, trackPageWithTraits, trackAction, analytics, setPendingTxns, infoTokens } = props;\n\n  const { chainId } = useChainId();\n  const { active, account, library } = useWeb3React();\n  const { ensName } = useENS(account);\n\n  const [selectedRound, setSelectedRound] = useLocalStorageSerializeKey([chainId, \"Rewards-selected-round\"], \"latest\");\n\n  const [currentView, setCurrentView] = useLocalStorageSerializeKey([chainId, \"Rewards-current-view\"], \"Personal\");\n\n  const [pageTracked, setPageTracked] = useState(false);\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [nextRewards, setNextRewards] = useState();\n  const [claimDelay, setClaimDelay] = useState();\n\n  const feeDistributor = getContract(chainId, \"FeeDistributor\");\n  const feeDistributorReader = getContract(chainId, \"FeeDistributorReader\");\n\n  // Fetch all round data from server\n  const { data: allRoundsRewardsData_, error: failedFetchingRewards } = useSWR(\n    [getServerUrl(chainId, \"/tradingRewards\")],\n    {\n      fetcher: (...args) => fetch(...args).then((res) => res.json()),\n    }\n  );\n\n  const allRoundsRewardsData = Array.isArray(allRoundsRewardsData_) ? allRoundsRewardsData_ : undefined;\n\n  // Fetch only the latest round's data from server\n  const { data: currentRewardRound, error: failedFetchingRoundRewards } = useSWR(\n    [getServerUrl(chainId, \"/tradingRewards\"), selectedRound],\n    {\n      fetcher: (url, round) => fetch(`${url}&round=${round}`).then((res) => res.json()),\n    }\n  );\n\n  const { data: hasClaimed } = useSWR(\n    [\n      `Rewards:claimed:${active}`,\n      chainId,\n      feeDistributorReader,\n      \"getUserClaimed\",\n      feeDistributor,\n      account ?? ethers.constants.AddressZero,\n      allRoundsRewardsData?.length ?? 1,\n    ],\n    {\n      fetcher: fetcher(library, FeeDistributorReader),\n    }\n  );\n\n  // Fetch user proof\n  const { data: userProof } = useSWR(\n    [getServerUrl(chainId, \"/tradingRewardProof\"), selectedRound, account ?? ethers.constants.AddressZero],\n    {\n      fetcher: (url, round, account) => fetch(`${url}&round=${round}&userAddress=${account}`).then((res) => res.json()),\n    }\n  );\n\n  // Get the data for the current user\n  const userData = useMemo(\n    () =>\n      allRoundsRewardsData?.reduce(\n        (totals, round) => {\n          const trader = round.rewards?.find((trader) => trader.user_address.toLowerCase() === account?.toLowerCase());\n          if (!trader) {\n            return totals;\n          }\n          let unclaimedRewards = totals.unclaimedRewards;\n          const userReward = ethers.BigNumber.from(trader.reward).add(trader.degen_reward);\n          if (hasClaimed && !hasClaimed[round.round]) {\n            unclaimedRewards = unclaimedRewards.add(userReward);\n          }\n          return {\n            totalTradingVolume: totals.totalTradingVolume.add(trader.volume),\n            totalRewards: totals.totalRewards.add(userReward),\n            unclaimedRewards,\n          };\n        },\n        {\n          totalTradingVolume: ethers.BigNumber.from(0),\n          totalRewards: ethers.BigNumber.from(0),\n          unclaimedRewards: ethers.BigNumber.from(0),\n        }\n      ),\n    [allRoundsRewardsData, hasClaimed, account]\n  );\n\n  // Extract round data from full API response\n  const [middleRow, setMiddleRow] = useState();\n  const roundData = useMemo(() => {\n    if (!currentRewardRound || !!currentRewardRound?.message) {\n      setMiddleRow(undefined);\n      return undefined;\n    }\n    let hasSetMiddle = false;\n    const rewards = currentRewardRound.rewards\n      ?.sort((a, b) => b.volume - a.volume)\n      .map((trader, index) => {\n        const positionReward = ethers.BigNumber.from(trader.reward);\n        const degenReward = ethers.BigNumber.from(trader.degen_reward);\n        if (!hasSetMiddle && positionReward.eq(0)) {\n          hasSetMiddle = true;\n          setMiddleRow(index);\n        }\n        return {\n          ...trader,\n          totalReward: positionReward.add(degenReward),\n          positionReward,\n          degenReward,\n        };\n      }); // Sort traders by highest to lowest in volume\n    return {\n      ...currentRewardRound,\n      rewards,\n    };\n  }, [currentRewardRound]);\n\n  // Get volume, position and reward from user round data\n  const userRoundData = useMemo(() => {\n    if (!currentRewardRound) {\n      return undefined;\n    }\n    const leaderBoardIndex = currentRewardRound.rewards?.findIndex(\n      (trader) => trader.user_address.toLowerCase() === account?.toLowerCase()\n    );\n    let traderData;\n    if (leaderBoardIndex !== undefined && leaderBoardIndex >= 0) {\n      traderData = currentRewardRound.rewards[leaderBoardIndex];\n    }\n    // trader's data found\n    if (traderData) {\n      const positionReward = ethers.BigNumber.from(traderData.reward);\n      const degenReward = ethers.BigNumber.from(traderData.degen_reward);\n      return {\n        volume: ethers.BigNumber.from(traderData.volume),\n        totalReward: positionReward.add(degenReward),\n        position: leaderBoardIndex + 1,\n        positionReward,\n        degenReward,\n      };\n    } else {\n      // trader not found but data exists so user has no rewards\n      return {\n        volume: ethers.BigNumber.from(0),\n        totalReward: ethers.BigNumber.from(0),\n        positionReward: ethers.BigNumber.from(0),\n        degenReward: ethers.BigNumber.from(0),\n        rewardAmountUsd: ethers.BigNumber.from(0),\n      };\n    }\n  }, [account, currentRewardRound]);\n\n  const eth = getTokenInfo(infoTokens, ethers.constants.AddressZero);\n  const ethPrice = eth?.maxPrimaryPrice;\n\n  if (ethPrice && userRoundData?.totalReward) {\n    userRoundData.rewardAmountUsd = userRoundData.totalReward?.mul(ethPrice).div(expandDecimals(1, ETH_DECIMALS));\n  }\n\n  let unclaimedRewardsUsd, totalRewardAmountUsd;\n  if (ethPrice && userData) {\n    unclaimedRewardsUsd = userData.unclaimedRewards.mul(ethPrice).div(expandDecimals(1, ETH_DECIMALS));\n    totalRewardAmountUsd = userData.totalRewards.mul(ethPrice).div(expandDecimals(1, ETH_DECIMALS));\n  }\n\n  let rewardsMessage = \"\";\n  if (!currentRewardRound) {\n    rewardsMessage = \"Fetching rewards\";\n  } else if (!!failedFetchingRoundRewards) {\n    rewardsMessage = \"Failed fetching current round rewards\";\n  } else if (!!failedFetchingRewards) {\n    rewardsMessage = \"Failed fetching rewards\";\n  } else {\n    if (currentRewardRound?.length === 0) {\n      rewardsMessage = \"No rewards\";\n    } else if (selectedRound === \"latest\") {\n      rewardsMessage = `Round ${Number.parseInt(currentRewardRound.round) + 1}`;\n    } else {\n      rewardsMessage = `Round ${selectedRound + 1}`;\n    }\n  }\n\n  const switchView = () => {\n    setCurrentView(currentView === \"Personal\" ? \"Leaderboard\" : \"Personal\");\n    trackAction &&\n      trackAction(\"Button clicked\", {\n        buttonName: \"Rewards panel\",\n        view: currentView === \"Leaderboard\" ? \"Rewards\" : \"Leaderboard\",\n      });\n  };\n\n  useEffect(() => {\n    const now = Date.now();\n    const buffer = 60 * 60 * 2 * 1000; // 2 hours\n    if (currentRewardRound && Number(currentRewardRound.end) + buffer > now) {\n      setClaimDelay(true);\n    } else {\n      setClaimDelay(false);\n    }\n  }, [currentRewardRound]);\n\n  useEffect(() => {\n    if (!!allRoundsRewardsData) {\n      const ends = allRoundsRewardsData.map((round) => Number(round.end));\n      const max = Math.max(...ends);\n      if (!Number.isNaN(max)) {\n        setNextRewards(max);\n      }\n    }\n  }, [allRoundsRewardsData]);\n\n  // Segment Analytics Page tracking\n  useEffect(() => {\n    if (!pageTracked && currentRewardRound && analytics) {\n      const traits = {\n        round: currentRewardRound.key,\n      };\n      trackPageWithTraits(traits);\n      setPageTracked(true); // Prevent Page function being called twice\n    }\n  }, [currentRewardRound, pageTracked, trackPageWithTraits, analytics]);\n\n  const handleClaim = () => {\n    setIsClaiming(true);\n    // helperToast.error(\"Claiming rewards is currently disabled\");\n    trackAction(\"Button clicked\", {\n      buttonName: \"Claim rewards\",\n    });\n    let error;\n    if (selectedRound === \"latest\") {\n      helperToast.error(\"Cannot claim rewards before round has ended\");\n      error = true;\n    }\n    if (!userProof) {\n      helperToast.error(\"Fetching merkle proof\");\n      error = true;\n    }\n    if (userProof.amount === \"0\") {\n      helperToast.error(`No rewards for round: ${selectedRound}`);\n      error = true;\n    }\n    if (!!userProof?.message) {\n      helperToast.error(`Invalid user proof`);\n      error = true;\n    }\n    if (error) {\n      setIsClaiming(true);\n      return;\n    }\n    const contract = new ethers.Contract(feeDistributor, FeeDistributor.abi, library.getSigner());\n    callContract(\n      chainId,\n      contract,\n      \"withdraw\",\n      [\n        userProof.merkleProof, // proof\n        userProof.amount, // amount\n        selectedRound, // round\n      ],\n      {\n        sentMsg: \"Claim submitted!\",\n        failMsg: \"Claim failed.\",\n        successMsg: \"Claim completed!\",\n        setPendingTxns,\n      }\n    ).finally(() => {\n      setIsClaiming(false);\n    });\n  };\n\n  const isLatestRound = selectedRound === \"latest\";\n  let hasClaimedRound;\n  if (selectedRound !== \"latest\" && hasClaimed) {\n    hasClaimedRound = hasClaimed[selectedRound];\n  }\n\n  return (\n    <>\n      <SEO\n        title={getPageTitle(\"Rewards\")}\n        description=\"Claim fees earned via being in the top 5% of traders on Mycelium Perpetual Swaps.\"\n      />\n      <Styles.StyledRewardsPage className=\"default-container page-layout\">\n        {\n          {\n            Personal: <PersonalHeader />,\n            Leaderboard: <LeaderboardHeader />,\n          }[currentView]\n        }\n        \n        \n      </Styles.StyledRewardsPage>\n    </>\n  ); \n} \n","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\PageNotFound\\PageNotFound.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\BuyMlp\\BuyMlp.js",["1000","1001","1002","1003"],"import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport MlpSwap from \"../../components/Mlp/MlpSwap\";\n\nimport \"./BuyMlp.css\";\n\nimport { getPageTitle, useChainId } from \"../../Helpers\";\nimport { getNativeToken } from \"../../data/Tokens\";\nimport SEO from \"../../components/Common/SEO\";\n\nexport default function BuyMlp(props) {\n  const { chainId } = useChainId();\n  const history = useHistory();\n  const [isBuying, setIsBuying] = useState(true);\n  const nativeTokenSymbol = getNativeToken(chainId).symbol;\n\n  useEffect(() => {\n    const hash = history.location.hash.replace(\"#\", \"\");\n    const buying = hash === \"redeem\" ? false : true;\n    setIsBuying(buying);\n  }, [history.location.hash]);\n\n  return (\n    <>\n      <SEO\n        title={getPageTitle(\"Buy\")}\n        description=\"Buy MLP tokens to provide liquidity to Mycelium’s Perpetual Swaps. MLP tokens represent a share in a yield bearing diversified pool of blue-chip crypto assets.\"\n      />\n      <div className=\"default-container buy-tlp-content page-layout\">\n        <div className=\"section-title-block\">\n          {/*\n            <div className=\"section-title-icon\">\n              <img src={buyMLPIcon} alt=\"buyMLPIcon\" />\n            </div>\n          */}\n          <div className=\"section-title-content\">\n            <div className=\"Page-title\">Buy || Coming Soon</div>\n            <div className=\"Page-description\">\n              Buy and Sell ARBX\n              \n            </div>\n          </div>\n        </div>\n        \n      </div>\n    </>\n  );\n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Navigation\\MobileNav.js",["1004","1005"],"import React, { useEffect, useRef } from \"react\";\nimport AddressDropdown from \"../AddressDropdown/AddressDropdown\";\nimport { ConnectWalletButton } from \"../Common/Button\";\nimport NetworkSelector from \"../NetworkSelector/NetworkSelector\";\nimport {\n  AppHeaderLinkContainer,\n  MyceliumCopy,\n  HeaderClose,\n  Header,\n  SwitchButton,\n  NavBackground,\n  AccountDropdownContainer,\n  MobileNavMenu,\n  NetworkDropdownContainer,\n  ScrollContainer,\n  FlexContainer,\n} from \"./MobileNav.styles\";\n\nimport { NavLink } from \"react-router-dom\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useChainId, getAccountUrl } from \"../../Helpers\";\nimport navClose from \"../../img/ic_nav_close.svg\";\nimport poolsSmallImg from \"../../img/myc_pools_short.svg\";\nimport mobileMeshBackground from \"../../img/background_mesh_mobile.png\";\nimport connectWalletImg from \"../../img/ic_wallet_24.svg\";\n\nconst navLinks = [\n  {\n    name: \"Trade\",\n    path: \"/\",\n  },\n\n  {\n    name: \"Earn\",\n    path: \"/earn\",\n  },\n  {\n    name: \"Buy\",\n    path: \"/buy_mlp\",\n  },\n  {\n    name: \"Rewards\",\n    path: \"/rewards\",\n  },\n  {\n    name: \"Referrals\",\n    path: \"/referrals\",\n  },\n];\n\nexport default function AppHeaderLinks({\n  openSettings,\n  clickCloseIcon,\n  setWalletModalVisible,\n  trackAction,\n  disconnectAccountAndCloseSettings,\n  networkOptions,\n  selectorLabel,\n  onNetworkSelect,\n  showNetworkSelectorModal,\n}) {\n  const { chainId } = useChainId();\n  const { active, account } = useWeb3React();\n\n  const yearRef = useRef(null);\n\n  useEffect(() => {\n    if (active) {\n      setWalletModalVisible(false);\n    }\n  }, [active, setWalletModalVisible]);\n\n  useEffect(() => {\n    const year = new Date().getFullYear();\n    yearRef.current.innerHTML = year.toString();\n    const handleResize = () => {\n      if (window.innerWidth > 670) {\n        clickCloseIcon();\n      }\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [yearRef, clickCloseIcon]);\n\n  const accountUrl = getAccountUrl(chainId, account);\n\n  return (\n    <MobileNavMenu>\n      <NavBackground src={mobileMeshBackground} alt=\"\" />\n      <ScrollContainer>\n        <div>\n          <Header>\n            <span>Menu</span>\n            <HeaderClose onClick={() => clickCloseIcon()}>\n              <span>Close</span>\n              <img src={navClose} className=\"close-icon\" alt=\"Close icon\" />\n            </HeaderClose>\n          </Header>\n          {/*  <a\n            href=\"https://pools.mycelium.xyz\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            className=\"pools-link\"\n            onClick={() => trackAction && trackAction(\"Button clicked\", { buttonName: \"Switch to Perpetual Pools\" })}\n          >\n            <SwitchButton className=\"default-btn switch-link\">\n              Switch to <img src={poolsSmallImg} alt=\"Perpetual Pools\" />\n            </SwitchButton>\n          </a> */}\n          <FlexContainer>\n            <AccountDropdownContainer>\n              {active ? (\n                <AddressDropdown\n                  account={account}\n                  small={false}\n                  accountUrl={accountUrl}\n                  disconnectAccountAndCloseSettings={disconnectAccountAndCloseSettings}\n                  openSettings={openSettings}\n                  trackAction={trackAction}\n                />\n              ) : (\n                <ConnectWalletButton\n                  onClick={() => {\n                    trackAction && trackAction(\"Button clicked\", { buttonName: \"Connect Wallet\" });\n                    setWalletModalVisible(true);\n                  }}\n                  imgSrc={connectWalletImg}\n                >\n                  Connect Wallet\n                </ConnectWalletButton>\n              )}\n            </AccountDropdownContainer>\n            <NetworkDropdownContainer>\n              <NetworkSelector\n                options={networkOptions}\n                label={selectorLabel}\n                onSelect={onNetworkSelect}\n                className=\"App-header-user-netowork\"\n                showCaret={false}\n                modalLabel=\"Select Network\"\n                small={true}\n                showModal={showNetworkSelectorModal}\n                trackAction={trackAction}\n                isMobileNav\n              />\n            </NetworkDropdownContainer>\n          </FlexContainer>\n        </div>\n        <div>\n          {navLinks.map((navLink) => (\n            <AppHeaderLinkContainer key={navLink.name}>\n              <NavLink activeClassName=\"active\" to={navLink.path} onClick={clickCloseIcon}>\n                {navLink.name}\n              </NavLink>\n            </AppHeaderLinkContainer>\n          ))}\n\n          <AppHeaderLinkContainer>\n            <a\n              href=\"https://arbitrex.gitbook.io/arbitrex/arbitrex/about-arbitrex\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              onClick={clickCloseIcon}\n            >\n              Docs\n            </a>\n          </AppHeaderLinkContainer>\n          <AppHeaderLinkContainer>\n            {/* eslint-disable-next-line */}\n            <a\n              href=\"#\"\n              onClick={() => {\n                openSettings();\n                clickCloseIcon();\n              }}\n            >\n              Settings\n            </a>\n          </AppHeaderLinkContainer>\n          <MyceliumCopy>\n            © <span ref={yearRef} /> ARBITREX\n          </MyceliumCopy>\n        </div>\n      </ScrollContainer>\n    </MobileNavMenu>\n  );\n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\ConsentModal\\ConsentModal.js",["1006","1007","1008"],"import React, { useEffect, useState } from \"react\";\nimport \"./ConsentModal.css\";\nimport close from \"../../img/close.svg\";\n\nfunction ConsentModal({ hasConsented, setConsented }) {\n  const [visible, setVisible] = useState(false);\n\n  const handleAccept = () => {\n    localStorage.setItem(\"consentAcknowledged\", \"true\");\n    setConsented(\"true\");\n    setVisible(false);\n  };\n\n  const handleReject = () => {\n    localStorage.setItem(\"consentAcknowledged\", \"false\");\n    setConsented(\"false\");\n    setVisible(false);\n  };\n\n  useEffect(() => {\n    const isBraveBrowser = navigator?.brave;\n    const timer = setTimeout(() => {\n      if (hasConsented === false && !isBraveBrowser) setVisible(true);\n    }, 4000);\n    return () => clearTimeout(timer);\n  }, [hasConsented]);\n\n  return <div className={`ConsentModal ${visible ? \"invisible\" : \"\"}`}></div>;\n}\n\nexport default ConsentModal;\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\NetworkSelector\\NetworkSelector.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\Referrals.js",["1009","1010","1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031"],"import React, { useState, useEffect, useMemo } from \"react\";\n\nimport {\n  ETH_DECIMALS,\n  expandDecimals,\n  fetcher,\n  getPageTitle,\n  useChainId,\n  useENS,\n  isHashZero,\n  useLocalStorageSerializeKey,\n  bigNumberify,\n  formatTimeTill,\n  getTokenInfo,\n} from \"../../Helpers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport * as Styles from \"./Referrals.styles\";\nimport CreateCodeModal from \"./CreateCodeModal\";\nimport EnterCodeModal from \"./EnterCodeModal\";\n\nimport SEO from \"../../components/Common/SEO\";\nimport ViewSwitchTriple from \"../../components/ViewSwitchTriple/ViewSwitchTriple\";\nimport TraderRebateStats from \"./TraderRebateStats\";\nimport ReferralRewards from \"./ReferralRewards\";\nimport AccountBanner from \"./AccountBanner\";\nimport ReferralCodesTable from \"./ReferralCodesTable\";\nimport { useLocalStorage } from \"react-use\";\nimport {\n  decodeReferralCode,\n  useReferralsData,\n  useReferrerTier,\n  useUserReferralCode,\n  useCodeOwner,\n} from \"../../Api/referrals\";\nimport useSWR from \"swr\";\nimport { ethers } from \"ethers\";\nimport { useLocation } from \"react-router-dom\";\n\nimport FeeDistributorReader from \"../../abis/FeeDistributorReader.json\";\nimport { getContract } from \"../../Addresses\";\nimport { REFERRALS_SELECTED_TAB_KEY, REFERRAL_CODE_KEY } from \"../../config/localstorage\";\nimport ReferralLeaderboard from \"./ReferralLeaderboard\";\nimport { getServerUrl } from \"src/lib\";\n\nconst REFERRAL_DATA_MAX_TIME = 60000 * 5; // 5 minutes\nexport function isRecentReferralCodeNotExpired(referralCodeInfo) {\n  if (referralCodeInfo.time) {\n    return referralCodeInfo.time + REFERRAL_DATA_MAX_TIME > Date.now();\n  }\n}\n\nconst RebatesHeader = () => (\n  <div className=\"Page-title-section mt-0\">\n    <div className=\"Page-title\">Referral Program || Coming Soon</div>\n    <div className=\"Page-description\">You will be able to read our referral program on our gitbook</div>\n  </div>\n);\n\nconst CommissionsHeader = () => (\n  <div className=\"Page-title-section mt-0\">\n    <div className=\"Page-title\">Referral Commissions</div>\n    <div className=\"Page-description\">Claim referral commissions here.</div>\n  </div>\n);\n\nconst LeaderboardHeader = () => (\n  <div className=\"Page-title-section mt-0\">\n    <div className=\"Page-title\">Commissions Leaderboard</div>\n    <div className=\"Page-description\">Distribute a referral code and earn commissions on referred volume.</div>\n  </div>\n);\n\nexport const COMMISSIONS = \"Commissions\";\nexport const REBATES = \"Rebates\";\nexport const LEADERBOARD = \"Commissions Leaderboard\";\n\nexport const COMMISSIONS_HASH = \"#commissions\";\nexport const REBATES_HASH = \"#rebates\";\nexport const LEADERBOARD_HASH = \"#leaderboard\";\n\nconst HASH_BY_VIEW = {\n  [COMMISSIONS]: COMMISSIONS_HASH,\n  [REBATES]: REBATES_HASH,\n  [LEADERBOARD]: LEADERBOARD_HASH,\n};\n\nexport default function Referral(props) {\n  const location = useLocation();\n  const { connectWallet, trackAction, infoTokens } = props;\n  const { active, account, library, chainId: chainIdWithoutLocalStorage, pendingTxns, setPendingTxns } = useWeb3React();\n  const { chainId } = useChainId();\n  const { ensName } = useENS(account);\n  const { data: referralsData } = useReferralsData(chainIdWithoutLocalStorage, account);\n  const [recentlyAddedCodes, setRecentlyAddedCodes] = useLocalStorageSerializeKey([chainId, \"REFERRAL\", account], []);\n  const { userReferralCode } = useUserReferralCode(library, chainId, account);\n  const { codeOwner } = useCodeOwner(library, chainId, account, userReferralCode);\n  const { referrerTier: tradersTier } = useReferrerTier(library, chainId, codeOwner);\n  const userReferralCodeInLocalStorage = window.localStorage.getItem(REFERRAL_CODE_KEY);\n\n  const [currentView, setCurrentView] = useLocalStorage(REFERRALS_SELECTED_TAB_KEY, REBATES);\n  const [isEnterCodeModalVisible, setIsEnterCodeModalVisible] = useState(false);\n  const [isEdit, setIsEdit] = useState(false);\n  const [isCreateCodeModalVisible, setIsCreateCodeModalVisible] = useState(false);\n  const [selectedRound, setSelectedRound] = useState(\"latest\");\n  const [nextRewards, setNextRewards] = useState();\n\n  const eth = getTokenInfo(infoTokens, ethers.constants.AddressZero);\n  const ethPrice = eth?.maxPrimaryPrice;\n\n  const switchView = (view) => {\n    setCurrentView(view);\n    const hash = HASH_BY_VIEW[view];\n\n    // Update hash\n    if (window.history.pushState) {\n      window.history.pushState(null, null, hash);\n    } else {\n      location.hash = hash;\n    }\n    trackAction &&\n      trackAction(\"Button clicked\", {\n        buttonName: \"Referral panel\",\n        view: view,\n      });\n  };\n\n  function handleClaim() {\n    // TODO handle claim\n  }\n\n  const feeDistributor = getContract(chainId, \"FeeDistributor\");\n  const feeDistributorReader = getContract(chainId, \"FeeDistributorReader\");\n\n  // Fetch all week data from server\n  const { data: allRoundsRewardsData_, error: failedFetchingRewards } = useSWR(\n    [getServerUrl(chainId, \"/referralRewards\")],\n    {\n      fetcher: (...args) => fetch(...args).then((res) => res.json()),\n    }\n  );\n\n  const allRoundsRewardsData = Array.isArray(allRoundsRewardsData_) ? allRoundsRewardsData_ : undefined;\n\n  // Fetch only the latest week's data from server\n  const { data: currentRewardRound, error: failedFetchingRoundRewards } = useSWR(\n    [getServerUrl(chainId, \"/referralRewards\"), selectedRound],\n    {\n      fetcher: (url, week) => fetch(`${url}&round=${week}`).then((res) => res.json()),\n    }\n  );\n\n  const allUsersRoundData = useMemo(() => {\n    if (!allRoundsRewardsData || !ethPrice) {\n      return undefined;\n    }\n    return currentRewardRound?.rewards\n      ?.sort((a, b) => b.commissions_volume.toString() - a.commissions_volume.toString())\n      .map((trader, index) => {\n        const commissions = bigNumberify(trader.commissions);\n        const rebates = bigNumberify(trader.rebates);\n        return {\n          position: index + 1,\n          address: trader.user_address,\n          volume: bigNumberify(trader.commissions_volume),\n          totalReward: commissions,\n          totalRewardUsd: commissions.mul(ethPrice).div(expandDecimals(1, ETH_DECIMALS)),\n          referralCode: trader.referral_code,\n          numberOfTrades: trader.number_of_trades,\n          tradersReferred: trader.total_traders_referred,\n          tier: trader.tier,\n          commissions,\n          rebates,\n        };\n      });\n  }, [ethPrice, allRoundsRewardsData, currentRewardRound?.rewards]);\n\n  const { data: hasClaimed } = useSWR(\n    [\n      `Rewards:claimed:${active}`,\n      chainId,\n      feeDistributorReader,\n      \"getUserClaimed\",\n      feeDistributor,\n      account ?? ethers.constants.AddressZero,\n      allRoundsRewardsData?.length ?? 1,\n    ],\n    {\n      fetcher: fetcher(library, FeeDistributorReader),\n    }\n  );\n\n  useEffect(() => {\n    if (!!allRoundsRewardsData) {\n      const ends = allRoundsRewardsData.map((week) => Number(week.end));\n      const max = Math.max(...ends);\n      if (!Number.isNaN(max)) {\n        setNextRewards(max);\n      }\n    }\n  }, [allRoundsRewardsData]);\n\n  // Get volume, position and reward from user week data\n  const userRoundData = useMemo(() => {\n    if (!currentRewardRound || !allUsersRoundData) {\n      return undefined;\n    }\n    allUsersRoundData.findIndex((trader) => trader.address === account);\n    const leaderBoardIndex = currentRewardRound.rewards?.findIndex(\n      (trader) => trader.user_address.toLowerCase() === account?.toLowerCase()\n    );\n    let traderData;\n    if (leaderBoardIndex !== undefined && leaderBoardIndex >= 0) {\n      traderData = currentRewardRound.rewards[leaderBoardIndex];\n    }\n\n    // trader's data found\n    if (traderData) {\n      const commissions = bigNumberify(traderData.commissions);\n      const rebates = bigNumberify(traderData.rebates);\n      return {\n        position: leaderBoardIndex + 1,\n        address: traderData.user_address,\n        volume: bigNumberify(traderData.commissions_volume),\n        totalReward: commissions.add(rebates),\n        totalRewardUsd: commissions.add(rebates).mul(ethPrice).div(expandDecimals(1, ETH_DECIMALS)),\n        referralCode: traderData.referral_code,\n        numberOfTrades: parseInt(traderData.number_of_trades),\n        tradersReferred: traderData.traders_referred,\n        tier: traderData.tier,\n        commissions,\n        rebates,\n      };\n    } else {\n      return {\n        volume: bigNumberify(0),\n        totalReward: bigNumberify(0),\n        commissions: bigNumberify(0),\n        rebates: bigNumberify(0),\n      };\n    }\n  }, [account, currentRewardRound, allUsersRoundData, ethPrice]);\n\n  if (ethPrice && userRoundData?.totalReward) {\n    userRoundData.totalRewardUsd = userRoundData.totalReward?.mul(ethPrice).div(expandDecimals(1, ETH_DECIMALS));\n  }\n\n  let referralCodeInString;\n  if (userReferralCode && !isHashZero(userReferralCode)) {\n    referralCodeInString = decodeReferralCode(userReferralCode);\n  }\n\n  if (!referralCodeInString && userReferralCodeInLocalStorage && !isHashZero(userReferralCodeInLocalStorage)) {\n    referralCodeInString = decodeReferralCode(userReferralCodeInLocalStorage);\n  }\n\n  let cumulativeStats, referrerTotalStats, referrerTierInfo, referralTotalStats /*, rebateDistributions */;\n  if (referralsData) {\n    ({ cumulativeStats, referrerTotalStats, referrerTierInfo, referralTotalStats /*, rebateDistributions */ } =\n      referralsData);\n  }\n\n  const finalReferrerTotalStats = recentlyAddedCodes.filter(isRecentReferralCodeNotExpired).reduce((acc, cv) => {\n    const addedCodes = referrerTotalStats?.map((c) => c.referralCode.trim());\n    if (addedCodes && !addedCodes.includes(cv.referralCode)) {\n      // BigNumbers get converted in local storage, need to convert them back\n      cv.totalRebateUsd = bigNumberify(cv.totalRebateUsd);\n      cv.volume = bigNumberify(cv.volume);\n      cv.discountUsd = bigNumberify(cv.discountUsd);\n      acc = acc.concat(cv);\n    }\n    return acc;\n  }, referrerTotalStats);\n\n  const referrerTier = referrerTierInfo?.tierId;\n  let referrerRebates = bigNumberify(0);\n  if (cumulativeStats && cumulativeStats.totalRebateUsd && cumulativeStats.discountUsd) {\n    referrerRebates = cumulativeStats.totalRebateUsd.sub(cumulativeStats.discountUsd);\n  }\n  let referrerVolume = cumulativeStats?.volume;\n\n  let tradersVolume = referralTotalStats?.volume;\n  let tradersRebates = referralTotalStats?.discountUsd;\n\n  let hasCreatedCode = referralsData && referralsData?.codes?.length > 0;\n\n  // // Segment Analytics Page tracking\n  // useEffect(() => {\n  //   if (!pageTracked && currentReferralRound && analytics) {\n  //     const traits = {\n  //       week: currentReferralRound.key,\n  //     };\n  //     trackPageWithTraits(traits);\n  //     setPageTracked(true); // Prevent Page function being called twice\n  //   }\n  // }, [currentReferralRound, pageTracked, trackPageWithTraits, analytics]);\n\n  let rewardsMessage = \"\";\n  if (!currentRewardRound) {\n    rewardsMessage = \"Fetching rewards\";\n  } else if (!!failedFetchingRoundRewards) {\n    rewardsMessage = \"Failed fetching current week rewards\";\n  } else if (!!failedFetchingRewards) {\n    rewardsMessage = \"Failed fetching rewards\";\n  } else {\n    if (currentRewardRound?.length === 0) {\n      rewardsMessage = \"No rewards\";\n    } else if (selectedRound === \"latest\") {\n      rewardsMessage = `Round ${Number.parseInt(currentRewardRound.round) + 1}`;\n    } else {\n      rewardsMessage = `Round ${selectedRound + 1}`;\n    }\n  }\n\n  let timeTillRewards;\n  if (nextRewards) {\n    timeTillRewards = formatTimeTill(nextRewards / 1000);\n  }\n\n  const isLatestRound = selectedRound === \"latest\";\n  let hasClaimedRound;\n  if (selectedRound !== \"latest\" && hasClaimed) {\n    hasClaimedRound = hasClaimed[selectedRound];\n  }\n\n  const handleSetIsEnterCodeModalVisible = (isEdit) => {\n    setIsEdit(isEdit);\n    setIsEnterCodeModalVisible(true);\n  };\n\n  // Change view based on window hash\n  useEffect(() => {\n    const hash = window.location.hash;\n    if (hash === REBATES_HASH) {\n      setCurrentView(REBATES);\n    } else if (hash === COMMISSIONS_HASH) {\n      setCurrentView(COMMISSIONS);\n    } else if (hash === LEADERBOARD_HASH) {\n      setCurrentView(LEADERBOARD);\n    } else {\n      setCurrentView(REBATES);\n    }\n  }, [setCurrentView, location.hash]);\n\n  return (\n    <>\n      <SEO\n        title={getPageTitle(\"Referral\")}\n        description=\"Use a referral code on Mycelium Perpetual Swaps to earn rebates on trading fees.\"\n      />\n      <EnterCodeModal\n        active={active}\n        chainId={chainId}\n        library={library}\n        connectWallet={connectWallet}\n        isEnterCodeModalVisible={isEnterCodeModalVisible}\n        setIsEnterCodeModalVisible={setIsEnterCodeModalVisible}\n        isEdit={isEdit}\n        referralCodeInString={referralCodeInString}\n        pendingTxns={pendingTxns}\n        setPendingTxns={setPendingTxns}\n      />\n      <CreateCodeModal\n        active={active}\n        chainId={chainId}\n        library={library}\n        connectWallet={connectWallet}\n        isCreateCodeModalVisible={isCreateCodeModalVisible}\n        setIsCreateCodeModalVisible={setIsCreateCodeModalVisible}\n        recentlyAddedCodes={recentlyAddedCodes}\n        setRecentlyAddedCodes={setRecentlyAddedCodes}\n        pendingTxns={pendingTxns}\n        setPendingTxns={setPendingTxns}\n      />\n      <Styles.StyledReferralPage className=\"default-container page-layout\">\n        {\n          {\n            [REBATES]: <RebatesHeader />,\n            [COMMISSIONS]: <CommissionsHeader />,\n            [LEADERBOARD]: <LeaderboardHeader />,\n          }[currentView]\n        }\n        \n        \n      </Styles.StyledReferralPage>\n    </> \n  ); \n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Checkbox\\Checkbox.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Modal\\Modal.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Common\\Button.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\AddressDropdown\\AddressDropdown.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\EventToast\\useEventToast.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Navigation\\LinkDropdown\\LinkDropdown.js",["1032","1033","1034","1035"],"import { useState, useEffect, useRef } from \"react\";\nimport { DropdownContainer, DropdownButton, LinkMenu, ListItem } from \"./LinkDropdown.styles\";\nimport { useOutsideClick } from \"../../../hooks/useOutsideClick\";\nimport chevronDown from \"../../../img/chevron-down.svg\";\nimport { NavLink, useLocation } from \"react-router-dom\";\n\nconst navLinks = [\n  /*{\n    name: \"Dashboard\",\n    path: \"/dashboard\",\n  },\n  {\n    name: \"Earn\",\n    path: \"/earn\",\n  },\n  {\n    name: \"Buy\",\n    path: \"/buy_mlp\",\n  },\n  {\n    name: \"Rewards\",\n    path: \"/rewards\",\n  },\n  {\n    name: \"Referrals\",\n    path: \"/referrals\",\n  },\n  */\n];\n\nexport default function LinkDropdown() {\n  const location = useLocation();\n  const [isOpen, setIsOpen] = useState(false);\n  const [currentItem, setCurrentItem] = useState(null);\n\n  const handleLinkClick = (item) => {\n    setCurrentItem(item);\n    setIsOpen(false);\n  };\n\n  const handleToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  useEffect(() => {\n    const currentPage = navLinks.filter((item) => item.path === location.pathname)[0]?.name || \"Trade\";\n    setCurrentItem(currentPage);\n  }, [location]);\n\n  const containerRef = useRef(null);\n  useOutsideClick(containerRef, handleClose);\n\n  return (\n    <DropdownContainer ref={containerRef}>\n      {/*   <DropdownButton onClick={handleToggle}>\n        {currentItem} <img src={chevronDown} alt=\"Close\" />\n      </DropdownButton> */}\n      <LinkMenu open={isOpen}>\n        {navLinks.map((item) => (\n          <MenuItem key={item.name} onClick={handleLinkClick} path={item.path}>\n            {item.name}\n          </MenuItem>\n        ))}\n      </LinkMenu>\n    </DropdownContainer>\n  );\n}\n\nconst MenuItem = ({ path, onClick, children }) => (\n  <ListItem>\n    <NavLink activeClassName=\"active\" exact to={path} onClick={() => onClick(children)}>\n      {children}\n    </NavLink>\n  </ListItem>\n);\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\EventToast\\EventToastContainer.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\EventModal\\EventModal.js",["1036","1037","1038","1039","1040","1041","1042"],"import React, { useEffect } from \"react\";\nimport * as Styled from \"./EventModal.styles\";\nimport ethMergeHeader from \"../../img/event-modal-header.png\";\nimport ethMergeHeadermesh from \"../../img/event-modal-header-mesh.png\";\nimport twitterIcon from \"../../img/twitter-icon.svg\";\nimport { Link } from \"react-router-dom\";\nimport { shareToTwitter } from \"../../utils/common\";\n\nconst EVENTS = {\n  \"new-earn-page\": {\n    title: (\n      <>\n        <small>Earn Page Update</small>\n        {/* Optional large heading */}\n        {/* <h2>Fee-Free Spree</h2> */}\n      </>\n    ),\n    description: (\n      <span>\n        Users can now auto deposit esARBX into the vesting contract and claim Market Making Rewards via selling a portion\n        of their ARBXLP position\n      </span>\n    ),\n    continueLink: \"/earn\",\n  },\n  \"add-limit-orders\": {\n    title: (\n      <>\n        <small>Limit Orders Enabled</small>\n        {/* Optional large heading */}\n        {/* <h2>Fee-Free Spree</h2> */}\n      </>\n    ),\n    description: <span>Arbitrex now supports limit orders for opening and closing leveraged positions!</span>,\n  },\n  \"disable-limit-orders\": {\n    title: (\n      <>\n        <h2>Limit Orders Disabled</h2>\n      </>\n    ),\n    description: (\n      <span>\n        Limit orders are currently disabled. Limits will be live again soon. Your previously set limit orders will need\n        to be updated.\n      </span>\n    ),\n  },\n \n};\n\nexport default function EventModal({\n  isModalVisible,\n  setEventModalVisible,\n  twitterButtonText,\n  twitterText,\n  eventKey,\n  hideHeader,\n}) {\n  const event = EVENTS[eventKey];\n\n  useEffect(() => {\n    const hasSeenEventModal = window.localStorage.getItem(eventKey);\n    if (!hasSeenEventModal) {\n      setEventModalVisible(true);\n      window.localStorage.setItem(eventKey, \"true\");\n    }\n  }, [eventKey, setEventModalVisible]);\n\n  const onClose = () => {\n    setEventModalVisible(false);\n  };\n\n  return (\n    <Styled.EventModal isVisible={isModalVisible} setIsVisible={setEventModalVisible} hideHeader={hideHeader}>\n      {!hideHeader && (\n        <Styled.EventModalHeader>\n          \n        </Styled.EventModalHeader>\n      )}\n      <Styled.EventModalContent>\n       \n        \n      </Styled.EventModalContent>\n    </Styled.EventModal>\n  );\n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\AppDropdown\\AppDropdown.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Navigation\\Sidebar\\Sidebar.js",["1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055"],"import { useEffect, useRef } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport {\n  MenuContainer,\n  SideMenu,\n  Logo,\n  NavMenu,\n  MenuItem,\n  BottomMenuItem,\n  PullTab,\n  SocialLinksMenu,\n  CopyrightYear,\n  LegalMenu,\n  FixedContainer,\n  EventBox,\n  EventHeader,\n  EventContent,\n  EventGraphic,\n  ViewNowButton,\n  EventDescription,\n  EventTitle,\n} from \"./Sidebar.styles\";\n\nimport { ReactComponent as TradeIcon } from \"../../../img/nav/trade.svg\";\nimport { ReactComponent as DashboardIcon } from \"../../../img/nav/dashboard.svg\";\nimport { ReactComponent as EarnIcon } from \"../../../img/nav/earn.svg\";\nimport { ReactComponent as BuyIcon } from \"../../../img/nav/buy.svg\";\nimport { ReactComponent as RewardsIcon } from \"../../../img/nav/rewards.svg\";\nimport { ReactComponent as ReferralsIcon } from \"../../../img/nav/referrals.svg\";\nimport { ReactComponent as MycStakingIcon } from \"../../../img/nav/myc-staking.svg\";\n// import { ReactComponent as LeaderboardIcon } from \"../../../img/nav/trading-leaderboard.svg\";\nimport { ReactComponent as AnalyticsIcon } from \"../../../img/nav/analytics.svg\";\nimport { ReactComponent as DocsIcon } from \"../../../img/nav/docs.svg\";\nimport { ReactComponent as Medium } from \"../../../img/nav/medium.svg\";\nimport { ReactComponent as TwitterIcon } from \"../../../img/nav/twitter.svg\";\nimport { ReactComponent as DiscordIcon } from \"../../../img/nav/discord.svg\";\nimport { ReactComponent as PullTabSvg } from \"../../../img/nav/pull-tab.svg\";\n// import { ReactComponent as TranslateIcon } from \"../../../img/nav/translate.svg\";\nimport graphic from \"../../../img/nav/event-graphic.png\";\n\nimport logoImg from \"../../../img/logo_MYC.svg\";\n\nconst navTopLinks = [\n  /*{\n    name: \"Home\",\n    path: \"https://www.amazon.es/?tag=admarketpl0c0-21&ref=pd_sl_2e30e27a83104081387822caeb2b70fe7f8264b8f9fa8287dff6b2bf&mfadid=adm\",\n    icon: DashboardIcon,\n  },*/\n  {\n    name: \"Trade\",\n    path: \"/\",\n    icon: TradeIcon,\n  },\n  \n  {\n    name: \"Earn\",\n    path: \"/earn\",\n    icon: EarnIcon,\n  },\n  {\n    name: \"Buy\",\n    path: \"/buy_mlp\",\n    icon: BuyIcon,\n  },\n  {\n    name: \"Rewards\",\n    path: \"/rewards\",\n    icon: RewardsIcon,\n  },\n  {\n    name: \"Referrals\",\n    path: \"/referrals\",\n    icon: ReferralsIcon,\n  },\n  \n];\n\nconst socialLinks = [\n  {\n    name: \"Twitter\",\n    path: \"https://twitter.com/arbitrex_io\",\n    icon: TwitterIcon,\n  },\n  {\n    name: \"Medium\",\n    path: \"https://arbitrex.gitbook.io/arbitrex/arbitrex/about-arbitrex\",\n    icon: Medium,\n  },\n  {\n    name: \"Discord\",\n    path: \"https://discord.gg/XAYdmhEhxq\",\n    icon: DiscordIcon,\n  },\n];\n\nexport default function Sidebar({ sidebarVisible, setSidebarVisible }) {\n  const yearRef = useRef(null);\n\n  const setYear = () => {\n    const year = new Date().getFullYear();\n    yearRef.current.innerHTML = `&copy; ${year} Arbitrex`;\n  };\n\n  useEffect(() => {\n    setYear();\n  }, []);\n\n  return (\n    <FixedContainer>\n      <PullTab visible={sidebarVisible} onClick={() => setSidebarVisible(!sidebarVisible)}>\n        <PullTabSvg />\n      </PullTab>\n      <SideMenu visible={sidebarVisible}>\n        <Logo visible={sidebarVisible}>\n          <NavLink exact className=\"App-header-link-main\" to=\"/\">\n            <img src={logoImg} alt=\"Perpetual Swaps Logo\" />\n          </NavLink>\n        </Logo>\n        <MenuContainer>\n          <NavMenu>\n            {navTopLinks.map((item) => (\n              <MenuItem key={item.name}>\n                <NavLink activeClassName=\"active\" exact className=\"App-header-link-main\" to={item.path}>\n                  <item.icon /> <span>{item.name}</span>\n                </NavLink>\n              </MenuItem>\n            ))}\n            \n          </NavMenu>\n          <div>\n            <NavMenu noPadding>\n              \n            </NavMenu>\n            \n            <BottomMenuItem>\n              <a\n                href=\"https://arbitrex.gitbook.io/arbitrex/arbitrex/about-arbitrex\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <DocsIcon /> Docs\n              </a>\n            </BottomMenuItem>\n            <SocialLinksMenu>\n              {socialLinks.map((item) => (\n                <a href={item.path} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <item.icon title={item.name} />\n                </a>\n              ))}\n            </SocialLinksMenu>\n           \n            <CopyrightYear ref={yearRef} />\n          </div>\n        </MenuContainer>\n      </SideMenu>\n    </FixedContainer>\n  );\n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\config\\localstorage.ts",[],["1056","1057"],"C:\\Users\\rober\\Documents\\swaps-client\\src\\hooks\\useRouteQuery.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\hooks\\useInfoTokens.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\Api\\referrals.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Tooltip\\ComingSoon.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\Constants.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Common\\SEO.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Stake\\ClaimModal.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Stake\\StakeV2Styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Tooltip\\Tooltip.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Stake\\MlpPriceChart.js",["1058"],"import React, { useEffect, useState, useRef, useCallback, useMemo } from \"react\";\nimport cx from \"classnames\";\n\nimport { createChart } from \"krasulya-lightweight-charts\";\n\nimport {\n  USD_DECIMALS,\n  SWAP,\n  formatAmount,\n  formatDateTime,\n} from \"../../Helpers\";\nimport { useMlpPrices } from \"../../Api\";\n\nimport { getTokens } from \"../../data/Tokens\";\n\nconst timezoneOffset = -new Date().getTimezoneOffset() * 60;\n\nexport function getChartToken(swapOption, fromToken, toToken, chainId) {\n  if (!fromToken || !toToken) {\n    return;\n  }\n\n  if (swapOption !== SWAP) {\n    return toToken;\n  }\n\n  if (fromToken.isUsdg && toToken.isUsdg) {\n    return getTokens(chainId).find((t) => t.isStable);\n  }\n  if (fromToken.isUsdg) {\n    return toToken;\n  }\n  if (toToken.isUsdg) {\n    return fromToken;\n  }\n\n  if (fromToken.isStable && toToken.isStable) {\n    return toToken;\n  }\n  if (fromToken.isStable) {\n    return toToken;\n  }\n  if (toToken.isStable) {\n    return fromToken;\n  }\n\n  return toToken;\n}\n\nconst getSeriesOptions = () => ({\n  // https://github.com/tradingview/lightweight-charts/blob/master/docs/area-series.md\n  lineColor: \"#4FE021\",\n  topColor: \"rgba(49, 69, 131, 0.4)\",\n  bottomColor: \"rgba(140, 198, 63, 0.2)\",\n  lineWidth: 2,\n  priceLineColor: \"rgba(0, 48, 0, 1)\",\n  downColor: \"#FF5621\",\n  wickDownColor: \"#FF5621\",\n  upColor: \"#4FE021\",\n  wickUpColor: \"#4FE021\",\n  borderVisible: false,\n\n  // topColor: 'rgba(38, 198, 218, 0.56)',\n  // bottomColor: 'rgba(38, 198, 218, 0.04)',\n  // lineColor: 'rgba(38, 198, 218, 1)',\n  // lineWidth: 2,\n  // crossHairMarkerVisible: false,\n});\n\nconst getChartOptions = (width, height) => ({\n  width,\n  height,\n  layout: {\n    backgroundColor: \"rgba(255, 255, 255, 0)\",\n    textColor: \"#ccc\",\n    fontFamily: \"Inter\",\n  },\n  localization: {\n    // https://github.com/tradingview/lightweight-charts/blob/master/docs/customization.md#time-format\n    timeFormatter: (businessDayOrTimestamp) => {\n      return formatDateTime(businessDayOrTimestamp - timezoneOffset);\n    },\n  },\n  grid: {\n    vertLines: {\n      visible: true,\n      color: \"rgba(0, 48, 0, 0.2)\",\n      style: 2,\n    },\n    horzLines: {\n      visible: true,\n      color: \"rgba(0, 48, 0, 0.2)\",\n      style: 2,\n    },\n  },\n  // https://github.com/tradingview/lightweight-charts/blob/master/docs/time-scale.md#time-scale\n  timeScale: {\n    rightOffset: 5,\n    borderVisible: false,\n    timeVisible: true,\n    fixLeftEdge: true,\n  },\n  // https://github.com/tradingview/lightweight-charts/blob/master/docs/customization.md#price-axis\n  priceScale: {\n    borderVisible: false,\n    scaleMargins: {\n        top: 0.5,\n        bottom: 0.3,\n    },\n  },\n  crosshair: {\n    horzLine: {\n      color: \"#aaa\",\n    },\n    vertLine: {\n      color: \"#aaa\",\n    },\n    mode: 0,\n  },\n});\n\nexport default function MlpPriceChart(props) {\n  const {\n    chainId,\n    sidebarVisible,\n    mlpPrice\n  } = props;\n\n  const priceData = useMlpPrices(chainId, mlpPrice);\n\n  const [currentChart, setCurrentChart] = useState();\n  const [currentSeries, setCurrentSeries] = useState();\n\n  const [hoveredPoint, setHoveredPoint] = useState();\n\n  const ref = useRef(null);\n  const chartRef = useRef(null);\n\n  const currentPrice = mlpPrice;\n\n  const [chartInited, setChartInited] = useState(false);\n\n  const scaleChart = useCallback(() => {\n    currentChart.timeScale().fitContent();\n  }, [currentChart]);\n\n  const onCrosshairMove = useCallback(\n    (evt) => {\n      if (!evt.time) {\n        setHoveredPoint(null);\n        return;\n      }\n      const priceDataById = priceData.reduce((o, stat) => ({\n        ...o,\n        [stat.time]: {\n          ...stat\n        }\n      }), {})\n\n      const hoveredPoint = priceDataById[evt.time];\n      if (!hoveredPoint) {\n        return\n      }\n      \n      setHoveredPoint(hoveredPoint);\n    },\n    [setHoveredPoint, priceData]\n  );\n\n  useEffect(() => {\n    if (!ref.current || !priceData || !priceData.length || currentChart) {\n      return;\n    }\n\n    const chart = createChart(\n      chartRef.current,\n      getChartOptions(chartRef.current.offsetWidth, chartRef.current.offsetHeight)\n    );\n\n    chart.subscribeCrosshairMove(onCrosshairMove);\n\n    const series = chart.addAreaSeries(getSeriesOptions());\n\n    setCurrentChart(chart);\n    setCurrentSeries(series);\n  }, [ref, priceData, currentChart, onCrosshairMove]);\n\n  // useEffect(() => {\n    // const interval = setInterval(() => {\n      // updatePriceData(undefined, true);\n    // }, 60 * 1000);\n    // return () => clearInterval(interval);\n  // }, [updatePriceData]);\n\n  useEffect(() => {\n    if (!currentChart) {\n      return;\n    }\n    const resizeChart = () => {\n      currentChart.resize(chartRef.current.offsetWidth, chartRef.current.offsetHeight);\n    };\n    window.addEventListener(\"resize\", resizeChart);\n    return () => window.removeEventListener(\"resize\", resizeChart);\n  }, [currentChart]);\n\n  useEffect(() => {\n    if (!currentChart) {\n      return;\n    }\n    const resizeChart = () => {\n      currentChart.resize(chartRef.current.offsetWidth, chartRef.current.offsetHeight);\n    };\n    let timeout = setTimeout(() => {\n      resizeChart();\n    }, 500);\n    return () => clearTimeout(timeout);\n  }, [currentChart, sidebarVisible]);\n\n  useEffect(() => {\n    if (currentSeries && priceData && priceData.length) {\n      currentSeries.setData(priceData);\n\n      if (!chartInited) {\n        scaleChart();\n        setChartInited(true);\n      }\n    }\n  }, [priceData, currentSeries, chartInited, scaleChart]);\n\n  const statsHtml = useMemo(() => {\n    if (!priceData) {\n      return null;\n    }\n    const point = hoveredPoint || priceData[priceData.length - 1];\n    if (!point) {\n      return null;\n    }\n\n    const className = cx({\n      \"ExchangeChart-bottom-stats\": true,\n    });\n\n    const toFixedNumbers = 3;\n\n    return (\n      <div className={className}>\n        <span className=\"ExchangeChart-bottom-stats-label\">p</span>\n        <span className=\"ExchangeChart-bottom-stats-value\">{point.value.toFixed(toFixedNumbers)}</span>\n        <span className=\"ExchangeChart-bottom-stats-label\">w/fees</span>\n        <span className=\"ExchangeChart-bottom-stats-value\">{point.mlpPriceWithFees.toFixed(toFixedNumbers)}</span>\n      </div>\n    );\n  }, [hoveredPoint, priceData]);\n\n  let deltaPrice;\n  let delta;\n  let deltaPercentage;\n  let deltaPercentageStr;\n\n  const now = parseInt(Date.now() / 1000);\n  const timeThreshold = now - 24 * 60 * 60;\n\n  if (priceData) {\n    for (let i = priceData.length - 1; i > 0; i--) {\n      const price = priceData[i];\n      if (price.time < timeThreshold) {\n        break;\n      }\n      deltaPrice = price.value;\n    }\n  }\n\n  if (deltaPrice && currentPrice) {\n    const average = parseFloat(formatAmount(currentPrice, USD_DECIMALS, 2));\n    delta = average - deltaPrice;\n    deltaPercentage = (delta * 100) / average;\n    if (deltaPercentage > 0) {\n      deltaPercentageStr = `+${deltaPercentage.toFixed(2)}%`;\n    } else {\n      deltaPercentageStr = `${deltaPercentage.toFixed(2)}%`;\n    }\n    if (deltaPercentage === 0) {\n      deltaPercentageStr = \"0.00\";\n    }\n  }\n\n  return (\n    <div className=\"Mlp-price-chart ExchangeChart tv\" ref={ref}>\n      <div className=\"ExchangeChart-bottom App-box App-box-border\">\n        <div className=\"ExchangeChart-bottom-header\">\n          {statsHtml}\n        </div>\n        <div className=\"ExchangeChart-bottom-content\" ref={chartRef}></div>\n      </div>\n    </div>\n  );\n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\data\\Fees.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Navigation\\Sidebar\\Sidebar.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\AppDropdown\\AppDropdown.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\AppDropdown\\presets.js",["1059","1060","1061"],"import { ReactComponent as Pools } from \"../../img/nav/logos/pools.svg\";\nimport { ReactComponent as Staking } from \"../../img/nav/logos/staking.svg\";\nimport { ReactComponent as TokenMigration } from \"../../img/nav/logos/token-migration.svg\";\nimport { ReactComponent as Twitter } from \"../../img/nav/twitter.svg\";\nimport { ReactComponent as GitHub } from \"../../img/nav/github.svg\";\nimport { ReactComponent as Discord } from \"../../img/nav/discord.svg\";\nimport { ReactComponent as Medium } from \"../../img/nav/medium.svg\";\nimport * as Links from \"../../config/links\";\n\nexport const linkRowContent = [\n  \n];\n\nexport const socialLinks = [\n  {\n    url: Links.twitter,\n    icon: Twitter,\n    title: \"Twitter\",\n    className: \"w-[17px] h-[15px]\",\n  },\n  {\n    url: Links.github,\n    icon: GitHub,\n    title: \"GitHub\",\n    className: \"w-[17px] h-[17px]\",\n  },\n  {\n    url: Links.discord,\n    icon: Discord,\n    title: \"Discord\",\n    className: \"w-5 h-4\",\n  },\n  {\n    url: Links.medium,\n    icon: Medium,\n    title: \"Medium\",\n    className: \"w-[23px] h-[14px]\",\n  },\n];\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\EventModal\\EventModal.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\utils\\common.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Toggle\\Toggle.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\hooks\\useOutsideClick.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\config\\referrals.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\Api\\common.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\Api\\index.js",["1062","1063"],"import { ethers } from \"ethers\";\nimport { gql } from \"@apollo/client\";\nimport { useState, useEffect, useMemo, useCallback, useRef } from \"react\";\nimport { Token as UniToken } from \"@uniswap/sdk-core\";\nimport { Pool } from \"@uniswap/v3-sdk\";\nimport useSWR from \"swr\";\n\nimport OrderBook from \"../abis/OrderBook.json\";\nimport PositionManager from \"../abis/PositionManager.json\";\nimport Vault from \"../abis/Vault.json\";\nimport Router from \"../abis/Router.json\";\nimport LentMyc from \"../abis/LentMyc.json\";\nimport UniPool from \"../abis/UniPool.json\";\nimport Token from \"../abis/Token.json\";\n\nimport { getContract } from \"../Addresses\";\nimport { getConstant } from \"../Constants\";\nimport {\n  ARBITRUM,\n  ETHEREUM,\n  bigNumberify,\n  getExplorerUrl,\n  setGasPrice,\n  getGasLimit,\n  replaceNativeTokenAddress,\n  getProvider,\n  getOrderKey,\n  fetcher,\n  parseValue,\n  expandDecimals,\n  helperToast,\n  USD_DECIMALS,\n  ETH_DECIMALS,\n  FORTNIGHTS_IN_YEAR,\n  ARBITRUM_GOERLI,\n} from \"../Helpers\";\nimport { getTokenBySymbol } from \"../data/Tokens\";\n\nimport { nissohGraphClient, arbitrumGraphClient, arbitrumTestnetGraphClient } from \"./common\";\nimport { getServerUrl, getSupplyUrl } from \"src/lib\";\nexport * from \"./prices\";\n\nconst { AddressZero } = ethers.constants;\n\nfunction getMycGraphClient(chainId) {\n  if (chainId === ARBITRUM) {\n    return arbitrumGraphClient;\n  } else if (chainId === ARBITRUM_GOERLI) {\n    return arbitrumTestnetGraphClient;\n  }\n  throw new Error(`Unsupported chain ${chainId}`);\n}\n\nexport function useFees(chainId) {\n  const query = gql(`{\n    feeStat(id: \"total\") {\n      swap\n      marginAndLiquidation\n      mint\n      burn\n    }\n  }`);\n\n  const [res, setRes] = useState();\n\n  useEffect(() => {\n    getMycGraphClient(chainId).query({ query }).then(setRes).catch(console.warn);\n  }, [setRes, query, chainId]);\n\n  return res ? res.data.feeStat : null;\n}\n\nexport function useFeesSince(chainId, from, to) {\n  const [res, setRes] = useState();\n\n  const query = gql(`{\n    feeStats(where: { id_gte: ${from}, id_lt: ${to}, period: daily }) {\n      id\n      marginAndLiquidation\n      swap\n      mint\n      burn\n    },\n  }`);\n\n  useEffect(() => {\n    if (!from) {\n      return;\n    }\n    getMycGraphClient(chainId)\n      .query({ query })\n      .then((res) => {\n        if (res.data.feeStats) {\n          let fees = res.data.feeStats.reduce(\n            (sum, stat) => sum.add(stat.mint).add(stat.burn).add(stat.swap).add(stat.marginAndLiquidation),\n            bigNumberify(0)\n          );\n          setRes(fees);\n        }\n      })\n      .catch(console.warn);\n  }, [setRes, query, chainId, from]);\n\n  return res;\n}\n\nconst FEE_MULTIPLIER_BASIS_POINTS = 4;\nconst MM_FEE_MULTIPLIER = bigNumberify(6);\nconst MM_SWAPS_FEE_MULTIPLIER = bigNumberify(12);\n\nexport function useSpreadCaptureVolume(chainId) {\n  // spread capture turned off\n  const to = 1665792441;\n  const query = gql(`{\n    volumeStats(first: 1000, period: daily, orderBy: id, orderDirection: desc, where: { id_lt: ${to} }) {\n      margin\n      liquidation\n      swap\n      mint\n      burn\n    }\n  }`);\n\n  const [res, setRes] = useState(undefined);\n\n  useEffect(() => {\n    getMycGraphClient(chainId).query({ query }).then((res) => {\n      const totalMMFees = res.data.volumeStats.reduce((sum, stat) => sum\n        .add(MM_FEE_MULTIPLIER.mul(stat.mint))\n        .add(MM_FEE_MULTIPLIER.mul(stat.burn))\n        .add(MM_FEE_MULTIPLIER.mul(stat.margin))\n        .add(MM_FEE_MULTIPLIER.mul(stat.liquidation))\n        .add(MM_SWAPS_FEE_MULTIPLIER.mul(stat.swap))\n      , bigNumberify(0));\n      setRes(totalMMFees.div(expandDecimals(1, FEE_MULTIPLIER_BASIS_POINTS)))\n    }).catch(console.warn);\n  }, [setRes, query, chainId]);\n\n  return res;\n}\n\nexport function useVolume(chainId) {\n  const query = gql(`{\n    volumeStat(id: \"total\") {\n      margin\n      liquidation\n      swap\n      mint\n      burn\n    }\n  }`);\n\n  const [res, setRes] = useState();\n\n  useEffect(() => {\n    getMycGraphClient(chainId).query({ query }).then(setRes).catch(console.warn);\n  }, [setRes, query, chainId]);\n\n  return res ? res.data.volumeStat : null;\n}\n\nexport function useAllOrdersStats(chainId) {\n  const query = gql(`{\n    orderStat(id: \"total\") {\n      openSwap\n      openIncrease\n      openDecrease\n      executedSwap\n      executedIncrease\n      executedDecrease\n      cancelledSwap\n      cancelledIncrease\n      cancelledDecrease\n    }\n  }`);\n\n  const [res, setRes] = useState();\n\n  useEffect(() => {\n    getMycGraphClient(chainId).query({ query }).then(setRes).catch(console.warn);\n  }, [setRes, query, chainId]);\n\n  return res ? res.data.orderStat : null;\n}\n\nexport function useUserStat(chainId) {\n  const query = gql(`{\n    userStat(id: \"total\") {\n      id\n      uniqueCount\n    }\n  }`);\n\n  const [res, setRes] = useState();\n\n  useEffect(() => {\n    getMycGraphClient(chainId).query({ query }).then(setRes).catch(console.warn);\n  }, [setRes, query, chainId]);\n\n  return res ? res.data.userStat : null;\n}\n\nexport function useLiquidationsData(chainId, account) {\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    if (account) {\n      const query = gql(`{\n         liquidatedPositions(\n           where: {account: \"${account.toLowerCase()}\"}\n           first: 100\n           orderBy: timestamp\n           orderDirection: desc\n         ) {\n           key\n           timestamp\n           borrowFee\n           loss\n           collateral\n           size\n           markPrice\n           type\n         }\n      }`);\n      const graphClient = getMycGraphClient(chainId);\n      graphClient\n        .query({ query })\n        .then((res) => {\n          const _data = res.data.liquidatedPositions.map((item) => {\n            return {\n              ...item,\n              size: bigNumberify(item.size),\n              collateral: bigNumberify(item.collateral),\n              markPrice: bigNumberify(item.markPrice),\n            };\n          });\n          setData(_data);\n        })\n        .catch(console.warn);\n    }\n  }, [setData, chainId, account]);\n\n  return data;\n}\n\nexport function useAllPositions(chainId, library) {\n  const count = 1000;\n  const query = gql(`{\n    aggregatedTradeOpens(\n      first: ${count}\n    ) {\n      account\n      initialPosition{\n        indexToken\n        collateralToken\n        isLong\n        sizeDelta\n      }\n      increaseList {\n        sizeDelta\n      }\n      decreaseList {\n        sizeDelta\n      }\n    }\n  }`);\n\n  const [res, setRes] = useState();\n\n  useEffect(() => {\n    nissohGraphClient.query({ query }).then(setRes).catch(console.warn);\n  }, [setRes, query]);\n\n  const key = res ? `allPositions${count}__` : false;\n  const { data: positions = [] } = useSWR(key, async () => {\n    const provider = getProvider(library, chainId);\n    const vaultAddress = getContract(chainId, \"Vault\");\n    const contract = new ethers.Contract(vaultAddress, Vault.abi, provider);\n    const ret = await Promise.all(\n      res.data.aggregatedTradeOpens.map(async (dataItem) => {\n        try {\n          const { indexToken, collateralToken, isLong } = dataItem.initialPosition;\n          const positionData = await contract.getPosition(dataItem.account, collateralToken, indexToken, isLong);\n          const position = {\n            size: bigNumberify(positionData[0]),\n            collateral: bigNumberify(positionData[1]),\n            entryFundingRate: bigNumberify(positionData[3]),\n            account: dataItem.account,\n          };\n          position.fundingFee = await contract.getFundingFee(collateralToken, position.size, position.entryFundingRate);\n          position.marginFee = position.size.div(1000);\n          position.fee = position.fundingFee.add(position.marginFee);\n\n          const THRESHOLD = 5000;\n          const collateralDiffPercent = position.fee.mul(10000).div(position.collateral);\n          position.danger = collateralDiffPercent.gt(THRESHOLD);\n\n          return position;\n        } catch (ex) {\n          console.error(ex);\n        }\n      })\n    );\n\n    return ret.filter(Boolean);\n  });\n\n  return positions;\n}\n\nexport function useAllOrders(chainId, library) {\n  const query = gql(`{\n    orders(\n      first: 1000,\n      orderBy: createdTimestamp,\n      orderDirection: desc,\n      where: {status: \"open\"}\n    ) {\n      type\n      account\n      index\n      status\n      createdTimestamp\n    }\n  }`);\n\n  const [res, setRes] = useState();\n\n  useEffect(() => {\n    getMycGraphClient(chainId).query({ query }).then(setRes);\n  }, [setRes, query, chainId]);\n\n  const key = res ? res.data.orders.map((order) => `${order.type}-${order.account}-${order.index}`) : null;\n  const { data: orders = [] } = useSWR(key, () => {\n    const provider = getProvider(library, chainId);\n    const orderBookAddress = getContract(chainId, \"OrderBook\");\n    const contract = new ethers.Contract(orderBookAddress, OrderBook.abi, provider);\n    return Promise.all(\n      res.data.orders.map(async (order) => {\n        try {\n          const type = order.type.charAt(0).toUpperCase() + order.type.substring(1);\n          const method = `get${type}Order`;\n          const orderFromChain = await contract[method](order.account, order.index);\n          const ret = {};\n          for (const [key, val] of Object.entries(orderFromChain)) {\n            ret[key] = val;\n          }\n          if (order.type === \"swap\") {\n            ret.path = [ret.path0, ret.path1, ret.path2].filter((address) => address !== AddressZero);\n          }\n          ret.type = type;\n          ret.index = order.index;\n          ret.account = order.account;\n          ret.createdTimestamp = order.createdTimestamp;\n          return ret;\n        } catch (ex) {\n          console.error(ex);\n        }\n      })\n    );\n  });\n\n  return orders.filter(Boolean);\n}\n\nexport function usePositionsForOrders(chainId, library, orders) {\n  const key = orders ? orders.map((order) => getOrderKey(order) + \"____\") : null;\n  const { data: positions = {} } = useSWR(key, async () => {\n    const provider = getProvider(library, chainId);\n    const vaultAddress = getContract(chainId, \"Vault\");\n    const contract = new ethers.Contract(vaultAddress, Vault.abi, provider);\n    const data = await Promise.all(\n      orders.map(async (order) => {\n        try {\n          const position = await contract.getPosition(\n            order.account,\n            order.collateralToken,\n            order.indexToken,\n            order.isLong\n          );\n          if (position[0].eq(0)) {\n            return [null, order];\n          }\n          return [position, order];\n        } catch (ex) {\n          console.error(ex);\n        }\n      })\n    );\n    return data.reduce((memo, [position, order]) => {\n      memo[getOrderKey(order)] = position;\n      return memo;\n    }, {});\n  });\n\n  return positions;\n}\n\nfunction invariant(condition, errorMsg) {\n  if (!condition) {\n    throw new Error(errorMsg);\n  }\n}\n\nexport function useTrades(chainId, account) {\n  let url = getServerUrl(chainId, \"/actions\");\n  if (account && account.length) {\n    url += `&account=${account}`;\n  }\n\n  const { data, mutate: updateTrades } = useSWR(url, {\n    dedupingInterval: 30000,\n    fetcher: (...args) => fetch(...args).then((res) => res.json()),\n  });\n\n  // Convert the response to match expected format\n  let trades = [];\n  if (Array.isArray(data)) {\n    trades = data.map((datum) => {\n      if (datum.dataValues) {\n        return {\n          id: datum.dataValues.id.toString(),\n          data: {\n            ...datum.dataValues,\n            params: JSON.stringify(datum.dataValues.params),\n          },\n        };\n      } else {\n        return {\n          id: datum.id,\n          data: {\n            ...datum,\n            params: JSON.stringify(datum.params),\n          },\n        };\n      }\n    });\n  }\n\n  if (trades) {\n    trades.sort((item0, item1) => {\n      const data0 = item0.data;\n      const data1 = item1.data;\n      const time0 = parseInt(data0.timestamp);\n      const time1 = parseInt(data1.timestamp);\n      if (time1 > time0) {\n        return 1;\n      }\n      if (time1 < time0) {\n        return -1;\n      }\n\n      const block0 = parseInt(data0.blockNumber);\n      const block1 = parseInt(data1.blockNumber);\n\n      if (isNaN(block0) && isNaN(block1)) {\n        return 0;\n      }\n\n      if (isNaN(block0)) {\n        return 1;\n      }\n\n      if (isNaN(block1)) {\n        return -1;\n      }\n\n      if (block1 > block0) {\n        return 1;\n      }\n\n      if (block1 < block0) {\n        return -1;\n      }\n\n      return 0;\n    });\n  }\n\n  return { trades, updateTrades };\n}\n\nexport function useHasOutdatedUi() {\n  return { data: false };\n}\n\nexport function useMYCPrice(chainId, libraries, active) {\n  const arbitrumLibrary = libraries && libraries.arbitrum ? libraries.arbitrum : undefined;\n  const { data: mycPriceFromArbitrum, mutate: mutateFromArbitrum } = useMYCPriceFromArbitrum(arbitrumLibrary, active);\n  const { data: mycPriceFromMainnet, mutate: mutateFromMainnet } = useMYCPriceFromMainnet(active);\n\n  const mycPrice = chainId === ARBITRUM ? mycPriceFromArbitrum : mycPriceFromMainnet;\n\n  const mutate = useCallback(() => {\n    mutateFromMainnet();\n    mutateFromArbitrum();\n  }, [mutateFromMainnet, mutateFromArbitrum]);\n\n  return {\n    mycPrice,\n    mycPriceFromArbitrum,\n    mycPriceFromMainnet,\n    mutate,\n  };\n}\n\nexport function useTotalMYCSupply() {\n  const { data: mycSupply, mutate: updateMYCSupply } = useSWR([getSupplyUrl(\"/totalSupply\")], {\n    fetcher: (...args) => fetch(...args).then((res) => res.text()),\n  });\n\n  const { data: circulatingMycSupply, mutate: updateMYCCirculatingSupply } = useSWR(\n    [getSupplyUrl(\"/circulatingSupply\")],\n    {\n      fetcher: (...args) => fetch(...args).then((res) => res.text()),\n    }\n  );\n\n  const mutate = useCallback(() => {\n    updateMYCSupply();\n    updateMYCCirculatingSupply();\n  }, [updateMYCSupply, updateMYCCirculatingSupply]);\n\n  return {\n    total: mycSupply ? bigNumberify(ethers.utils.parseUnits(mycSupply, 18)) : undefined,\n    circulating: circulatingMycSupply ? bigNumberify(ethers.utils.parseUnits(circulatingMycSupply, 18)) : undefined,\n    mutate,\n  };\n}\n\nexport function useTotalMYCInLiquidity() {\n  let poolAddressArbitrum = {\n    uniswap: getContract(ARBITRUM, \"UniswapMycEthPool\"),\n    uniswapMycTcr: getContract(ARBITRUM, \"UniswapMycTcrPool\"),\n    balancer: getContract(ARBITRUM, \"BalancerVault\"),\n  };\n  let poolAddressMainnet = {\n    uniswap: getContract(ETHEREUM, \"UniswapMycEthPool\"),\n    balancer: getContract(ETHEREUM, \"BalancerVault\"),\n    // uniswap: getContract(ETHEREUM, \"UniswapTcrEthPool\"),\n    // sushiswap: getContract(ETHEREUM, \"SushiswapTcrEthPool\"),\n  };\n  let totalMYCArbitrum = useRef(bigNumberify(0));\n  let totalMYCMainnet = useRef(bigNumberify(0));\n\n  const { data: mycInUniswapLiquidityOnArbitrum, mutate: mutateMYCInUniswapLiquidityOnArbitrum } = useSWR(\n    [\n      `StakeV2:mycInLiquidity:${ARBITRUM}`,\n      ARBITRUM,\n      getContract(ARBITRUM, \"MYC\"),\n      \"balanceOf\",\n      poolAddressArbitrum.uniswap,\n    ],\n    {\n      fetcher: fetcher(undefined, Token),\n    }\n  );\n\n  // TODO this pool will slowly get phased out\n  const { data: mycTcrInUniswapLiquidityOnArbitrum, mutate: mutateMYCTCRInUniswapLiquidityOnArbitrum } = useSWR(\n    [\n      `StakeV2:mycTcrInLiquidity:${ARBITRUM}`,\n      ARBITRUM,\n      getContract(ARBITRUM, \"MYC\"),\n      \"balanceOf\",\n      poolAddressArbitrum.uniswapMycTcr,\n    ],\n    {\n      fetcher: fetcher(undefined, Token),\n    }\n  );\n\n  const { data: mycInBalancerLiquidityOnArbitrum, mutate: mutateMYCInBalancerLiquidityOnArbitrum } = useSWR(\n    [\n      `StakeV2:mycBalancerLiquidity:${ARBITRUM}`,\n      ARBITRUM,\n      getContract(ARBITRUM, \"MYC\"),\n      \"balanceOf\",\n      poolAddressArbitrum.balancer,\n    ],\n    {\n      fetcher: fetcher(undefined, Token),\n    }\n  );\n\n  // const { data: tcrInUniswapLiquidityOnArbitrum, mutate: mutateTCRInUniswapLiquidityOnArbitrum } = useSWR(\n  // [\n  // `StakeV2:tcrInLiquidity:${ARBITRUM}`,\n  // ARBITRUM,\n  // getContract(ARBITRUM, \"TCR\"),\n  // \"balanceOf\",\n  // poolAddressArbitrum.uniswapTcr,\n  // ],\n  // {\n  // fetcher: fetcher(undefined, Token),\n  // }\n  // );\n\n  // const { data: tcrInBalancerLiquidityOnArbitrum, mutate: mutateTCRInBalancerLiquidityOnArbitrum } = useSWR(\n  // [\n  // `StakeV2:mycBalancerLiquidity:${ARBITRUM}`,\n  // ARBITRUM,\n  // getContract(ARBITRUM, \"TCR\"),\n  // \"balanceOf\",\n  // poolAddressArbitrum.balancer,\n  // ],\n  // {\n  // fetcher: fetcher(undefined, Token),\n  // }\n  // );\n\n  const { data: mycInUniswapLiquidityOnMainnet, mutate: mutateMYCInUniswapLiquidityOnMainnet } = useSWR(\n    [\n      `StakeV2:mycInUniswapLiquidity:${ETHEREUM}`,\n      ETHEREUM,\n      getContract(ETHEREUM, \"MYC\"),\n      \"balanceOf\",\n      poolAddressMainnet.uniswap,\n    ],\n    {\n      fetcher: fetcher(undefined, Token),\n    }\n  );\n\n  const { data: mycInBalancerLiquidityOnMainnet, mutate: mutateMYCInBalancerLiquidityOnMainnet } = useSWR(\n    [\n      `StakeV2:mycBalancerLiquidity:${ETHEREUM}`,\n      ETHEREUM,\n      getContract(ETHEREUM, \"MYC\"),\n      \"balanceOf\",\n      poolAddressMainnet.balancer,\n    ],\n    {\n      fetcher: fetcher(undefined, Token),\n    }\n  );\n\n  // const { data: tcrInSushiswapLiquidityOnMainnet, mutate: mutateTCRInSushiSwapLiquidityOnMainnet } = useSWR(\n  // [\n  // `StakeV2:tcrInSushiswapLiquidity:${ETHEREUM}`,\n  // ETHEREUM,\n  // getContract(ETHEREUM, \"TCR\"),\n  // \"balanceOf\",\n  // poolAddressMainnet.sushiswap,\n  // ],\n  // {\n  // fetcher: fetcher(undefined, Token),\n  // }\n  // );\n\n  const mutate = useCallback(() => {\n    mutateMYCInUniswapLiquidityOnArbitrum();\n    mutateMYCInBalancerLiquidityOnArbitrum();\n    mutateMYCTCRInUniswapLiquidityOnArbitrum();\n    // mutateTCRInUniswapLiquidityOnArbitrum();\n    // mutateTCRInBalancerLiquidityOnArbitrum();\n\n    mutateMYCInUniswapLiquidityOnMainnet();\n    // mutateTCRInSushiSwapLiquidityOnMainnet();\n    mutateMYCInBalancerLiquidityOnMainnet();\n  }, [\n    mutateMYCInUniswapLiquidityOnArbitrum,\n    mutateMYCInBalancerLiquidityOnArbitrum,\n    mutateMYCTCRInUniswapLiquidityOnArbitrum,\n    // mutateTCRInUniswapLiquidityOnArbitrum,\n    // mutateTCRInBalancerLiquidityOnArbitrum,\n\n    mutateMYCInUniswapLiquidityOnMainnet,\n    // mutateTCRInSushiSwapLiquidityOnMainnet,\n    mutateMYCInBalancerLiquidityOnMainnet,\n  ]);\n\n  if (mycInUniswapLiquidityOnMainnet && mycInBalancerLiquidityOnMainnet && mycTcrInUniswapLiquidityOnArbitrum) {\n    let total = bigNumberify(mycInUniswapLiquidityOnMainnet)\n      .add(mycInBalancerLiquidityOnMainnet)\n      .add(mycTcrInUniswapLiquidityOnArbitrum);\n    totalMYCMainnet.current = total;\n  }\n\n  if (mycInUniswapLiquidityOnArbitrum && mycInBalancerLiquidityOnArbitrum) {\n    let total = bigNumberify(mycInUniswapLiquidityOnArbitrum).add(mycInBalancerLiquidityOnArbitrum);\n    totalMYCArbitrum.current = total;\n  }\n\n  return {\n    mainnet: totalMYCMainnet.current,\n    arbitrum: totalMYCArbitrum.current,\n    total: totalMYCArbitrum.current.add(totalMYCMainnet.current),\n    mutate,\n  };\n}\n\nfunction useMYCPriceFromMainnet(active) {\n  const poolAddress = getContract(ETHEREUM, \"UniswapMycEthPool\");\n  const { data: mycEthUniPoolSlot0, mutate: updateTcrEthUniPoolSlot0 } = useSWR(\n    [`StakeV2:mainnetUniPoolSlot0:${active}`, ETHEREUM, poolAddress, \"slot0\"],\n    {\n      fetcher: fetcher(undefined, UniPool),\n    }\n  );\n\n  const ethPoolAddress = getContract(ETHEREUM, \"UniswapEthUsdcPool\");\n  const { data: ethUsdcUniPoolSlot0, mutate: updateEthUsdcUniPoolSlot0 } = useSWR(\n    [`StakeV2:mainnetEthPrice:${active}`, ETHEREUM, ethPoolAddress, \"slot0\"],\n    {\n      fetcher: fetcher(undefined, UniPool),\n    }\n  );\n\n  const mycPrice = useMemo(() => {\n    if (mycEthUniPoolSlot0 && ethUsdcUniPoolSlot0) {\n      const ethAddress = getContract(ETHEREUM, \"WETH\");\n      const ETH = new UniToken(ETHEREUM, ethAddress, 18, \"SYMBOL\", \"NAME\");\n\n      const usdcAddress = getContract(ETHEREUM, \"USDC\");\n      const USDC = new UniToken(ETHEREUM, usdcAddress, 18, \"SYMBOL\", \"NAME\");\n\n      const ethUsdcPool = new Pool(ETH, USDC, 0, ethUsdcUniPoolSlot0.sqrtPriceX96, 1, ethUsdcUniPoolSlot0.tick);\n\n      const mycAddress = getContract(ETHEREUM, \"TCR\");\n      const MYC = new UniToken(ETHEREUM, mycAddress, 18, \"SYMBOL\", \"NAME\");\n\n      const mycEthPool = new Pool(\n        ETH, // tokenA\n        MYC, // tokenB\n        10000, // fee\n        mycEthUniPoolSlot0.sqrtPriceX96, // sqrtRatioX96\n        1, // liquidity\n        mycEthUniPoolSlot0.tick, // tickCurrent\n        []\n      );\n\n      const ethPrice = ethUsdcPool.priceOf(ETH).toSignificant(6);\n      // USDC is 6 decimals need to parse into 18 + 6 decimal places\n      const ethPriceAmount = parseValue(ethPrice, 24);\n      const poolTokenPrice = mycEthPool.priceOf(MYC).toSignificant(6);\n      const poolTokenPriceAmount = parseValue(poolTokenPrice, 18);\n      // here everything is in 10 ** 24 precision\n      return poolTokenPriceAmount.mul(ethPriceAmount);\n    }\n  }, [ethUsdcUniPoolSlot0, mycEthUniPoolSlot0]);\n\n  const mutate = useCallback(() => {\n    updateTcrEthUniPoolSlot0(undefined, true);\n    updateEthUsdcUniPoolSlot0(undefined, true);\n  }, [updateEthUsdcUniPoolSlot0, updateTcrEthUniPoolSlot0]);\n\n  return { data: mycPrice, mutate };\n}\n\nfunction useMYCPriceFromArbitrum(library, active) {\n  // liquidity is too low for uniswap on arbitrum can use tcr for now\n  const poolAddress = getContract(ARBITRUM, \"UniswapTcrEthPool\");\n  // const poolAddress = getContract(ARBITRUM, \"UniswapMycEthPool\");\n  const { data: uniPoolSlot0, mutate: updateUniPoolSlot0 } = useSWR(\n    [`StakeV2:uniPoolSlot0:${active}`, ARBITRUM, poolAddress, \"slot0\"],\n    {\n      fetcher: fetcher(library, UniPool),\n    }\n  );\n\n  const vaultAddress = getContract(ARBITRUM, \"Vault\");\n  const ethAddress = getTokenBySymbol(ARBITRUM, \"WETH\").address;\n  const { data: ethPrice, mutate: updateEthPrice } = useSWR(\n    [`StakeV2:ethPrice:${active}`, ARBITRUM, vaultAddress, \"getMinPrice\", ethAddress],\n    {\n      fetcher: fetcher(library, Vault),\n    }\n  );\n\n  const mycPrice = useMemo(() => {\n    if (uniPoolSlot0 && ethPrice) {\n      const tokenA = new UniToken(ARBITRUM, ethAddress, 18, \"SYMBOL\", \"NAME\");\n\n      const mycAddress = getContract(ARBITRUM, \"MYC\");\n      const tokenB = new UniToken(ARBITRUM, mycAddress, 18, \"SYMBOL\", \"NAME\");\n\n      const pool = new Pool(\n        tokenA, // tokenA\n        tokenB, // tokenB\n        10000, // fee\n        uniPoolSlot0.sqrtPriceX96, // sqrtRatioX96\n        1, // liquidity\n        uniPoolSlot0.tick, // tickCurrent\n        []\n      );\n\n      const poolTokenPrice = pool.priceOf(tokenB).toSignificant(6);\n      const poolTokenPriceAmount = parseValue(poolTokenPrice, 18);\n      return poolTokenPriceAmount.mul(ethPrice).div(expandDecimals(1, 18));\n    }\n  }, [ethPrice, uniPoolSlot0, ethAddress]);\n\n  const mutate = useCallback(() => {\n    updateUniPoolSlot0(undefined, true);\n    updateEthPrice(undefined, true);\n  }, [updateEthPrice, updateUniPoolSlot0]);\n\n  return { data: mycPrice, mutate };\n}\n\nexport async function approvePlugin(\n  chainId,\n  pluginAddress,\n  { library, pendingTxns, setPendingTxns, sentMsg, failMsg }\n) {\n  const routerAddress = getContract(chainId, \"Router\");\n  const contract = new ethers.Contract(routerAddress, Router.abi, library.getSigner());\n  return callContract(chainId, contract, \"approvePlugin\", [pluginAddress], {\n    sentMsg,\n    failMsg,\n    pendingTxns,\n    setPendingTxns,\n  });\n}\n\nexport async function createSwapOrder(\n  chainId,\n  library,\n  path,\n  amountIn,\n  minOut,\n  triggerRatio,\n  nativeTokenAddress,\n  opts = {}\n) {\n  const executionFee = getConstant(chainId, \"SWAP_ORDER_EXECUTION_GAS_FEE\");\n  const triggerAboveThreshold = false;\n  let shouldWrap = false;\n  let shouldUnwrap = false;\n  opts.value = executionFee;\n\n  if (path[0] === AddressZero) {\n    shouldWrap = true;\n    opts.value = opts.value.add(amountIn);\n  }\n  if (path[path.length - 1] === AddressZero) {\n    shouldUnwrap = true;\n  }\n  path = replaceNativeTokenAddress(path, nativeTokenAddress);\n\n  const params = [path, amountIn, minOut, triggerRatio, triggerAboveThreshold, executionFee, shouldWrap, shouldUnwrap];\n\n  const orderBookAddress = getContract(chainId, \"OrderBook\");\n  const contract = new ethers.Contract(orderBookAddress, OrderBook.abi, library.getSigner());\n\n  return callContract(chainId, contract, \"createSwapOrder\", params, opts);\n}\n\nexport async function createIncreaseOrder(\n  chainId,\n  library,\n  nativeTokenAddress,\n  path,\n  amountIn,\n  indexTokenAddress,\n  minOut,\n  sizeDelta,\n  collateralTokenAddress,\n  isLong,\n  triggerPrice,\n  opts = {}\n) {\n  invariant(!isLong || indexTokenAddress === collateralTokenAddress, \"invalid token addresses\");\n  invariant(indexTokenAddress !== AddressZero, \"indexToken is 0\");\n  invariant(collateralTokenAddress !== AddressZero, \"collateralToken is 0\");\n\n  const fromETH = path[0] === AddressZero;\n\n  path = replaceNativeTokenAddress(path, nativeTokenAddress);\n  const shouldWrap = fromETH;\n  const triggerAboveThreshold = !isLong;\n  const executionFee = getConstant(chainId, \"INCREASE_ORDER_EXECUTION_GAS_FEE\");\n\n  const params = [\n    path,\n    amountIn,\n    indexTokenAddress,\n    minOut,\n    sizeDelta,\n    collateralTokenAddress,\n    isLong,\n    triggerPrice,\n    triggerAboveThreshold,\n    executionFee,\n    shouldWrap,\n  ];\n\n  if (!opts.value) {\n    opts.value = fromETH ? amountIn.add(executionFee) : executionFee;\n  }\n\n  const orderBookAddress = getContract(chainId, \"OrderBook\");\n  const contract = new ethers.Contract(orderBookAddress, OrderBook.abi, library.getSigner());\n\n  return callContract(chainId, contract, \"createIncreaseOrder\", params, opts);\n}\n\nexport async function createDecreaseOrder(\n  chainId,\n  library,\n  indexTokenAddress,\n  sizeDelta,\n  collateralTokenAddress,\n  collateralDelta,\n  isLong,\n  triggerPrice,\n  triggerAboveThreshold,\n  opts = {}\n) {\n  invariant(!isLong || indexTokenAddress === collateralTokenAddress, \"invalid token addresses\");\n  invariant(indexTokenAddress !== AddressZero, \"indexToken is 0\");\n  invariant(collateralTokenAddress !== AddressZero, \"collateralToken is 0\");\n\n  const executionFee = getConstant(chainId, \"DECREASE_ORDER_EXECUTION_GAS_FEE\");\n\n  const params = [\n    indexTokenAddress,\n    sizeDelta,\n    collateralTokenAddress,\n    collateralDelta,\n    isLong,\n    triggerPrice,\n    triggerAboveThreshold,\n  ];\n  opts.value = executionFee;\n  const orderBookAddress = getContract(chainId, \"OrderBook\");\n  const contract = new ethers.Contract(orderBookAddress, OrderBook.abi, library.getSigner());\n\n  return callContract(chainId, contract, \"createDecreaseOrder\", params, opts);\n}\n\nexport async function cancelSwapOrder(chainId, library, index, opts) {\n  const params = [index];\n  const method = \"cancelSwapOrder\";\n  const orderBookAddress = getContract(chainId, \"OrderBook\");\n  const contract = new ethers.Contract(orderBookAddress, OrderBook.abi, library.getSigner());\n\n  return callContract(chainId, contract, method, params, opts);\n}\n\nexport async function cancelDecreaseOrder(chainId, library, index, opts) {\n  const params = [index];\n  const method = \"cancelDecreaseOrder\";\n  const orderBookAddress = getContract(chainId, \"OrderBook\");\n  const contract = new ethers.Contract(orderBookAddress, OrderBook.abi, library.getSigner());\n\n  return callContract(chainId, contract, method, params, opts);\n}\n\nexport async function cancelIncreaseOrder(chainId, library, index, opts) {\n  const params = [index];\n  const method = \"cancelIncreaseOrder\";\n  const orderBookAddress = getContract(chainId, \"OrderBook\");\n  const contract = new ethers.Contract(orderBookAddress, OrderBook.abi, library.getSigner());\n\n  return callContract(chainId, contract, method, params, opts);\n}\n\nexport async function updateDecreaseOrder(\n  chainId,\n  library,\n  index,\n  collateralDelta,\n  sizeDelta,\n  triggerPrice,\n  triggerAboveThreshold,\n  opts\n) {\n  const params = [index, collateralDelta, sizeDelta, triggerPrice, triggerAboveThreshold];\n  const method = \"updateDecreaseOrder\";\n  const orderBookAddress = getContract(chainId, \"OrderBook\");\n  const contract = new ethers.Contract(orderBookAddress, OrderBook.abi, library.getSigner());\n\n  return callContract(chainId, contract, method, params, opts);\n}\n\nexport async function updateIncreaseOrder(\n  chainId,\n  library,\n  index,\n  sizeDelta,\n  triggerPrice,\n  triggerAboveThreshold,\n  opts\n) {\n  const params = [index, sizeDelta, triggerPrice, triggerAboveThreshold];\n  const method = \"updateIncreaseOrder\";\n  const orderBookAddress = getContract(chainId, \"OrderBook\");\n  const contract = new ethers.Contract(orderBookAddress, OrderBook.abi, library.getSigner());\n\n  return callContract(chainId, contract, method, params, opts);\n}\n\nexport async function updateSwapOrder(chainId, library, index, minOut, triggerRatio, triggerAboveThreshold, opts) {\n  const params = [index, minOut, triggerRatio, triggerAboveThreshold];\n  const method = \"updateSwapOrder\";\n  const orderBookAddress = getContract(chainId, \"OrderBook\");\n  const contract = new ethers.Contract(orderBookAddress, OrderBook.abi, library.getSigner());\n\n  return callContract(chainId, contract, method, params, opts);\n}\n\nexport async function _executeOrder(chainId, library, method, account, index, feeReceiver, opts) {\n  const params = [account, index, feeReceiver];\n  const positionManagerAddress = getContract(chainId, \"PositionManager\");\n  const contract = new ethers.Contract(positionManagerAddress, PositionManager.abi, library.getSigner());\n  return callContract(chainId, contract, method, params, opts);\n}\n\nexport function executeSwapOrder(chainId, library, account, index, feeReceiver, opts) {\n  return _executeOrder(chainId, library, \"executeSwapOrder\", account, index, feeReceiver, opts);\n}\n\nexport function executeIncreaseOrder(chainId, library, account, index, feeReceiver, opts) {\n  return _executeOrder(chainId, library, \"executeIncreaseOrder\", account, index, feeReceiver, opts);\n}\n\nexport function executeDecreaseOrder(chainId, library, account, index, feeReceiver, opts) {\n  return _executeOrder(chainId, library, \"executeDecreaseOrder\", account, index, feeReceiver, opts);\n}\n\nconst NOT_ENOUGH_FUNDS = \"NOT_ENOUGH_FUNDS\";\nconst USER_DENIED = \"USER_DENIED\";\nconst SLIPPAGE = \"SLIPPAGE\";\nconst TX_ERROR_PATTERNS = {\n  [NOT_ENOUGH_FUNDS]: [\"not enough funds for gas\", \"failed to execute call with revert code InsufficientGasFunds\"],\n  [USER_DENIED]: [\"User denied transaction signature\"],\n  [SLIPPAGE]: [\"Router: mark price lower than limit\", \"Router: mark price higher than limit\"],\n};\nexport function extractError(ex) {\n  if (!ex) {\n    return [];\n  }\n  const message = ex.data?.message || ex.message;\n  if (!message) {\n    return [];\n  }\n  for (const [type, patterns] of Object.entries(TX_ERROR_PATTERNS)) {\n    for (const pattern of patterns) {\n      if (message.includes(pattern)) {\n        return [message, type];\n      }\n    }\n  }\n  return [message];\n}\n\nfunction ToastifyDebug(props) {\n  const [open, setOpen] = useState(false);\n  return (\n    <div className=\"Toastify-debug\">\n      {!open && (\n        <span className=\"Toastify-debug-button\" onClick={() => setOpen(true)}>\n          Show error\n        </span>\n      )}\n      {open && props.children}\n    </div>\n  );\n}\n\nexport function useStakingApr(mycPrice, ethPrice) {\n  const [stakingApr, setStakingApr] = useState(null);\n\n  const { data: currentCycle } = useSWR(\n    [`useStakingApr:currentCycle:${ARBITRUM}`, ARBITRUM, getContract(ARBITRUM, \"LentMYC\"), \"cycle\"],\n    {\n      fetcher: fetcher(undefined, LentMyc),\n    }\n  );\n\n  const cycle = currentCycle?.toNumber();\n\n  const { data: mycAssetsInStaking } = useSWR(\n    cycle\n      ? [`useStakingApr:mycInStaking:${ARBITRUM}`, ARBITRUM, getContract(ARBITRUM, \"LentMYC\"), \"totalAssets\"]\n      : null,\n    {\n      fetcher: fetcher(undefined, LentMyc),\n    }\n  );\n\n  const { data: pendingMycDepositsInStaking } = useSWR(\n    cycle\n      ? [`useStakingApr:pendingMycInStaking:${ARBITRUM}`, ARBITRUM, getContract(ARBITRUM, \"LentMYC\"), \"pendingDeposits\"]\n      : null,\n    {\n      fetcher: fetcher(undefined, LentMyc),\n    }\n  );\n\n  const { data: prev } = useSWR(\n    cycle\n      ? [`useStakingApr:prev:${ARBITRUM}`, ARBITRUM, getContract(ARBITRUM, \"LentMYC\"), \"cycleCumulativeEthRewards\"]\n      : null,\n    {\n      fetcher: fetcher(undefined, LentMyc, [cycle - 2]),\n    }\n  );\n\n  const { data: current } = useSWR(\n    cycle\n      ? [`useStakingApr:current:${ARBITRUM}`, ARBITRUM, getContract(ARBITRUM, \"LentMYC\"), \"cycleCumulativeEthRewards\"]\n      : null,\n    {\n      fetcher: fetcher(undefined, LentMyc, [cycle - 1]),\n    }\n  );\n\n  const { data: cycleAssets } = useSWR(\n    cycle\n      ? [`useStakingApr:cycleAssets:${ARBITRUM}`, ARBITRUM, getContract(ARBITRUM, \"LentMYC\"), \"cycleSharesAndAssets\"]\n      : null,\n    {\n      fetcher: fetcher(undefined, LentMyc, [cycle - 1]),\n    }\n  );\n\n  useEffect(() => {\n    const values = [mycAssetsInStaking, pendingMycDepositsInStaking, ethPrice, mycPrice, current, prev, cycleAssets];\n    if (values.every(Boolean)) {\n      const cycleEthRewardsPerShare = current.sub(prev);\n      const cycleSupply = cycleAssets[0];\n      const cycleEthRewards = cycleEthRewardsPerShare.mul(cycleSupply).div(ethers.BigNumber.from(10).pow(18));\n      const ethDistributed = cycleEthRewards;\n      const mycDeposited = mycAssetsInStaking.add(pendingMycDepositsInStaking).div(expandDecimals(1, ETH_DECIMALS));\n      const mycUSDValue = mycDeposited.mul(mycPrice);\n      const ethUSDValue = ethDistributed.mul(ethPrice);\n\n      const aprPercentageForCycle = ethers.utils.formatUnits(ethUSDValue.div(mycUSDValue));\n      const aprPercentageYearly = parseFloat(aprPercentageForCycle) * FORTNIGHTS_IN_YEAR * 100;\n      setStakingApr(aprPercentageYearly.toFixed(2));\n    }\n  }, [mycAssetsInStaking, pendingMycDepositsInStaking, ethPrice, mycPrice, current, prev, cycleAssets]);\n\n  return stakingApr;\n}\n\nexport function useTotalStaked() {\n  const [totalStakedMyc, setTotalStakedMyc] = useState(null);\n\n  const { data: mycAssetsInStaking } = useSWR(\n    [`DashboardV2:mycInStaking:${ARBITRUM}`, ARBITRUM, getContract(ARBITRUM, \"LentMYC\"), \"totalAssets\"],\n    {\n      fetcher: fetcher(undefined, LentMyc),\n    }\n  );\n\n  const { data: pendingMycDepositsInStaking } = useSWR(\n    [`DashboardV2:pendingMycInStaking:${ARBITRUM}`, ARBITRUM, getContract(ARBITRUM, \"LentMYC\"), \"pendingDeposits\"],\n    {\n      fetcher: fetcher(undefined, LentMyc),\n    }\n  );\n\n  useEffect(() => {\n    if (mycAssetsInStaking && pendingMycDepositsInStaking && !totalStakedMyc) {\n      const mycDeposited = mycAssetsInStaking.add(pendingMycDepositsInStaking).div(expandDecimals(1, ETH_DECIMALS));\n\n      if (!totalStakedMyc) {\n        setTotalStakedMyc(mycDeposited);\n      }\n    }\n  }, [mycAssetsInStaking, pendingMycDepositsInStaking, totalStakedMyc]);\n\n  return totalStakedMyc;\n}\n\nexport async function callContract(chainId, contract, method, params, opts) {\n  try {\n    if (!Array.isArray(params) && typeof params === \"object\" && opts === undefined) {\n      opts = params;\n      params = [];\n    }\n    if (!opts) {\n      opts = {};\n    }\n\n    const txnOpts = {};\n\n    if (opts.value) {\n      txnOpts.value = opts.value;\n    }\n\n    txnOpts.gasLimit = opts.gasLimit ? opts.gasLimit : await getGasLimit(contract, method, params, opts.value);\n\n    await setGasPrice(txnOpts, contract.provider, chainId);\n\n    const res = await contract[method](...params, txnOpts);\n    const txUrl = getExplorerUrl(chainId) + \"tx/\" + res.hash;\n    const sentMsg = opts.sentMsg || \"Transaction sent.\";\n    helperToast.success(\n      <div>\n        {sentMsg}{\" \"}\n        <a href={txUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n          View status.\n        </a>\n        <br />\n      </div>\n    );\n    if (opts.setPendingTxns) {\n      const pendingTxn = {\n        hash: res.hash,\n        message: opts.successMsg || \"Transaction completed!\",\n      };\n\n      opts.setPendingTxns((pendingTxns) => [...pendingTxns, pendingTxn]);\n    }\n    return res;\n  } catch (e) {\n    let failMsg;\n    const [message, type] = extractError(e);\n    switch (type) {\n      case NOT_ENOUGH_FUNDS:\n        failMsg = (\n          <div>\n            There is not enough ETH in your account on Arbitrum to send this transaction.\n            <br />\n            <br />\n            <a href={\"https://arbitrum.io/bridge-tutorial/\"} target=\"_blank\" rel=\"noopener noreferrer\">\n              Bridge ETH to Arbitrum\n            </a>\n          </div>\n        );\n        break;\n      case USER_DENIED:\n        failMsg = \"Transaction was cancelled.\";\n        break;\n      case SLIPPAGE:\n        failMsg =\n          'The mark price has changed, consider increasing your Allowed Slippage by clicking on the \"...\" icon next to your address.';\n        break;\n      default:\n        failMsg = (\n          <div>\n            {opts.failMsg || \"Transaction failed.\"}\n            <br />\n            {message && <ToastifyDebug>{message}</ToastifyDebug>}\n          </div>\n        );\n    }\n    helperToast.error(failMsg);\n    throw e;\n  }\n}\n\nexport function useMlpPrices(chainId, currentMlpPrice) {\n  const query = gql(`{\n    mlpStats(\n      first: 1000,\n      orderBy: id,\n      orderDirection: asc,\n      where: { period: daily }\n    ) {\n      id\n      aumInUsdg\n      mlpSupply\n      distributedUsd\n      distributedEth\n    },\n    feeStats (\n      first: 1000,\n      orderBy: id,\n      orderDirection: asc,\n      where: { period: daily }\n    ) {\n      id\n      margin\n      marginAndLiquidation\n      swap\n      liquidation\n      mint\n      burn\n    }\n  }`);\n\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    getMycGraphClient(chainId).query({ query }).then(setData).catch(console.warn);\n  }, [setData, query, chainId]);\n\n  let cumulativeDistributedUsdPerMlp = 0;\n  let cumulativeDistributedEthPerMlp = 0;\n  const mlpChartData = useMemo(() => {\n    if (!data) {\n      return null;\n    }\n\n    let prevMlpSupply;\n    let prevAum;\n\n    const feeStatsById = data.data.feeStats.reduce(\n      (o, stat) => ({\n        ...o,\n        [stat.id]: ethers.BigNumber.from(stat.marginAndLiquidation).add(stat.swap).add(stat.mint).add(stat.burn),\n      }),\n      {}\n    );\n\n    let cumulativeFees = ethers.BigNumber.from(0);\n    let ret = data.data.mlpStats\n      .filter((item) => item.id % 86400 === 0)\n      .reduce((memo, item, i) => {\n        const last = memo[memo.length - 1];\n\n        const aum = Number(item.aumInUsdg) / 1e18;\n        const mlpSupply = Number(item.mlpSupply) / 1e18;\n\n        const distributedUsd = Number(item.distributedUsd) / 1e30;\n        const distributedUsdPerMlp = distributedUsd / mlpSupply || 0;\n        cumulativeDistributedUsdPerMlp += distributedUsdPerMlp;\n\n        const distributedEth = Number(item.distributedEth) / 1e18;\n        const distributedEthPerMlp = distributedEth / mlpSupply || 0;\n        cumulativeDistributedEthPerMlp += distributedEthPerMlp;\n\n        const feeStat = feeStatsById[item.id] ?? ethers.BigNumber.from(0);\n        cumulativeFees = cumulativeFees.add(feeStat);\n        const totalFees = parseFloat(ethers.utils.formatUnits(cumulativeFees, USD_DECIMALS));\n\n        const mlpPrice = aum / mlpSupply;\n        const mlpPriceWithFees = (totalFees + aum) / mlpSupply;\n\n        const timestamp = parseInt(item.id);\n\n        const newItem = {\n          time: timestamp,\n          aum,\n          mlpSupply,\n          value: mlpPrice,\n          mlpPriceWithFees: mlpPriceWithFees,\n          cumulativeDistributedEthPerMlp,\n          cumulativeDistributedUsdPerMlp,\n          distributedUsdPerMlp,\n          distributedEthPerMlp,\n        };\n        if (i === data.data.mlpStats.length - 1 && currentMlpPrice) {\n          newItem.mlpPriceWithFees = Number.isNaN(mlpPrice)\n            ? parseFloat(ethers.utils.formatUnits(currentMlpPrice, USD_DECIMALS))\n            : mlpPriceWithFees;\n          newItem.value = parseFloat(ethers.utils.formatUnits(currentMlpPrice, USD_DECIMALS));\n        }\n\n        if (last && last.timestamp === timestamp) {\n          memo[memo.length - 1] = newItem;\n        } else {\n          memo.push(newItem);\n        }\n        return memo;\n      }, [])\n      .map((item) => {\n        let { mlpSupply, aum } = item;\n        if (!mlpSupply) {\n          mlpSupply = prevMlpSupply;\n        }\n        if (!aum) {\n          aum = prevAum;\n        }\n        item.mlpSupplyChange = prevMlpSupply ? ((mlpSupply - prevMlpSupply) / prevMlpSupply) * 100 : 0;\n        if (item.mlpSupplyChange > 1000) item.mlpSupplyChange = 0;\n        item.aumChange = prevAum ? ((aum - prevAum) / prevAum) * 100 : 0;\n        if (item.aumChange > 1000) item.aumChange = 0;\n        prevMlpSupply = mlpSupply;\n        prevAum = aum;\n        return item;\n      });\n\n    // ret = fillNa(ret);\n    return ret;\n  }, [data, currentMlpPrice]);\n\n  return mlpChartData;\n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\config\\links.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\lib\\index.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\Api\\prices.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\lib\\servers.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\lib\\swr\\index.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\lib\\swr\\contractFetcher.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Toggle\\Toggle.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Navigation\\LinkDropdown\\LinkDropdown.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\EventToast\\EventToast.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\ReferralLeaderboard.js",["1064","1065"],"import { useState } from \"react\";\nimport cx from \"classnames\";\nimport * as Styles from \"./ReferralLeaderboard.styles\";\nimport { USD_DECIMALS, formatAmount } from \"../../Helpers\";\nimport { TIER_DISCOUNT_INFO } from \"../../config/referrals\";\nimport { getTierIdDisplay } from \"../../utils/referrals\";\nimport liveIcon from \"../../img/live.svg\";\nimport { RoundDropdown } from \"../../components/RewardsRoundSelect/RewardsRoundSelect\";\nimport { decodeReferralCode } from \"../../Api/referrals\";\nimport { competitionPodiumContent } from \"./presets\";\nimport { numberToOrdinal } from \"../../utils/common\";\n\n\nconst TABLE_HEADINGS = [\n  \"Rank\",\n  \"Referral Code\",\n  \"Tier\",\n  \"Traders Referred\",\n  \"Number of Trades\",\n  \"Total Volume Referred (USD)\",\n  \"Rewards (USD)\",\n];\n\nconst COMPETITION_ROUND = 7;\n\nexport default function ReferralLeaderboard(props) {\n  const [isPodiumShown, setIsPodiumShown] = useState(true);\n  const {\n    allRoundsRewardsData,\n    allUsersRoundData,\n    selectedRound,\n    setSelectedRound,\n    rewardsMessage,\n    trackAction,\n    userRoundData,\n  } = props;\n\n  const togglePodium = () => {\n    setIsPodiumShown(!isPodiumShown);\n  };\n\n  const modifiedAllRoundsRewardsData = allRoundsRewardsData?.map((data) => {\n    if (data?.round === COMPETITION_ROUND) {\n      return {\n        ...data,\n        customRoundText: \"Competition Round\",\n      };\n    } else {\n      return data;\n    }\n  });\n\n  const modifiedRewardsMessage = [COMPETITION_ROUND, \"latest\"].includes(selectedRound)\n    ? \"Competition Round\"\n    : rewardsMessage;\n\n  return (\n    <>\n      <Styles.CompetitionRewardsToggle onClick={togglePodium}>\n        <span>Referral Competition Rewards</span>\n        <Styles.ChevronDown isOpen={isPodiumShown} />\n      </Styles.CompetitionRewardsToggle>\n      <Styles.CompetitionRewardsBanner isOpen={isPodiumShown}>\n        <Styles.PodiumBackground />\n        <Styles.CompetitionRewardsContainer className=\"desktop\">\n          {competitionPodiumContent.map(({ icon, prize, eligibility, className, mobileOnly }) => {\n            if (!mobileOnly)\n              return (\n                <Styles.PodiumItem className={className} key={prize}>\n                  {icon && <img src={icon} alt=\"podium icon\" />}\n                  <h3>{prize}</h3>\n                  {eligibility}\n                </Styles.PodiumItem>\n              );\n          })}\n        </Styles.CompetitionRewardsContainer>\n        <Styles.CompetitionRewardsContainer className=\"mobile\">\n          {competitionPodiumContent.map(({ icon, prize, eligibility, className, desktopOnly }) => {\n            if (!desktopOnly)\n              return (\n                <Styles.PodiumItem className={className} key={prize}>\n                  {icon && <img src={icon} alt=\"podium icon\" />}\n                  <h3>{prize}</h3>\n                  {eligibility}\n                </Styles.PodiumItem>\n              );\n          })}\n        </Styles.CompetitionRewardsContainer>\n      </Styles.CompetitionRewardsBanner>\n      <UserStatsRow userRoundData={userRoundData} />\n      <Styles.FlexBetweenContainer>\n        <Styles.LeaderboardTitle>\n          <img src={liveIcon} alt=\"Live\" /> <span className=\"green\">Live&nbsp;</span> <span>Referrals Leaderboard</span>\n        </Styles.LeaderboardTitle>\n        <RoundDropdown\n          allRoundsRewardsData={modifiedAllRoundsRewardsData}\n          setSelectedRound={setSelectedRound}\n          rewardsMessage={modifiedRewardsMessage}\n          trackAction={trackAction}\n        />\n      </Styles.FlexBetweenContainer>\n      <Styles.RewardsTableContainer className=\"referrals-table\">\n        <Styles.RewardsTable>\n          <thead>\n            <tr>\n              {TABLE_HEADINGS.map((heading) => (\n                <Styles.RewardsTableHeading>{heading}</Styles.RewardsTableHeading>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {allUsersRoundData?.map((row, index) => {\n              if (row.volume.gt(0)) {\n                return <TableRow key={index} row={row} isUserRow={row?.position === userRoundData?.position} isTable />;\n              } else {\n                return <></>;\n              }\n            })}\n          </tbody>\n        </Styles.RewardsTable>\n      </Styles.RewardsTableContainer>\n    </>\n  );\n}\n\nconst TableRow = ({ row, isUserRow, isTable }) => (\n  <Styles.TableRow\n    isUserRow={isUserRow}\n    className={cx({\n      highlight: isUserRow,\n      \"no-border\": !isTable,\n    })}\n  >\n    <Styles.TableCell>{numberToOrdinal(row.position)}</Styles.TableCell>\n    <Styles.TableCell>{row.referralCode ? decodeReferralCode(row.referralCode) : `-`}</Styles.TableCell>\n    <Styles.TableCell className=\"tier\">\n      <span>{`Tier ${getTierIdDisplay(row.tier)}`}</span> <span>{`${TIER_DISCOUNT_INFO[row.tier]}% discount`}</span>\n    </Styles.TableCell>\n    <Styles.TableCell>{row.tradersReferred}</Styles.TableCell>\n    <Styles.TableCell>{row.numberOfTrades}</Styles.TableCell>\n    <Styles.TableCell>${formatAmount(row.volume, USD_DECIMALS, 2, true, \"0.00\")}</Styles.TableCell>\n    <Styles.TableCell>${formatAmount(row.totalRewardUsd, USD_DECIMALS, 2, true, \"0.00\")}</Styles.TableCell>\n  </Styles.TableRow>\n);\n\nconst UserStatsRow = ({ userRoundData }) => (\n  <>\n    <span>Your rewards</span>\n    <Styles.RewardsTableContainer>\n      {userRoundData?.position ? (\n        <Styles.RewardsTable>\n          <thead>\n            <tr>\n              {TABLE_HEADINGS.map((heading) => (\n                <Styles.RewardsTableHeading>{heading}</Styles.RewardsTableHeading>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            <TableRow row={userRoundData} isUserRow />\n          </tbody>\n        </Styles.RewardsTable>\n      ) : (\n        <Styles.NoData>No rewards data available</Styles.NoData>\n      )}\n    </Styles.RewardsTableContainer>\n  </>\n);\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\ReferralCodesTable.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\AccountBanner.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\ReferralRewards.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\TraderRebateStats.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\EnterCodeModal.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\CreateCodeModal.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\Referrals.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Navigation\\MobileNav.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\ViewSwitchTriple\\ViewSwitchTriple.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Rewards\\Rewards.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Rewards\\Leaderboard.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\config\\events.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\hooks\\useLockBodyScroll.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Mlp\\MlpSwap.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\RewardsRoundSelect\\RewardsRoundSelect.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\ViewSwitch\\ViewSwitch.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Rewards\\TraderRewards.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\TradingCompBanner.js",["1066"],"import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport cx from \"classnames\";\nimport Countdown from \"react-countdown\";\nimport * as Styles from \"./TradingCompBanner.styles\";\n\nconst COMP_END_TS = 1668978000000; // 2022-11-16 10:00:00 AEST\n\nexport default function TradingCompBanner() {\n  const [showBanner, setShowBanner] = useState(true);\n\n  const onClose = () => {\n    setShowBanner(false);\n    window.localStorage.setItem(\"hasDismissedReferralsBanner\", \"true\");\n    document.querySelector(\".Exchange\")?.classList.remove(\"ReferralsBannerActive\");\n  };\n\n  const countdownRenderer = ({ days, hours, minutes, seconds, completed }) => {\n    if (completed) {\n      return (\n        <span>\n          0d {hours}h {minutes}m {seconds}s\n        </span>\n      );\n    } else {\n      return (\n        <span>\n          {`${days ? `${days}d` : ``} ${hours ? `${hours}h` : ``} ${minutes ? `${minutes}m` : ``} ${\n            seconds ? `${seconds}s` : ``\n          }`}\n        </span>\n      );\n    }\n  };\n\n  useEffect(() => {\n    const hasDismissedBanner = window.localStorage.getItem(\"hasDismissedReferralsBanner\");\n    if (hasDismissedBanner) {\n      onClose();\n    }\n  }, []);\n\n  return (\n    <Styles.TradingCompBanner\n      className={cx(\"trading-comp-banner\", {\n        active: showBanner,\n      })}\n    >\n      <div />\n      <Styles.TextContainer>\n        <Styles.FlexContainer>\n          <Styles.LiveIcon /> <Styles.GreenText>Disabled</Styles.GreenText>\n        </Styles.FlexContainer>\n        <Styles.BannerTitle>Testnet Beta</Styles.BannerTitle>\n        <span>\n          Time left: <Countdown date={COMP_END_TS} renderer={countdownRenderer} intervalDelay={0} precision={3} />\n        </span>\n        \n      </Styles.TextContainer>\n      <Styles.CloseButton onClick={onClose} />\n    </Styles.TradingCompBanner>\n  );\n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\TradeHistory.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeWalletTokens.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\OrdersList.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\PositionsList.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeTVChart.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\SwapBox.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Tab\\Tab.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Dashboard\\AssetDropdown.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\EventToast\\AnnouncementIcon.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\ReferralLeaderboard.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\views\\Referrals\\presets.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\Shared.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\ViewSwitchTriple\\ViewSwitchTriple.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\utils\\referrals.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\TokenSelector.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\RewardsRoundSelect\\RewardsRoundSelect.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\ViewSwitch\\ViewSwitch.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\hooks\\useDebounce.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\BuyInputSection\\BuyInputSection.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\TradingCompBanner.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\LeverageInput.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\OrderEditor.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\PositionSeller.js",["1067"],"import React, { useState, useCallback, useEffect, useMemo } from \"react\";\nimport useSWR from \"swr\";\nimport { ethers } from \"ethers\";\nimport cx from \"classnames\";\n\nimport { BsArrowRight } from \"react-icons/bs\";\n\nimport {\n  CLOSE_POSITION_RECEIVE_TOKEN_KEY,\n  SLIPPAGE_BPS_KEY\n} from '../../config/localstorage';\n\nimport {\n  formatAmount,\n  bigNumberify,\n  DEFAULT_SLIPPAGE_AMOUNT,\n  DEFAULT_HIGHER_SLIPPAGE_AMOUNT,\n  USD_DECIMALS,\n  DUST_USD,\n  BASIS_POINTS_DIVISOR,\n  TRIGGER_PREFIX_BELOW,\n  TRIGGER_PREFIX_ABOVE,\n  MIN_PROFIT_TIME,\n  fetcher,\n  usePrevious,\n  formatAmountFree,\n  parseValue,\n  expandDecimals,\n  getTokenInfo,\n  getLiquidationPrice,\n  getLeverage,\n  getMarginFee,\n  PRECISION,\n  MARKET,\n  STOP,\n  DECREASE,\n  LIMIT,\n  useLocalStorageSerializeKey,\n  calculatePositionDelta,\n  getDeltaStr,\n  getProfitPrice,\n  formatDateTime,\n  getTimeRemaining,\n  getUserTokenBalances,\n  USDG_DECIMALS,\n  useLocalStorageByChainId,\n  getNextToAmount,\n  adjustForDecimals,\n  getDeltaAfterFees,\n} from \"../../Helpers\";\nimport { getAnalyticsEventStage } from \"../../utils/analytics\";\n\nimport \"./PositionSeller.css\";\nimport { getConstant } from \"../../Constants\";\nimport { createDecreaseOrder, callContract, useHasOutdatedUi } from \"../../Api\";\nimport { getContract } from \"../../Addresses\";\nimport PositionRouter from \"../../abis/PositionRouter.json\";\nimport Checkbox from \"../Checkbox/Checkbox\";\nimport Tab from \"../Tab/Tab\";\nimport Modal from \"../Modal/Modal\";\nimport ExchangeInfoRow from \"./ExchangeInfoRow\";\nimport Tooltip from \"../Tooltip/Tooltip\";\nimport TooltipRow from \"../Tooltip/TooltipRow\";\nimport { getTokens } from \"../../data/Tokens\";\nimport TokenSelector from \"./TokenSelector\";\nimport { getTokenAmountFromUsd, getUsd } from \"../../utils/tokens\";\nimport { convertStringToFloat } from \"../../utils/common\";\n\nconst { AddressZero } = ethers.constants;\nconst ORDER_SIZE_DUST_USD = expandDecimals(1, USD_DECIMALS - 1); // $0.10\n\nconst orderOptionLabels = {\n  [MARKET]: \"Market\",\n  [STOP]: \"Trigger\",\n};\n\nfunction shouldSwap(collateralToken, receiveToken) {\n  // If position collateral is WETH in contract, then position.collateralToken is { symbol: “ETH”, isNative: true, … }\n  // @see https://github.com/mycelium-ethereum/swaps-client/blob/master/src/pages/Exchange/Exchange.js#L162\n  // meaning if collateralToken.isNative === true in reality position has WETH as a collateral\n  // and if collateralToken.isNative === true and receiveToken.isNative === true then position’s WETH will be unwrapped and user will receive native ETH\n  const isCollateralWrapped = collateralToken.isNative;\n\n  const isSameToken =\n    collateralToken.address === receiveToken.address || (isCollateralWrapped && receiveToken.isWrapped);\n\n  const isUnwrap = isCollateralWrapped && receiveToken.isNative;\n\n  return !isSameToken && !isUnwrap;\n}\n\nfunction getSwapLimits(infoTokens, fromTokenAddress, toTokenAddress) {\n  const fromInfo = getTokenInfo(infoTokens, fromTokenAddress);\n  const toInfo = getTokenInfo(infoTokens, toTokenAddress);\n\n  let maxInUsd;\n  let maxIn;\n  let maxOut;\n  let maxOutUsd;\n\n  if (!fromInfo?.maxUsdgAmount) {\n    maxInUsd = bigNumberify(0);\n    maxIn = bigNumberify(0);\n  } else {\n    maxInUsd = fromInfo.maxUsdgAmount\n      .sub(fromInfo.usdgAmount)\n      .mul(expandDecimals(1, USD_DECIMALS))\n      .div(expandDecimals(1, USDG_DECIMALS));\n\n    maxIn = maxInUsd.mul(expandDecimals(1, fromInfo.decimals)).div(fromInfo.maxPrice).toString();\n  }\n\n  if (!toInfo?.poolAmount || !toInfo?.bufferAmount) {\n    maxOut = bigNumberify(0);\n    maxOutUsd = bigNumberify(0);\n  } else {\n    maxOut = toInfo.availableAmount.gt(toInfo.poolAmount.sub(toInfo.bufferAmount))\n      ? toInfo.poolAmount.sub(toInfo.bufferAmount)\n      : toInfo.availableAmount;\n\n    maxOutUsd = getUsd(maxOut, toInfo.address, false, infoTokens);\n  }\n\n  return {\n    maxIn,\n    maxInUsd,\n    maxOut,\n    maxOutUsd,\n  };\n}\n\nconst orderOptions = [MARKET, STOP];\n\nexport default function PositionSeller(props) {\n  const {\n    active,\n    pendingPositions,\n    setPendingPositions,\n    positionsMap,\n    positionKey,\n    isVisible,\n    setIsVisible,\n    account,\n    library,\n    infoTokens,\n    setPendingTxns,\n    flagOrdersEnabled,\n    savedIsPnlInLeverage,\n    chainId,\n    nativeTokenAddress,\n    orders,\n    isWaitingForPluginApproval,\n    isPluginApproving,\n    orderBookApproved,\n    setOrdersToaOpen,\n    positionRouterApproved,\n    isWaitingForPositionRouterApproval,\n    isPositionRouterApproving,\n    approvePositionRouter,\n    isHigherSlippageAllowed,\n    setIsHigherSlippageAllowed,\n    trackAction,\n    usdgSupply,\n    totalTokenWeights,\n    showPnlAfterFees\n  } = props;\n  const [savedSlippageAmount] = useLocalStorageSerializeKey([chainId, SLIPPAGE_BPS_KEY], DEFAULT_SLIPPAGE_AMOUNT);\n  const [keepLeverage, setKeepLeverage] = useLocalStorageSerializeKey([chainId, \"Exchange-keep-leverage\"], true);\n  const position = positionsMap && positionKey ? positionsMap[positionKey] : undefined;\n  const [fromValue, setFromValue] = useState(\"\");\n  const [isProfitWarningAccepted, setIsProfitWarningAccepted] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const prevIsVisible = usePrevious(isVisible);\n  const positionRouterAddress = getContract(chainId, \"PositionRouter\");\n  const nativeTokenSymbol = getConstant(chainId, \"nativeTokenSymbol\");\n  const toTokens = getTokens(chainId);\n\n  const [savedReceiveTokenAddress, setSavedReceiveTokenAddress] = useLocalStorageByChainId(\n    chainId,\n    `${CLOSE_POSITION_RECEIVE_TOKEN_KEY}-${position?.indexToken?.symbol}-${position.isLong ? \"long\" : \"short\"}`\n  );\n\n  const [swapToToken, setSwapToToken] = useState(() =>\n    savedReceiveTokenAddress ? toTokens.find((token) => token.address === savedReceiveTokenAddress) : undefined\n  );\n\n  let allowedSlippage = savedSlippageAmount;\n  if (isHigherSlippageAllowed) {\n    allowedSlippage = DEFAULT_HIGHER_SLIPPAGE_AMOUNT;\n  }\n\n  const { data: minExecutionFee } = useSWR([active, chainId, positionRouterAddress, \"minExecutionFee\"], {\n    fetcher: fetcher(library, PositionRouter),\n  });\n\n\n  let [orderOption, setOrderOption] = useState(MARKET);\n\n  if (!flagOrdersEnabled) {\n    orderOption = MARKET;\n  }\n\n  const needPositionRouterApproval = !positionRouterApproved && orderOption === MARKET;\n\n  const onOrderOptionChange = (option) => {\n    // disabled limit close\n    if (typeof option === \"string\" && option !== LIMIT) {\n      setOrderOption(option);\n    }\n  };\n\n  const onTriggerPriceChange = (evt) => {\n    setTriggerPriceValue(evt.target.value || \"\");\n  };\n  const [triggerPriceValue, setTriggerPriceValue] = useState(\"\");\n  const triggerPriceUsd = orderOption === MARKET ? 0 : parseValue(triggerPriceValue, USD_DECIMALS);\n\n  const [nextDelta, nextHasProfit = bigNumberify(0)] = useMemo(() => {\n    if (!position) {\n      return [bigNumberify(0), false];\n    }\n\n    if (orderOption !== STOP) {\n      return [position.delta, position.hasProfit, position.deltaPercentage];\n    }\n\n    if (!triggerPriceUsd) {\n      return [bigNumberify(0), false];\n    }\n\n    const { delta, hasProfit, deltaPercentage } = calculatePositionDelta(triggerPriceUsd, position);\n    return [delta, hasProfit, deltaPercentage];\n  }, [position, orderOption, triggerPriceUsd]);\n\n  const existingOrders = useMemo(() => {\n    if (orderOption === STOP && (!triggerPriceUsd || triggerPriceUsd.eq(0))) {\n      return [];\n    }\n    if (!orders || !position) {\n      return [];\n    }\n\n    const ret = [];\n    for (const order of orders) {\n      // only Stop orders can't be executed without corresponding opened position\n      if (order.type !== DECREASE) continue;\n\n      // if user creates Stop-Loss we need only Stop-Loss orders and vice versa\n      if (orderOption === STOP) {\n        const triggerAboveThreshold = triggerPriceUsd.gt(position.markPrice);\n        if (triggerAboveThreshold !== order.triggerAboveThreshold) continue;\n      }\n\n      const sameToken =\n        order.indexToken === nativeTokenAddress\n          ? position.indexToken.isNative\n          : order.indexToken === position.indexToken.address;\n      if (order.isLong === position.isLong && sameToken) {\n        ret.push(order);\n      }\n    }\n    return ret;\n  }, [position, orders, triggerPriceUsd, orderOption, nativeTokenAddress]);\n\n  const existingOrder = existingOrders[0];\n\n\n\n  const needOrderBookApproval = orderOption === STOP && !orderBookApproved;\n\n  const isSwapAllowed = orderOption === MARKET;\n\n  const { data: hasOutdatedUi } = useHasOutdatedUi();\n\n  let collateralToken;\n  let receiveToken;\n  let maxAmount;\n  let maxAmountFormatted;\n  let maxAmountFormattedFree;\n  let fromAmount;\n\n  let convertedAmount;\n  let convertedAmountFormatted;\n\n  let nextLeverage;\n  let liquidationPrice;\n  let nextLiquidationPrice;\n  let isClosing;\n  let sizeDelta;\n\n  let nextCollateral;\n  let collateralDelta = bigNumberify(0);\n  let receiveAmount = bigNumberify(0);\n  let convertedReceiveAmount = bigNumberify(0);\n  let adjustedDelta = bigNumberify(0);\n\n  let isNotEnoughReceiveTokenLiquidity;\n  let isCollateralPoolCapacityExceeded;\n\n  let title;\n  let fundingFee;\n  let positionFee;\n  let swapFeeToken;\n  let swapFee;\n  let totalFees = bigNumberify(0);\n\n  let executionFee = orderOption === STOP ? getConstant(chainId, \"DECREASE_ORDER_EXECUTION_GAS_FEE\") : minExecutionFee;\n\n  let executionFeeUsd = getUsd(executionFee, nativeTokenAddress, false, infoTokens) || bigNumberify(0);\n\n  if (position) {\n    fundingFee = position.fundingFee;\n    fromAmount = parseValue(fromValue, USD_DECIMALS);\n    sizeDelta = fromAmount;\n\n    title = `Close ${position.isLong ? \"Long\" : \"Short\"} ${position.indexToken.symbol}`;\n    collateralToken = position.collateralToken;\n    liquidationPrice = getLiquidationPrice(position);\n\n    if (fromAmount) {\n      isClosing = position.size.sub(fromAmount).lt(DUST_USD);\n      positionFee = getMarginFee(fromAmount);\n    }\n\n    if (isClosing) {\n      sizeDelta = position.size;\n      receiveAmount = position.collateral;\n    } else if (orderOption === STOP && sizeDelta && existingOrders.length > 0) {\n      let residualSize = position.size;\n      for (const order of existingOrders) {\n        residualSize = residualSize.sub(order.sizeDelta);\n      }\n      if (residualSize.sub(sizeDelta).abs().lt(ORDER_SIZE_DUST_USD)) {\n        sizeDelta = residualSize;\n      }\n    }\n\n    if (sizeDelta) {\n      adjustedDelta = nextDelta.mul(sizeDelta).div(position.size);\n    }\n\n    if (nextHasProfit) {\n      receiveAmount = receiveAmount.add(adjustedDelta);\n    } else {\n      if (receiveAmount.gt(adjustedDelta)) {\n        receiveAmount = receiveAmount.sub(adjustedDelta);\n      } else {\n        receiveAmount = bigNumberify(0);\n      }\n    }\n\n    if (keepLeverage && sizeDelta && !isClosing) {\n      collateralDelta = sizeDelta.mul(position.collateral).div(position.size);\n      // if the position will be realising a loss then reduce collateralDelta by the realised loss\n      if (!nextHasProfit) {\n        const deductions = adjustedDelta.add(positionFee).add(fundingFee);\n        if (collateralDelta.gt(deductions)) {\n          collateralDelta = collateralDelta = collateralDelta.sub(deductions);\n        } else {\n          collateralDelta = bigNumberify(0);\n        }\n      }\n    }\n\n    maxAmount = position.size;\n    maxAmountFormatted = formatAmount(maxAmount, USD_DECIMALS, 2, true);\n    maxAmountFormattedFree = formatAmountFree(maxAmount, USD_DECIMALS, 2);\n\n    if (fromAmount && collateralToken.maxPrice) {\n      convertedAmount = fromAmount.mul(expandDecimals(1, collateralToken.decimals)).div(collateralToken.maxPrice);\n      convertedAmountFormatted = formatAmount(convertedAmount, collateralToken.decimals, 4, true);\n    }\n\n    totalFees = totalFees.add(positionFee || bigNumberify(0)).add(fundingFee || bigNumberify(0));\n\n    receiveAmount = receiveAmount.add(collateralDelta);\n\n    if (sizeDelta) {\n      if (receiveAmount.gt(totalFees)) {\n        receiveAmount = receiveAmount.sub(totalFees);\n      } else {\n        receiveAmount = bigNumberify(0);\n      }\n    }\n\n    receiveToken = isSwapAllowed && swapToToken ? swapToToken : collateralToken;\n\n    // Calculate swap fees\n    if (isSwapAllowed && swapToToken) {\n      const { feeBasisPoints } = getNextToAmount(\n        chainId,\n        convertedAmount,\n        collateralToken.address,\n        receiveToken.address,\n        infoTokens,\n        undefined,\n        undefined,\n        usdgSupply,\n        totalTokenWeights,\n        true\n      );\n\n      if (feeBasisPoints) {\n        swapFee = receiveAmount.mul(feeBasisPoints).div(BASIS_POINTS_DIVISOR);\n        swapFeeToken = getTokenAmountFromUsd(infoTokens, collateralToken.address, swapFee);\n        totalFees = totalFees.add(swapFee || bigNumberify(0));\n        receiveAmount = receiveAmount.sub(swapFee);\n      }\n    }\n\n    if (orderOption === STOP) {\n      convertedReceiveAmount = getTokenAmountFromUsd(infoTokens, receiveToken.address, receiveAmount, {\n        overridePrice: triggerPriceUsd,\n      });\n    } else {\n      convertedReceiveAmount = getTokenAmountFromUsd(infoTokens, receiveToken.address, receiveAmount);\n    }\n\n    // Check swap limits (max in / max out)\n    if (isSwapAllowed && shouldSwap(collateralToken, receiveToken)) {\n      const collateralInfo = getTokenInfo(infoTokens, collateralToken.address);\n      const receiveTokenInfo = getTokenInfo(infoTokens, receiveToken.address);\n\n      isNotEnoughReceiveTokenLiquidity =\n        receiveTokenInfo.availableAmount.lt(convertedReceiveAmount) ||\n        receiveTokenInfo.bufferAmount.gt(receiveTokenInfo.poolAmount.sub(convertedReceiveAmount));\n\n      if (\n        collateralInfo.maxUsdgAmount &&\n        collateralInfo.maxUsdgAmount.gt(0) &&\n        collateralInfo.usdgAmount &&\n        collateralInfo.maxPrice\n      ) {\n        const usdgFromAmount = adjustForDecimals(receiveAmount, USD_DECIMALS, USDG_DECIMALS);\n        const nextUsdgAmount = collateralInfo.usdgAmount.add(usdgFromAmount);\n\n        if (nextUsdgAmount.gt(collateralInfo.maxUsdgAmount)) {\n          isCollateralPoolCapacityExceeded = true;\n        }\n      }\n    }\n\n    if (isClosing) {\n      nextCollateral = bigNumberify(0);\n    } else {\n      if (position.collateral) {\n        nextCollateral = position.collateral;\n        if (collateralDelta && collateralDelta.gt(0)) {\n          nextCollateral = position.collateral.sub(collateralDelta);\n        } else if (position.delta && position.delta.gt(0) && sizeDelta) {\n          if (!position.hasProfit) {\n            nextCollateral = nextCollateral.sub(adjustedDelta);\n          }\n        }\n      }\n    }\n\n    if (fromAmount) {\n      if (!isClosing && !keepLeverage) {\n        nextLeverage = getLeverage({\n          size: position.size,\n          sizeDelta,\n          collateral: position.collateral,\n          entryFundingRate: position.entryFundingRate,\n          cumulativeFundingRate: position.cumulativeFundingRate,\n          hasProfit: nextHasProfit,\n          delta: nextDelta,\n          includeDelta: savedIsPnlInLeverage,\n        });\n        nextLiquidationPrice = getLiquidationPrice({\n          isLong: position.isLong,\n          size: position.size,\n          sizeDelta,\n          collateral: position.collateral,\n          averagePrice: position.averagePrice,\n          entryFundingRate: position.entryFundingRate,\n          cumulativeFundingRate: position.cumulativeFundingRate,\n          delta: nextDelta,\n          hasProfit: nextHasProfit,\n          includeDelta: true,\n        });\n      }\n    }\n  }\n\n  const [deltaStr, deltaPercentageStr] = useMemo(() => {\n    let pendingDelta, pendingDeltaPercentage, hasProfit;\n    if (!position || !position.markPrice) {\n      return [\"-\", \"-\"];\n    } else if (orderOption !== STOP) {\n      ({ pendingDelta, pendingDeltaPercentage, hasProfit } = calculatePositionDelta(\n        position.markPrice,\n        position,\n        fromAmount\n      ));\n    } else if (!triggerPriceUsd || triggerPriceUsd.eq(0)) {\n      return [\"-\", \"-\"];\n    } else {\n      ({ pendingDelta, pendingDeltaPercentage, hasProfit } = calculatePositionDelta(\n        triggerPriceUsd,\n        position,\n        fromAmount\n      ));\n    }\n\n    let deltaStr, deltaPercentageStr;\n    if (showPnlAfterFees) {\n      const { pendingDeltaAfterFees, deltaPercentageAfterFees, hasProfitAfterFees } = getDeltaAfterFees({\n        delta: pendingDelta,\n        totalFees: position.totalFees,\n        hasProfit,\n        collateral: position.collateral\n      })\n      if (!pendingDeltaAfterFees) {\n        return ['-', '-']\n      }\n      ({ deltaStr, deltaPercentageStr } = getDeltaStr({\n        delta: pendingDeltaAfterFees,\n        deltaPercentage: deltaPercentageAfterFees,\n        hasProfit: hasProfitAfterFees,\n      }));\n    } else {\n      ({ deltaStr, deltaPercentageStr } = getDeltaStr({\n        delta: pendingDelta,\n        deltaPercentage: pendingDeltaPercentage,\n        hasProfit,\n      }));\n    }\n    return [deltaStr, deltaPercentageStr];\n  }, [position, triggerPriceUsd, orderOption, fromAmount]);\n\n  const getError = () => {\n    if (hasOutdatedUi) {\n      return \"Page outdated, please refresh\";\n    }\n    if (!fromAmount) {\n      return \"Enter an amount\";\n    }\n    if (nextLeverage && nextLeverage.eq(0)) {\n      return \"Enter an amount\";\n    }\n    if (orderOption === STOP) {\n      if (!triggerPriceUsd || triggerPriceUsd.eq(0)) {\n        return \"Enter Price\";\n      }\n      if (position.isLong && triggerPriceUsd.lte(liquidationPrice)) {\n        return \"Price below Liq. Price\";\n      }\n      if (!position.isLong && triggerPriceUsd.gte(liquidationPrice)) {\n        return \"Price above Liq. Price\";\n      }\n\n      if (profitPrice && nextDelta.eq(0) && nextHasProfit) {\n        return \"Invalid price, see warning\";\n      }\n    }\n\n    if (!isClosing && position && position.size && fromAmount) {\n      if (position.size.sub(fromAmount).lt(expandDecimals(10, USD_DECIMALS))) {\n        return \"Leftover position below 10 USD\";\n      }\n    }\n\n    if (position && position.size && position.size.lt(fromAmount)) {\n      return \"Max close amount exceeded\";\n    }\n\n    if (nextLeverage && nextLeverage.lt(1.1 * BASIS_POINTS_DIVISOR)) {\n      return \"Min leverage: 1.1x\";\n    }\n\n    if (nextLeverage && nextLeverage.gt(30.5 * BASIS_POINTS_DIVISOR)) {\n      return \"Max leverage: 30.5x\";\n    }\n\n    if (hasPendingProfit && orderOption !== STOP && !isProfitWarningAccepted) {\n      return \"Forfeit profit not checked\";\n    }\n  };\n\n  const isPrimaryEnabled = () => {\n    const error = getError();\n    if (error) {\n      return false;\n    }\n    if (isSubmitting) {\n      return false;\n    }\n    if (needOrderBookApproval && isWaitingForPluginApproval) {\n      return false;\n    }\n    if (isPluginApproving) {\n      return false;\n    }\n    if (needPositionRouterApproval && isWaitingForPositionRouterApproval) {\n      return false;\n    }\n    if (isPositionRouterApproving) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const hasPendingProfit = MIN_PROFIT_TIME > 0 && position.delta.eq(0) && position.pendingDelta.gt(0);\n\n  const getPrimaryText = () => {\n    const error = getError();\n    if (error) {\n      return error;\n    }\n\n    if (orderOption === STOP) {\n      if (isSubmitting) return \"Creating Order...\";\n\n      if (needOrderBookApproval && isWaitingForPluginApproval) {\n        return \"Enabling Orders...\";\n      }\n      if (isPluginApproving) {\n        return \"Enabling Orders...\";\n      }\n      if (needOrderBookApproval) {\n        return \"Enable Orders\";\n      }\n\n      return \"Create Order\";\n    }\n\n    if (needPositionRouterApproval && isWaitingForPositionRouterApproval) {\n      return \"Enabling Leverage...\";\n    }\n\n    if (isPositionRouterApproving) {\n      return \"Enabling Leverage...\";\n    }\n\n    if (needPositionRouterApproval) {\n      return \"Enable Leverage\";\n    }\n\n    if (hasPendingProfit) {\n      return \"Close without profit\";\n    }\n    return isSubmitting ? \"Closing...\" : \"Close\";\n  };\n\n  const resetForm = () => {\n    setFromValue(\"\");\n    setIsProfitWarningAccepted(false);\n  };\n\n  useEffect(() => {\n    if (prevIsVisible !== isVisible) {\n      resetForm();\n    }\n  }, [prevIsVisible, isVisible]);\n\n  const onClickPrimary = async () => {\n    if (needOrderBookApproval) {\n      setOrdersToaOpen(true);\n      return;\n    }\n\n    if (needPositionRouterApproval) {\n      approvePositionRouter({\n        sentMsg: `Enable leverage sent.`,\n        failMsg: `Enable leverage failed.`,\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    const collateralTokenAddress = position.collateralToken.isNative\n      ? nativeTokenAddress\n      : position.collateralToken.address;\n    const indexTokenAddress = position.indexToken.isNative ? nativeTokenAddress : position.indexToken.address;\n\n    if (orderOption === STOP) {\n      const triggerAboveThreshold = triggerPriceUsd.gt(position.markPrice);\n\n      createDecreaseOrder(\n        chainId,\n        library,\n        indexTokenAddress,\n        sizeDelta,\n        collateralTokenAddress,\n        collateralDelta,\n        position.isLong,\n        triggerPriceUsd,\n        triggerAboveThreshold,\n        {\n          sentMsg: `Order submitted!`,\n          successMsg: `Order created!`,\n          failMsg: `Order creation failed.`,\n          setPendingTxns,\n        }\n      )\n        .then(() => {\n          setFromValue(\"\");\n          setIsVisible(false);\n        })\n        .finally(() => {\n          setIsSubmitting(false);\n        });\n      return;\n    }\n\n    const priceBasisPoints = position.isLong\n      ? BASIS_POINTS_DIVISOR - allowedSlippage\n      : BASIS_POINTS_DIVISOR + allowedSlippage;\n    const refPrice = position.isLong ? position.indexToken.minPrice : position.indexToken.maxPrice;\n    let priceLimit = refPrice.mul(priceBasisPoints).div(BASIS_POINTS_DIVISOR);\n    const minProfitExpiration = position.lastIncreasedTime + MIN_PROFIT_TIME;\n    const minProfitTimeExpired = parseInt(Date.now() / 1000) > minProfitExpiration;\n\n    if (nextHasProfit && !minProfitTimeExpired && !isProfitWarningAccepted) {\n      if ((position.isLong && priceLimit.lt(profitPrice)) || (!position.isLong && priceLimit.gt(profitPrice))) {\n        priceLimit = profitPrice;\n      }\n    }\n\n    const tokenAddress0 = collateralTokenAddress === AddressZero ? nativeTokenAddress : collateralTokenAddress;\n\n    const path = [tokenAddress0];\n\n    const isUnwrap = receiveToken.address === AddressZero;\n    const isSwap = receiveToken.address !== tokenAddress0;\n\n    if (isSwap) {\n      if (isUnwrap && tokenAddress0 !== nativeTokenAddress) {\n        path.push(nativeTokenAddress);\n      } else if (!isUnwrap) {\n        path.push(receiveToken.address);\n      }\n    }\n\n    const withdrawETH = isUnwrap;\n\n    const params = [\n      path, // _path\n      indexTokenAddress, // _indexToken\n      collateralDelta, // _collateralDelta\n      sizeDelta, // _sizeDelta\n      position.isLong, // _isLong\n      account, // _receiver\n      priceLimit, // _acceptablePrice\n      0, // _minOut\n      minExecutionFee, // _executionFee\n      withdrawETH, // _withdrawETH\n    ];\n\n    const successMsg = `Requested decrease of ${position.indexToken.symbol} ${\n      position.isLong ? \"Long\" : \"Short\"\n    } by ${formatAmount(sizeDelta, USD_DECIMALS, 2)} USD.`;\n\n    const contract = new ethers.Contract(positionRouterAddress, PositionRouter.abi, library.getSigner());\n\n    callContract(chainId, contract, \"createDecreasePosition\", params, {\n      value: minExecutionFee,\n      sentMsg: `Close submitted!`,\n      successMsg,\n      failMsg: `Close failed.`,\n      setPendingTxns,\n    })\n      .then(async (res) => {\n        setFromValue(\"\");\n        setIsVisible(false);\n\n        let nextSize = position.size.sub(sizeDelta);\n\n        pendingPositions[position.key] = {\n          updatedAt: Date.now(),\n          pendingChanges: {\n            size: nextSize,\n          },\n        };\n\n        setPendingPositions({ ...pendingPositions });\n      })\n      .finally(() => {\n        setIsSubmitting(false);\n      });\n  };\n\n  const renderExistingOrderWarning = useCallback(() => {\n    if (!existingOrder) {\n      return;\n    }\n    const indexToken = getTokenInfo(infoTokens, existingOrder.indexToken);\n    const sizeInToken = formatAmount(\n      existingOrder.sizeDelta.mul(PRECISION).div(existingOrder.triggerPrice),\n      USD_DECIMALS,\n      4,\n      true\n    );\n    const prefix = existingOrder.triggerAboveThreshold ? TRIGGER_PREFIX_ABOVE : TRIGGER_PREFIX_BELOW;\n    return (\n      <div className=\"Confirmation-box-warning\">\n        You have an active order to decrease {existingOrder.isLong ? \"Long\" : \"Short\"} {sizeInToken} {indexToken.symbol}{\" \"}\n        ($\n        {formatAmount(existingOrder.sizeDelta, USD_DECIMALS, 2, true)}) at {prefix}{\" \"}\n        {formatAmount(existingOrder.triggerPrice, USD_DECIMALS, 2, true)}\n      </div>\n    );\n  }, [existingOrder, infoTokens]);\n\n  function renderMinProfitWarning() {\n    if (MIN_PROFIT_TIME === 0) {\n      return null;\n    }\n\n    if (profitPrice && nextDelta.eq(0) && nextHasProfit) {\n      const minProfitExpiration = position.lastIncreasedTime + MIN_PROFIT_TIME;\n\n      if (orderOption === MARKET) {\n        return (\n          <div className=\"Confirmation-box-warning\">\n            Reducing the position at the current price will forfeit a pending profit of {deltaStr}. <br />\n            <br />\n            Profit price: {position.isLong ? \">\" : \"<\"} ${formatAmount(profitPrice, USD_DECIMALS, 2, true)}. This rule\n            applies for the next {getTimeRemaining(minProfitExpiration)}, until {formatDateTime(minProfitExpiration)}.\n          </div>\n        );\n      }\n      return (\n        <div className=\"Confirmation-box-warning\">\n          This order will forfeit a profit of {deltaStr}. <br />\n          Profit price: {position.isLong ? \">\" : \"<\"} ${formatAmount(profitPrice, USD_DECIMALS, 2, true)}. This rule\n          applies for the next {getTimeRemaining(minProfitExpiration)}, until {formatDateTime(minProfitExpiration)}.\n        </div>\n      );\n    }\n  }\n\n  const profitPrice = getProfitPrice(orderOption === MARKET ? position.markPrice : triggerPriceUsd, position);\n\n  let triggerPricePrefix;\n  if (triggerPriceUsd) {\n    triggerPricePrefix = triggerPriceUsd.gt(position.markPrice) ? TRIGGER_PREFIX_ABOVE : TRIGGER_PREFIX_BELOW;\n  }\n\n  const shouldShowExistingOrderWarning = false;\n\n  const trackClosePosition = (stage) => {\n    const eventName = getAnalyticsEventStage(stage);\n    try {\n      const size = convertStringToFloat(formatAmount(position.size, USD_DECIMALS, 2, true));\n      const collateral = convertStringToFloat(formatAmount(position.collateral, USD_DECIMALS, 2, true));\n      const nextCollateralValue = nextCollateral\n        ? convertStringToFloat(formatAmount(nextCollateral, USD_DECIMALS, 2, true))\n        : 0;\n      const leverage = convertStringToFloat(formatAmount(position.leverage, 4, 2, true));\n      const nextLeverageValue = nextLeverage ? convertStringToFloat(formatAmount(nextLeverage, 4, 2, true)) : 0;\n      const liqPrice = convertStringToFloat(formatAmount(liquidationPrice, USD_DECIMALS, 2, true));\n      const nextLiqPriceValue = nextLiquidationPrice\n        ? convertStringToFloat(formatAmount(nextLiquidationPrice, USD_DECIMALS, 2, true))\n        : 0;\n      const amountToPay = convertedAmountFormatted;\n      const allowedSlippageValue = convertStringToFloat(formatAmount(allowedSlippage, 2, 2));\n      const entryPrice = convertStringToFloat(formatAmount(position.averagePrice, USD_DECIMALS, 2, true));\n      const exitPrice = convertStringToFloat(formatAmount(position.markPrice, USD_DECIMALS, 2, true));\n      const borrowFeeValue = convertStringToFloat(formatAmount(fundingFee, USD_DECIMALS, 2, true));\n      const closingFee = convertStringToFloat(formatAmount(positionFee, USD_DECIMALS, 2, true));\n      const amountToReceiveUsd = convertStringToFloat(formatAmount(receiveAmount, USD_DECIMALS, 2, true));\n      const amountToReceive = convertStringToFloat(\n        formatAmount(convertedReceiveAmount, position.collateralToken.decimals, 4, true)\n      );\n      const [userBalances, tokenPrices, poolBalances] = getUserTokenBalances(infoTokens);\n\n      const traits = {\n        actionType: \"Close\",\n        position: position.isLong ? \"Long\" : \"Short\",\n        transactionType: orderOption === MARKET ? \"Market\" : \"Trigger\",\n        size: size,\n        collateral: collateral,\n        nextCollateral: nextCollateralValue,\n        leverage: leverage,\n        nextLeverage: nextLeverageValue,\n        keepOriginalLeverage: keepLeverage,\n        upToOnePercentSlippageEnabled: isHigherSlippageAllowed,\n        liqPrice: liqPrice,\n        nextLiqPrice: nextLiqPriceValue,\n        amountToPay: amountToPay,\n        allowedSlippage: allowedSlippageValue,\n        entryPrice: entryPrice,\n        exitPrice: exitPrice,\n        borrowFee: borrowFeeValue,\n        closingFee: closingFee,\n        pnlActual: deltaStr,\n        pnlPercentage: deltaPercentageStr,\n        amountToReceiveUsd: amountToReceiveUsd,\n        amountToReceive: amountToReceive,\n        tokenToReceive: position.collateralToken.symbol,\n        ...userBalances,\n        ...tokenPrices,\n        ...poolBalances,\n      };\n      trackAction && trackAction(eventName, traits);\n    } catch (err) {\n      console.error(`Unable to track ${eventName} event`, err);\n    }\n  };\n\n  return (\n    <div className=\"PositionEditor\">\n      {position && (\n        <Modal isVisible={isVisible} setIsVisible={setIsVisible} label={title}>\n          {flagOrdersEnabled && (\n            <Tab\n              options={orderOptions}\n              option={orderOption}\n              optionLabels={orderOptionLabels}\n              onChange={onOrderOptionChange}\n            />\n          )}\n          <div className=\"Exchange-swap-section\">\n            <div className=\"Exchange-swap-section-top\">\n              <div className=\"muted\">\n                {convertedAmountFormatted && (\n                  <div className=\"Exchange-swap-usd\">\n                    Close: {convertedAmountFormatted} {position.collateralToken.symbol}\n                  </div>\n                )}\n                {!convertedAmountFormatted && \"Close\"}\n              </div>\n              {maxAmount && (\n                <div className=\"muted align-right clickable\" onClick={() => setFromValue(maxAmountFormattedFree)}>\n                  Max: {maxAmountFormatted}\n                </div>\n              )}\n            </div>\n            <div className=\"Exchange-swap-section-bottom\">\n              <div className=\"Exchange-swap-input-container\">\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  placeholder=\"0.0\"\n                  className=\"Exchange-swap-input\"\n                  value={fromValue}\n                  onChange={(e) => setFromValue(e.target.value)}\n                />\n                {fromValue !== maxAmountFormattedFree && (\n                  <div\n                    className=\"Exchange-swap-max\"\n                    onClick={() => {\n                      setFromValue(maxAmountFormattedFree);\n                    }}\n                  >\n                    MAX\n                  </div>\n                )}\n              </div>\n              <div className=\"PositionEditor-token-symbol\">USD</div>\n            </div>\n          </div>\n          {orderOption === STOP && (\n            <div className=\"Exchange-swap-section\">\n              <div className=\"Exchange-swap-section-top\">\n                <div className=\"muted\">Price</div>\n                <div\n                  className=\"muted align-right clickable\"\n                  onClick={() => {\n                    setTriggerPriceValue(formatAmountFree(position.markPrice, USD_DECIMALS, 2));\n                  }}\n                >\n                  Mark: {formatAmount(position.markPrice, USD_DECIMALS, 2, true)}\n                </div>\n              </div>\n              <div className=\"Exchange-swap-section-bottom\">\n                <div className=\"Exchange-swap-input-container\">\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    placeholder=\"0.0\"\n                    className=\"Exchange-swap-input\"\n                    value={triggerPriceValue}\n                    onChange={onTriggerPriceChange}\n                  />\n                </div>\n                <div className=\"PositionEditor-token-symbol\">USD</div>\n              </div>\n            </div>\n          )}\n          {renderMinProfitWarning()}\n          {shouldShowExistingOrderWarning && renderExistingOrderWarning()}\n          <div className=\"PositionEditor-info-box\">\n            <div className=\"Exchange-info-row PositionSeller-receive-row bottom-line\">\n              <div className=\"Exchange-info-label\">\n                Receive\n              </div>\n\n              {!isSwapAllowed && receiveToken && (\n                <div className=\"align-right PositionSelector-selected-receive-token\">\n                  {formatAmount(convertedReceiveAmount, receiveToken.decimals, 4, true)}&nbsp;{receiveToken.symbol} ($\n                  {formatAmount(receiveAmount, USD_DECIMALS, 2, true)})\n                </div>\n              )}\n\n              {isSwapAllowed && receiveToken && (\n                <div className=\"align-right\">\n                  <TokenSelector\n                    // Scroll lock lead to side effects\n                    // if it applied on modal inside another modal\n                    disableBodyScrollLock={true}\n                    className={cx(\"PositionSeller-token-selector\", {\n                      warning: isNotEnoughReceiveTokenLiquidity || isCollateralPoolCapacityExceeded,\n                    })}\n                    label={\"Receive\"}\n                    showBalances={false}\n                    chainId={chainId}\n                    tokenAddress={receiveToken.address}\n                    onSelectToken={(token) => {\n                      setSwapToToken(token);\n                      setSavedReceiveTokenAddress(token.address);\n                    }}\n                    tokens={toTokens}\n                    getTokenState={(tokenOptionInfo) => {\n                      if (!shouldSwap(collateralToken, tokenOptionInfo)) {\n                        return;\n                      }\n\n                      const convertedTokenAmount = getTokenAmountFromUsd(\n                        infoTokens,\n                        tokenOptionInfo.address,\n                        receiveAmount\n                      );\n\n                      const isNotEnoughLiquidity =\n                        tokenOptionInfo.availableAmount.lt(convertedTokenAmount) ||\n                        tokenOptionInfo.bufferAmount.gt(tokenOptionInfo.poolAmount.sub(convertedTokenAmount));\n\n                      if (isNotEnoughLiquidity) {\n                        const { maxIn, maxOut, maxInUsd, maxOutUsd } = getSwapLimits(\n                          infoTokens,\n                          collateralToken.address,\n                          tokenOptionInfo.address\n                        );\n\n                        const collateralInfo = getTokenInfo(infoTokens, collateralToken.address);\n\n                        return {\n                          disabled: true,\n                          message: (\n                            <div>\n                              Insufficient Available Liquidity to swap to {tokenOptionInfo.symbol}:\n                              <br />\n                              <br />\n                              <TooltipRow\n                                label={`Max ${collateralInfo.symbol} in`}\n                                value={[\n                                  `${formatAmount(maxIn, collateralInfo.decimals, 0, true)} ${collateralInfo.symbol}`,\n                                  `($${formatAmount(maxInUsd, USD_DECIMALS, 0, true)})`,\n                                ]}\n                              />\n                              <br />\n                              <br />\n                              Max {tokenOptionInfo.symbol} out:{\" \"}\n                              {formatAmount(maxOut, tokenOptionInfo.decimals, 2, true)} {tokenOptionInfo.symbol}\n                              <br />\n                              (${formatAmount(maxOutUsd, USD_DECIMALS, 2, true)})\n                            </div>\n                          ),\n                        };\n                      }\n                    }}\n                    infoTokens={infoTokens}\n                    showTokenImgInDropdown={true}\n                    selectedTokenLabel={\n                      <span className=\"PositionSelector-selected-receive-token\">\n                        {formatAmount(convertedReceiveAmount, receiveToken.decimals, 4, true)}&nbsp;\n                        {receiveToken.symbol} (${formatAmount(receiveAmount, USD_DECIMALS, 2, true)})\n                      </span>\n                    }\n                  />\n                </div>\n              )}\n            </div>\n            {hasPendingProfit && orderOption !== STOP && (\n              <div className=\"PositionEditor-accept-profit-warning\">\n                <Checkbox isChecked={isProfitWarningAccepted} setIsChecked={setIsProfitWarningAccepted}>\n                  <span className=\"muted\">Forfeit profit</span>\n                </Checkbox>\n              </div>\n            )}\n            <div className=\"PositionEditor-keep-leverage-settings\">\n              <Checkbox isChecked={keepLeverage} setIsChecked={setKeepLeverage}>\n                <span className=\"muted\">Keep leverage at {formatAmount(position.leverage, 4, 2)}x</span>\n              </Checkbox>\n            </div>\n            {orderOption === MARKET && (\n              <div className=\"PositionEditor-allow-higher-slippage\">\n                <Checkbox isChecked={isHigherSlippageAllowed} setIsChecked={setIsHigherSlippageAllowed}>\n                  <span className=\"muted\">Allow up to 1% slippage</span>\n                </Checkbox>\n              </div>\n            )}\n            {orderOption === MARKET && (\n              <div>\n                <ExchangeInfoRow label=\"Allowed Slippage\">\n                  <Tooltip\n                    handle={`${formatAmount(allowedSlippage, 2, 2)}%`}\n                    position=\"right-bottom\"\n                    renderContent={() => {\n                      return (\n                        <>\n                          You can change this in the settings menu on the top right of the page.\n                          <br />\n                          <br />\n                          Note that a low allowed slippage, e.g. less than 0.5%, may result in failed orders if prices\n                          are volatile.\n                        </>\n                      );\n                    }}\n                  />\n                </ExchangeInfoRow>\n              </div>\n            )}\n            {orderOption === STOP && (\n              <div className=\"Exchange-info-row\">\n                <div className=\"Exchange-info-label\">Trigger Price</div>\n                <div className=\"align-right\">\n                  {!triggerPriceUsd && \"-\"}\n                  {triggerPriceUsd && `${triggerPricePrefix} ${formatAmount(triggerPriceUsd, USD_DECIMALS, 2, true)}`}\n                </div>\n              </div>\n            )}\n            <div className=\"Exchange-info-row\">\n              <div className=\"Exchange-info-label\">Entry Price</div>\n              <div className=\"align-right\">${formatAmount(position.averagePrice, USD_DECIMALS, 2, true)}</div>\n            </div>\n            <div className=\"Exchange-info-row\">\n              <div className=\"Exchange-info-label\">Exit Price</div>\n              <div className=\"align-right\">${formatAmount(position.markPrice, USD_DECIMALS, 2, true)}</div>\n            </div>\n            <div className=\"Exchange-info-row\">\n              <div className=\"Exchange-info-label\">Liq. Price</div>\n              <div className=\"align-right\">\n                {isClosing && orderOption !== STOP && \"-\"}\n                {(!isClosing || orderOption === STOP) && (\n                  <div>\n                    {(!nextLiquidationPrice || nextLiquidationPrice.eq(liquidationPrice)) && (\n                      <div>{`$${formatAmount(liquidationPrice, USD_DECIMALS, 2, true)}`}</div>\n                    )}\n                    {nextLiquidationPrice && !nextLiquidationPrice.eq(liquidationPrice) && (\n                      <div>\n                        <div className=\"inline-block muted\">\n                          ${formatAmount(liquidationPrice, USD_DECIMALS, 2, true)}\n                          <BsArrowRight className=\"transition-arrow\" />\n                        </div>\n                        ${formatAmount(nextLiquidationPrice, USD_DECIMALS, 2, true)}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n            <div className=\"Exchange-info-row top-line\">\n              <div className=\"Exchange-info-label\">Size</div>\n              <div className=\"align-right\">\n                {position && position.size && fromAmount && (\n                  <div>\n                    <div className=\"inline-block muted\">\n                      ${formatAmount(position.size, USD_DECIMALS, 2, true)}\n                      <BsArrowRight className=\"transition-arrow\" />\n                    </div>\n                    ${formatAmount(position.size.sub(fromAmount), USD_DECIMALS, 2, true)}\n                  </div>\n                )}\n                {position && position.size && !fromAmount && (\n                  <div>${formatAmount(position.size, USD_DECIMALS, 2, true)}</div>\n                )}\n              </div>\n            </div>\n            <div className=\"Exchange-info-row\">\n              <div className=\"Exchange-info-label\">Collateral</div>\n              <div className=\"align-right\">\n                {nextCollateral && !nextCollateral.eq(position.collateral) ? (\n                  <div>\n                    <div className=\"inline-block muted\">\n                      ${formatAmount(position.collateral, USD_DECIMALS, 2, true)}\n                      <BsArrowRight className=\"transition-arrow\" />\n                    </div>\n                    ${formatAmount(nextCollateral, USD_DECIMALS, 2, true)}\n                  </div>\n                ) : (\n                  `$${formatAmount(position.collateral, USD_DECIMALS, 4, true)}`\n                )}\n              </div>\n            </div>\n            {!keepLeverage && (\n              <div className=\"Exchange-info-row\">\n                <div className=\"Exchange-info-label\">Leverage</div>\n                <div className=\"align-right\">\n                  {isClosing && \"-\"}\n                  {!isClosing && (\n                    <div>\n                      {!nextLeverage && <div>{formatAmount(position.leverage, 4, 2)}x</div>}\n                      {nextLeverage && (\n                        <div>\n                          <div className=\"inline-block muted\">\n                            {formatAmount(position.leverage, 4, 2)}x\n                            <BsArrowRight className=\"transition-arrow\" />\n                          </div>\n                          {formatAmount(nextLeverage, 4, 2)}x\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            <div className=\"Exchange-info-row\">\n              <div className=\"Exchange-info-label\">PnL</div>\n              <div className=\"align-right\">\n                {deltaStr} ({deltaPercentageStr})\n              </div>\n            </div>\n            <div className=\"Exchange-info-row top-line\">\n              <div className=\"Exchange-info-label\">Borrow Fee</div>\n              <div className=\"align-right\">${formatAmount(fundingFee, USD_DECIMALS, 2, true)}</div>\n            </div>\n            <div className=\"Exchange-info-row\">\n              <div className=\"Exchange-info-label\">Closing Fee</div>\n              <div className=\"align-right\">\n                {positionFee && `$${formatAmount(positionFee, USD_DECIMALS, 2, true)}`}\n                {!positionFee && \"-\"}\n              </div>\n            </div>\n            <div className=\"Exchange-info-row\">\n              <div className=\"Exchange-info-label\">\n                Fees\n              </div>\n              <div className=\"align-right\">\n                <Tooltip\n                  position=\"right-top\"\n                  className=\"PositionSeller-fees-tooltip\"\n                  handle={\n                    <div>\n                      {totalFees ? `$${formatAmount(totalFees.add(executionFeeUsd), USD_DECIMALS, 2, true)}` : \"-\"}\n                    </div>\n                  }\n                  renderContent={() => (\n                    <div>\n                      {fundingFee && (\n                        <TooltipRow label=\"Borrow fee\" value={formatAmount(fundingFee, USD_DECIMALS, 2, true)} />\n                      )}\n\n                      {positionFee && (\n                        <TooltipRow label=\"Closing fee\" value={formatAmount(positionFee, USD_DECIMALS, 2, true)} />\n                      )}\n\n                      {swapFee && (\n                        <TooltipRow\n                          label=\"Swap fee\"\n                          showDollar={false}\n                          value={`${formatAmount(swapFeeToken, collateralToken.decimals, 5)} ${collateralToken.symbol}\n                           ($${formatAmount(swapFee, USD_DECIMALS, 2, true)})`}\n                        />\n                      )}\n\n                      <TooltipRow\n                        label=\"Execution fee\"\n                        showDollar={false}\n                        value={`${formatAmount(executionFee, 18, 5, true)} ${nativeTokenSymbol} ($${formatAmount(\n                          executionFeeUsd,\n                          USD_DECIMALS,\n                          2\n                        )})`}\n                      />\n\n                      <br />\n\n                      <div className=\"PositionSeller-fee-item\">\n                        <a href=\"https://swaps.docs.mycelium.xyz/protocol-design/trading/fees\" target=\"_blank\" rel=\"noopener noreferrer\">\n                          More Info\n                        </a>{\" \"}\n                        about fees.\n                      </div>\n                    </div>\n                  )}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"Exchange-swap-button-container\">\n            <button\n              className=\"App-cta Exchange-swap-button\"\n              onClick={() => {\n                const stage = getPrimaryText() === \"Approve\" ? 1 : 2;\n                trackClosePosition(stage);\n                onClickPrimary();\n              }}\n              disabled={!isPrimaryEnabled()}\n            >\n              {getPrimaryText()}\n            </button>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n}\n","C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\PositionEditor.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\OrdersToa.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\utils\\analytics.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ConfirmationBox.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeInfoRow.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeHeader\\index.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeAdvancedTVChart\\index.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Tooltip\\TooltipRow.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ChartTokenSelector.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\utils\\tokens.ts",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Tooltip\\Tooltip.styles.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeHeader\\ChartToggle\\index.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\Api\\TradingView\\index.js",[],"C:\\Users\\rober\\Documents\\swaps-client\\src\\components\\Exchange\\ExchangeHeader\\ChartToggle\\ChartToggle.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\index.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\reportWebVitals.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\App.js",["1068","1069"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\segmentAnalytics.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Helpers.js",["1070","1071","1072"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Addresses.js",["1073"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\data\\Tokens.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Stake\\StakeV2.js",["1074","1075","1076","1077","1078","1079","1080","1081","1082","1083"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\OrdersOverview\\OrdersOverview.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Exchange\\Exchange.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\PositionsOverview\\PositionsOverview.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\SellMlp\\SellMlp.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Dashboard\\DashboardV2.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Actions\\Actions.js",["1084","1085","1086"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Rewards\\Rewards.js",["1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103","1104","1105"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\BuyMlp\\BuyMlp.js",["1106","1107","1108","1109"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\PageNotFound\\PageNotFound.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\ConsentModal\\ConsentModal.js",["1110","1111","1112"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Navigation\\MobileNav.js",["1113","1114"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\NetworkSelector\\NetworkSelector.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Checkbox\\Checkbox.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\Referrals.js",["1115","1116","1117","1118","1119","1120","1121","1122","1123","1124","1125","1126","1127","1128","1129","1130","1131","1132","1133","1134","1135","1136","1137"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Modal\\Modal.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\AddressDropdown\\AddressDropdown.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Common\\Button.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\EventToast\\useEventToast.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Navigation\\Sidebar\\Sidebar.js",["1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\EventToast\\EventToastContainer.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\AppDropdown\\AppDropdown.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Navigation\\LinkDropdown\\LinkDropdown.js",["1151","1152","1153","1154"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\config\\localstorage.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\hooks\\useInfoTokens.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\hooks\\useRouteQuery.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Api\\referrals.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Tooltip\\ComingSoon.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Tooltip\\Tooltip.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Stake\\MlpPriceChart.js",["1155"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Stake\\StakeV2Styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Constants.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Common\\SEO.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Stake\\ClaimModal.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Navigation\\LinkDropdown\\LinkDropdown.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\AppDropdown\\presets.js",["1156","1157","1158"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\AppDropdown\\AppDropdown.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Navigation\\Sidebar\\Sidebar.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\EventToast\\EventToast.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Toggle\\Toggle.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\TradingCompBanner.js",["1159"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\utils\\common.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\hooks\\useOutsideClick.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\config\\events.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\config\\referrals.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\EventToast\\AnnouncementIcon.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Api\\index.js",["1160","1161"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\TradingCompBanner.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\config\\links.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\lib\\index.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Api\\prices.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\lib\\servers.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Api\\common.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\lib\\swr\\index.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\lib\\swr\\contractFetcher.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Toggle\\Toggle.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\ReferralLeaderboard.js",["1162","1163"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\ReferralCodesTable.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\AccountBanner.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\ReferralRewards.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\TraderRebateStats.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\EnterCodeModal.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\CreateCodeModal.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\Referrals.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Navigation\\MobileNav.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\ViewSwitchTriple\\ViewSwitchTriple.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Rewards\\Rewards.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Rewards\\TraderRewards.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Rewards\\Leaderboard.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\TradeHistory.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\OrdersList.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\PositionsList.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Dashboard\\AssetDropdown.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\data\\Fees.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\RewardsRoundSelect\\RewardsRoundSelect.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Mlp\\MlpSwap.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\hooks\\useLockBodyScroll.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\ViewSwitch\\ViewSwitch.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeWalletTokens.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Tab\\Tab.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeTVChart.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\SwapBox.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\presets.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Shared.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\views\\Referrals\\ReferralLeaderboard.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\ViewSwitchTriple\\ViewSwitchTriple.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\OrderEditor.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\PositionSeller.js",["1164"],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\PositionEditor.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\OrdersToa.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\RewardsRoundSelect\\RewardsRoundSelect.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\utils\\referrals.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\hooks\\useDebounce.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\ViewSwitch\\ViewSwitch.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\TokenSelector.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\BuyInputSection\\BuyInputSection.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\LeverageInput.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ConfirmationBox.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeInfoRow.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\utils\\analytics.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeHeader\\index.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeAdvancedTVChart\\index.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Tooltip\\TooltipRow.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\utils\\tokens.ts",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ChartTokenSelector.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Tooltip\\Tooltip.styles.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeHeader\\ChartToggle\\index.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\Api\\TradingView\\index.js",[],"C:\\Users\\rober\\Documents\\copiaswaps-client\\swaps-client\\src\\components\\Exchange\\ExchangeHeader\\ChartToggle\\ChartToggle.styles.js",[],{"ruleId":"1165","replacedBy":"1166"},{"ruleId":"1167","replacedBy":"1168"},{"ruleId":"1169","severity":1,"message":"1170","line":62,"column":8,"nodeType":"1171","messageId":"1172","endLine":62,"endColumn":17},{"ruleId":"1169","severity":1,"message":"1173","line":462,"column":9,"nodeType":"1171","messageId":"1172","endLine":462,"endColumn":22},{"ruleId":"1169","severity":1,"message":"1174","line":21,"column":8,"nodeType":"1171","messageId":"1172","endLine":21,"endColumn":25},{"ruleId":"1169","severity":1,"message":"1175","line":23,"column":10,"nodeType":"1171","messageId":"1172","endLine":23,"endColumn":25},{"ruleId":"1169","severity":1,"message":"1176","line":25,"column":3,"nodeType":"1171","messageId":"1172","endLine":25,"endColumn":29},{"ruleId":"1169","severity":1,"message":"1177","line":1,"column":10,"nodeType":"1171","messageId":"1172","endLine":1,"endColumn":25},{"ruleId":"1169","severity":1,"message":"1178","line":2,"column":10,"nodeType":"1171","messageId":"1172","endLine":2,"endColumn":14},{"ruleId":"1169","severity":1,"message":"1179","line":52,"column":8,"nodeType":"1171","messageId":"1172","endLine":52,"endColumn":17},{"ruleId":"1169","severity":1,"message":"1180","line":53,"column":8,"nodeType":"1171","messageId":"1172","endLine":53,"endColumn":17},{"ruleId":"1169","severity":1,"message":"1181","line":61,"column":8,"nodeType":"1171","messageId":"1172","endLine":61,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1182","line":478,"column":9,"nodeType":"1171","messageId":"1172","endLine":478,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1183","line":643,"column":9,"nodeType":"1171","messageId":"1172","endLine":643,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1184","line":665,"column":9,"nodeType":"1171","messageId":"1172","endLine":665,"endColumn":29},{"ruleId":"1169","severity":1,"message":"1185","line":673,"column":9,"nodeType":"1171","messageId":"1172","endLine":673,"endColumn":26},{"ruleId":"1169","severity":1,"message":"1186","line":681,"column":9,"nodeType":"1171","messageId":"1172","endLine":681,"endColumn":34},{"ruleId":"1169","severity":1,"message":"1187","line":710,"column":9,"nodeType":"1171","messageId":"1172","endLine":710,"endColumn":35},{"ruleId":"1169","severity":1,"message":"1188","line":10,"column":10,"nodeType":"1171","messageId":"1172","endLine":10,"endColumn":22},{"ruleId":"1169","severity":1,"message":"1189","line":13,"column":10,"nodeType":"1171","messageId":"1172","endLine":13,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1190","line":22,"column":7,"nodeType":"1171","messageId":"1172","endLine":22,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1191","line":19,"column":8,"nodeType":"1171","messageId":"1172","endLine":19,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1192","line":20,"column":8,"nodeType":"1171","messageId":"1172","endLine":20,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1193","line":28,"column":8,"nodeType":"1171","messageId":"1172","endLine":28,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1194","line":29,"column":10,"nodeType":"1171","messageId":"1172","endLine":29,"endColumn":23},{"ruleId":"1169","severity":1,"message":"1195","line":49,"column":11,"nodeType":"1171","messageId":"1172","endLine":49,"endColumn":24},{"ruleId":"1169","severity":1,"message":"1196","line":53,"column":11,"nodeType":"1171","messageId":"1172","endLine":53,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1197","line":55,"column":25,"nodeType":"1171","messageId":"1172","endLine":55,"endColumn":41},{"ruleId":"1169","severity":1,"message":"1198","line":60,"column":10,"nodeType":"1171","messageId":"1172","endLine":60,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1199","line":61,"column":10,"nodeType":"1171","messageId":"1172","endLine":61,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1200","line":62,"column":10,"nodeType":"1171","messageId":"1172","endLine":62,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1201","line":138,"column":10,"nodeType":"1171","messageId":"1172","endLine":138,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1202","line":139,"column":9,"nodeType":"1171","messageId":"1172","endLine":139,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1203","line":211,"column":5,"nodeType":"1171","messageId":"1172","endLine":211,"endColumn":24},{"ruleId":"1169","severity":1,"message":"1204","line":212,"column":5,"nodeType":"1171","messageId":"1172","endLine":212,"endColumn":25},{"ruleId":"1169","severity":1,"message":"1205","line":228,"column":7,"nodeType":"1171","messageId":"1172","endLine":228,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1206","line":232,"column":9,"nodeType":"1171","messageId":"1172","endLine":232,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1207","line":272,"column":9,"nodeType":"1171","messageId":"1172","endLine":272,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1208","line":320,"column":9,"nodeType":"1171","messageId":"1172","endLine":320,"endColumn":22},{"ruleId":"1169","severity":1,"message":"1209","line":323,"column":5,"nodeType":"1171","messageId":"1172","endLine":323,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1178","line":2,"column":10,"nodeType":"1171","messageId":"1172","endLine":2,"endColumn":14},{"ruleId":"1169","severity":1,"message":"1210","line":4,"column":8,"nodeType":"1171","messageId":"1172","endLine":4,"endColumn":15},{"ruleId":"1169","severity":1,"message":"1211","line":15,"column":10,"nodeType":"1171","messageId":"1172","endLine":15,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1212","line":16,"column":9,"nodeType":"1171","messageId":"1172","endLine":16,"endColumn":26},{"ruleId":"1169","severity":1,"message":"1213","line":10,"column":3,"nodeType":"1171","messageId":"1172","endLine":10,"endColumn":15},{"ruleId":"1169","severity":1,"message":"1214","line":23,"column":8,"nodeType":"1171","messageId":"1172","endLine":23,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1215","line":3,"column":8,"nodeType":"1171","messageId":"1172","endLine":3,"endColumn":13},{"ruleId":"1169","severity":1,"message":"1216","line":8,"column":9,"nodeType":"1171","messageId":"1172","endLine":8,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1217","line":14,"column":9,"nodeType":"1171","messageId":"1172","endLine":14,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1218","line":22,"column":8,"nodeType":"1171","messageId":"1172","endLine":22,"endColumn":24},{"ruleId":"1169","severity":1,"message":"1219","line":23,"column":8,"nodeType":"1171","messageId":"1172","endLine":23,"endColumn":25},{"ruleId":"1169","severity":1,"message":"1220","line":24,"column":8,"nodeType":"1171","messageId":"1172","endLine":24,"endColumn":23},{"ruleId":"1169","severity":1,"message":"1221","line":25,"column":8,"nodeType":"1171","messageId":"1172","endLine":25,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1222","line":26,"column":8,"nodeType":"1171","messageId":"1172","endLine":26,"endColumn":26},{"ruleId":"1169","severity":1,"message":"1223","line":42,"column":8,"nodeType":"1171","messageId":"1172","endLine":42,"endColumn":27},{"ruleId":"1169","severity":1,"message":"1196","line":92,"column":11,"nodeType":"1171","messageId":"1172","endLine":92,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1224","line":97,"column":25,"nodeType":"1171","messageId":"1172","endLine":97,"endColumn":36},{"ruleId":"1169","severity":1,"message":"1197","line":104,"column":25,"nodeType":"1171","messageId":"1172","endLine":104,"endColumn":41},{"ruleId":"1169","severity":1,"message":"1206","line":110,"column":9,"nodeType":"1171","messageId":"1172","endLine":110,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1225","line":127,"column":12,"nodeType":"1171","messageId":"1172","endLine":127,"endColumn":23},{"ruleId":"1169","severity":1,"message":"1226","line":262,"column":9,"nodeType":"1171","messageId":"1172","endLine":262,"endColumn":32},{"ruleId":"1169","severity":1,"message":"1227","line":274,"column":9,"nodeType":"1171","messageId":"1172","endLine":274,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1228","line":277,"column":5,"nodeType":"1171","messageId":"1172","endLine":277,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1229","line":279,"column":7,"nodeType":"1171","messageId":"1172","endLine":279,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1230","line":281,"column":7,"nodeType":"1171","messageId":"1172","endLine":281,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1231","line":282,"column":7,"nodeType":"1171","messageId":"1172","endLine":282,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1232","line":284,"column":7,"nodeType":"1171","messageId":"1172","endLine":284,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1205","line":310,"column":7,"nodeType":"1171","messageId":"1172","endLine":310,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1233","line":316,"column":5,"nodeType":"1171","messageId":"1172","endLine":316,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1208","line":319,"column":9,"nodeType":"1171","messageId":"1172","endLine":319,"endColumn":22},{"ruleId":"1169","severity":1,"message":"1209","line":322,"column":5,"nodeType":"1171","messageId":"1172","endLine":322,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1234","line":325,"column":9,"nodeType":"1171","messageId":"1172","endLine":325,"endColumn":41},{"ruleId":"1169","severity":1,"message":"1235","line":2,"column":29,"nodeType":"1171","messageId":"1172","endLine":2,"endColumn":43},{"ruleId":"1169","severity":1,"message":"1236","line":4,"column":8,"nodeType":"1171","messageId":"1172","endLine":4,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1237","line":34,"column":10,"nodeType":"1171","messageId":"1172","endLine":34,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1238","line":41,"column":9,"nodeType":"1171","messageId":"1172","endLine":41,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1239","line":3,"column":8,"nodeType":"1171","messageId":"1172","endLine":3,"endColumn":22},{"ruleId":"1169","severity":1,"message":"1240","line":4,"column":8,"nodeType":"1171","messageId":"1172","endLine":4,"endColumn":26},{"ruleId":"1169","severity":1,"message":"1241","line":5,"column":8,"nodeType":"1171","messageId":"1172","endLine":5,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1178","line":6,"column":10,"nodeType":"1171","messageId":"1172","endLine":6,"endColumn":14},{"ruleId":"1169","severity":1,"message":"1242","line":7,"column":10,"nodeType":"1171","messageId":"1172","endLine":7,"endColumn":24},{"ruleId":"1169","severity":1,"message":"1243","line":60,"column":9,"nodeType":"1171","messageId":"1172","endLine":60,"endColumn":14},{"ruleId":"1169","severity":1,"message":"1244","line":70,"column":9,"nodeType":"1171","messageId":"1172","endLine":70,"endColumn":16},{"ruleId":"1169","severity":1,"message":"1178","line":3,"column":10,"nodeType":"1171","messageId":"1172","endLine":3,"endColumn":14},{"ruleId":"1169","severity":1,"message":"1245","line":14,"column":3,"nodeType":"1171","messageId":"1172","endLine":14,"endColumn":12},{"ruleId":"1169","severity":1,"message":"1246","line":16,"column":3,"nodeType":"1171","messageId":"1172","endLine":16,"endColumn":11},{"ruleId":"1169","severity":1,"message":"1247","line":17,"column":3,"nodeType":"1171","messageId":"1172","endLine":17,"endColumn":14},{"ruleId":"1169","severity":1,"message":"1248","line":18,"column":3,"nodeType":"1171","messageId":"1172","endLine":18,"endColumn":15},{"ruleId":"1169","severity":1,"message":"1249","line":19,"column":3,"nodeType":"1171","messageId":"1172","endLine":19,"endColumn":15},{"ruleId":"1169","severity":1,"message":"1250","line":20,"column":3,"nodeType":"1171","messageId":"1172","endLine":20,"endColumn":16},{"ruleId":"1169","severity":1,"message":"1251","line":21,"column":3,"nodeType":"1171","messageId":"1172","endLine":21,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1252","line":22,"column":3,"nodeType":"1171","messageId":"1172","endLine":22,"endColumn":13},{"ruleId":"1169","severity":1,"message":"1253","line":26,"column":28,"nodeType":"1171","messageId":"1172","endLine":26,"endColumn":41},{"ruleId":"1169","severity":1,"message":"1254","line":31,"column":28,"nodeType":"1171","messageId":"1172","endLine":31,"endColumn":42},{"ruleId":"1169","severity":1,"message":"1255","line":33,"column":28,"nodeType":"1171","messageId":"1172","endLine":33,"endColumn":41},{"ruleId":"1169","severity":1,"message":"1256","line":40,"column":8,"nodeType":"1171","messageId":"1172","endLine":40,"endColumn":15},{"ruleId":"1165","replacedBy":"1166"},{"ruleId":"1167","replacedBy":"1168"},{"ruleId":"1169","severity":1,"message":"1257","line":283,"column":7,"nodeType":"1171","messageId":"1172","endLine":283,"endColumn":25},{"ruleId":"1169","severity":1,"message":"1258","line":1,"column":28,"nodeType":"1171","messageId":"1172","endLine":1,"endColumn":33},{"ruleId":"1169","severity":1,"message":"1259","line":2,"column":28,"nodeType":"1171","messageId":"1172","endLine":2,"endColumn":35},{"ruleId":"1169","severity":1,"message":"1260","line":3,"column":28,"nodeType":"1171","messageId":"1172","endLine":3,"endColumn":42},{"ruleId":"1261","severity":1,"message":"1262","line":1312,"column":43,"nodeType":"1171","endLine":1312,"endColumn":63},{"ruleId":"1261","severity":1,"message":"1263","line":1316,"column":43,"nodeType":"1171","endLine":1316,"endColumn":63},{"ruleId":"1264","severity":1,"message":"1265","line":66,"column":95,"nodeType":"1266","messageId":"1267","endLine":66,"endColumn":97},{"ruleId":"1264","severity":1,"message":"1265","line":78,"column":96,"nodeType":"1266","messageId":"1267","endLine":78,"endColumn":98},{"ruleId":"1169","severity":1,"message":"1178","line":2,"column":10,"nodeType":"1171","messageId":"1172","endLine":2,"endColumn":14},{"ruleId":"1261","severity":1,"message":"1268","line":530,"column":6,"nodeType":"1269","endLine":530,"endColumn":58,"suggestions":"1270"},{"ruleId":"1169","severity":1,"message":"1170","line":62,"column":8,"nodeType":"1171","messageId":"1172","endLine":62,"endColumn":17},{"ruleId":"1169","severity":1,"message":"1173","line":462,"column":9,"nodeType":"1171","messageId":"1172","endLine":462,"endColumn":22},{"ruleId":"1169","severity":1,"message":"1174","line":21,"column":8,"nodeType":"1171","messageId":"1172","endLine":21,"endColumn":25},{"ruleId":"1169","severity":1,"message":"1175","line":23,"column":10,"nodeType":"1171","messageId":"1172","endLine":23,"endColumn":25},{"ruleId":"1169","severity":1,"message":"1176","line":25,"column":3,"nodeType":"1171","messageId":"1172","endLine":25,"endColumn":29},{"ruleId":"1169","severity":1,"message":"1177","line":1,"column":10,"nodeType":"1171","messageId":"1172","endLine":1,"endColumn":25},{"ruleId":"1169","severity":1,"message":"1178","line":2,"column":10,"nodeType":"1171","messageId":"1172","endLine":2,"endColumn":14},{"ruleId":"1169","severity":1,"message":"1179","line":52,"column":8,"nodeType":"1171","messageId":"1172","endLine":52,"endColumn":17},{"ruleId":"1169","severity":1,"message":"1180","line":53,"column":8,"nodeType":"1171","messageId":"1172","endLine":53,"endColumn":17},{"ruleId":"1169","severity":1,"message":"1181","line":61,"column":8,"nodeType":"1171","messageId":"1172","endLine":61,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1182","line":478,"column":9,"nodeType":"1171","messageId":"1172","endLine":478,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1183","line":643,"column":9,"nodeType":"1171","messageId":"1172","endLine":643,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1184","line":665,"column":9,"nodeType":"1171","messageId":"1172","endLine":665,"endColumn":29},{"ruleId":"1169","severity":1,"message":"1185","line":673,"column":9,"nodeType":"1171","messageId":"1172","endLine":673,"endColumn":26},{"ruleId":"1169","severity":1,"message":"1186","line":681,"column":9,"nodeType":"1171","messageId":"1172","endLine":681,"endColumn":34},{"ruleId":"1169","severity":1,"message":"1187","line":710,"column":9,"nodeType":"1171","messageId":"1172","endLine":710,"endColumn":35},{"ruleId":"1169","severity":1,"message":"1188","line":10,"column":10,"nodeType":"1171","messageId":"1172","endLine":10,"endColumn":22},{"ruleId":"1169","severity":1,"message":"1189","line":13,"column":10,"nodeType":"1171","messageId":"1172","endLine":13,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1190","line":22,"column":7,"nodeType":"1171","messageId":"1172","endLine":22,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1191","line":19,"column":8,"nodeType":"1171","messageId":"1172","endLine":19,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1192","line":20,"column":8,"nodeType":"1171","messageId":"1172","endLine":20,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1193","line":28,"column":8,"nodeType":"1171","messageId":"1172","endLine":28,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1194","line":29,"column":10,"nodeType":"1171","messageId":"1172","endLine":29,"endColumn":23},{"ruleId":"1169","severity":1,"message":"1195","line":49,"column":11,"nodeType":"1171","messageId":"1172","endLine":49,"endColumn":24},{"ruleId":"1169","severity":1,"message":"1196","line":53,"column":11,"nodeType":"1171","messageId":"1172","endLine":53,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1197","line":55,"column":25,"nodeType":"1171","messageId":"1172","endLine":55,"endColumn":41},{"ruleId":"1169","severity":1,"message":"1198","line":60,"column":10,"nodeType":"1171","messageId":"1172","endLine":60,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1199","line":61,"column":10,"nodeType":"1171","messageId":"1172","endLine":61,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1200","line":62,"column":10,"nodeType":"1171","messageId":"1172","endLine":62,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1201","line":138,"column":10,"nodeType":"1171","messageId":"1172","endLine":138,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1202","line":139,"column":9,"nodeType":"1171","messageId":"1172","endLine":139,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1203","line":211,"column":5,"nodeType":"1171","messageId":"1172","endLine":211,"endColumn":24},{"ruleId":"1169","severity":1,"message":"1204","line":212,"column":5,"nodeType":"1171","messageId":"1172","endLine":212,"endColumn":25},{"ruleId":"1169","severity":1,"message":"1205","line":228,"column":7,"nodeType":"1171","messageId":"1172","endLine":228,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1206","line":232,"column":9,"nodeType":"1171","messageId":"1172","endLine":232,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1207","line":272,"column":9,"nodeType":"1171","messageId":"1172","endLine":272,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1208","line":320,"column":9,"nodeType":"1171","messageId":"1172","endLine":320,"endColumn":22},{"ruleId":"1169","severity":1,"message":"1209","line":323,"column":5,"nodeType":"1171","messageId":"1172","endLine":323,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1178","line":2,"column":10,"nodeType":"1171","messageId":"1172","endLine":2,"endColumn":14},{"ruleId":"1169","severity":1,"message":"1210","line":4,"column":8,"nodeType":"1171","messageId":"1172","endLine":4,"endColumn":15},{"ruleId":"1169","severity":1,"message":"1211","line":15,"column":10,"nodeType":"1171","messageId":"1172","endLine":15,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1212","line":16,"column":9,"nodeType":"1171","messageId":"1172","endLine":16,"endColumn":26},{"ruleId":"1169","severity":1,"message":"1215","line":3,"column":8,"nodeType":"1171","messageId":"1172","endLine":3,"endColumn":13},{"ruleId":"1169","severity":1,"message":"1216","line":8,"column":9,"nodeType":"1171","messageId":"1172","endLine":8,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1217","line":14,"column":9,"nodeType":"1171","messageId":"1172","endLine":14,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1213","line":10,"column":3,"nodeType":"1171","messageId":"1172","endLine":10,"endColumn":15},{"ruleId":"1169","severity":1,"message":"1214","line":23,"column":8,"nodeType":"1171","messageId":"1172","endLine":23,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1218","line":22,"column":8,"nodeType":"1171","messageId":"1172","endLine":22,"endColumn":24},{"ruleId":"1169","severity":1,"message":"1219","line":23,"column":8,"nodeType":"1171","messageId":"1172","endLine":23,"endColumn":25},{"ruleId":"1169","severity":1,"message":"1220","line":24,"column":8,"nodeType":"1171","messageId":"1172","endLine":24,"endColumn":23},{"ruleId":"1169","severity":1,"message":"1221","line":25,"column":8,"nodeType":"1171","messageId":"1172","endLine":25,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1222","line":26,"column":8,"nodeType":"1171","messageId":"1172","endLine":26,"endColumn":26},{"ruleId":"1169","severity":1,"message":"1223","line":42,"column":8,"nodeType":"1171","messageId":"1172","endLine":42,"endColumn":27},{"ruleId":"1169","severity":1,"message":"1196","line":92,"column":11,"nodeType":"1171","messageId":"1172","endLine":92,"endColumn":18},{"ruleId":"1169","severity":1,"message":"1224","line":97,"column":25,"nodeType":"1171","messageId":"1172","endLine":97,"endColumn":36},{"ruleId":"1169","severity":1,"message":"1197","line":104,"column":25,"nodeType":"1171","messageId":"1172","endLine":104,"endColumn":41},{"ruleId":"1169","severity":1,"message":"1206","line":110,"column":9,"nodeType":"1171","messageId":"1172","endLine":110,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1225","line":127,"column":12,"nodeType":"1171","messageId":"1172","endLine":127,"endColumn":23},{"ruleId":"1169","severity":1,"message":"1226","line":262,"column":9,"nodeType":"1171","messageId":"1172","endLine":262,"endColumn":32},{"ruleId":"1169","severity":1,"message":"1227","line":274,"column":9,"nodeType":"1171","messageId":"1172","endLine":274,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1228","line":277,"column":5,"nodeType":"1171","messageId":"1172","endLine":277,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1229","line":279,"column":7,"nodeType":"1171","messageId":"1172","endLine":279,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1230","line":281,"column":7,"nodeType":"1171","messageId":"1172","endLine":281,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1231","line":282,"column":7,"nodeType":"1171","messageId":"1172","endLine":282,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1232","line":284,"column":7,"nodeType":"1171","messageId":"1172","endLine":284,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1205","line":310,"column":7,"nodeType":"1171","messageId":"1172","endLine":310,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1233","line":316,"column":5,"nodeType":"1171","messageId":"1172","endLine":316,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1208","line":319,"column":9,"nodeType":"1171","messageId":"1172","endLine":319,"endColumn":22},{"ruleId":"1169","severity":1,"message":"1209","line":322,"column":5,"nodeType":"1171","messageId":"1172","endLine":322,"endColumn":20},{"ruleId":"1169","severity":1,"message":"1234","line":325,"column":9,"nodeType":"1171","messageId":"1172","endLine":325,"endColumn":41},{"ruleId":"1169","severity":1,"message":"1178","line":3,"column":10,"nodeType":"1171","messageId":"1172","endLine":3,"endColumn":14},{"ruleId":"1169","severity":1,"message":"1245","line":14,"column":3,"nodeType":"1171","messageId":"1172","endLine":14,"endColumn":12},{"ruleId":"1169","severity":1,"message":"1246","line":16,"column":3,"nodeType":"1171","messageId":"1172","endLine":16,"endColumn":11},{"ruleId":"1169","severity":1,"message":"1247","line":17,"column":3,"nodeType":"1171","messageId":"1172","endLine":17,"endColumn":14},{"ruleId":"1169","severity":1,"message":"1248","line":18,"column":3,"nodeType":"1171","messageId":"1172","endLine":18,"endColumn":15},{"ruleId":"1169","severity":1,"message":"1249","line":19,"column":3,"nodeType":"1171","messageId":"1172","endLine":19,"endColumn":15},{"ruleId":"1169","severity":1,"message":"1250","line":20,"column":3,"nodeType":"1171","messageId":"1172","endLine":20,"endColumn":16},{"ruleId":"1169","severity":1,"message":"1251","line":21,"column":3,"nodeType":"1171","messageId":"1172","endLine":21,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1252","line":22,"column":3,"nodeType":"1171","messageId":"1172","endLine":22,"endColumn":13},{"ruleId":"1169","severity":1,"message":"1253","line":26,"column":28,"nodeType":"1171","messageId":"1172","endLine":26,"endColumn":41},{"ruleId":"1169","severity":1,"message":"1254","line":31,"column":28,"nodeType":"1171","messageId":"1172","endLine":31,"endColumn":42},{"ruleId":"1169","severity":1,"message":"1255","line":33,"column":28,"nodeType":"1171","messageId":"1172","endLine":33,"endColumn":41},{"ruleId":"1169","severity":1,"message":"1256","line":40,"column":8,"nodeType":"1171","messageId":"1172","endLine":40,"endColumn":15},{"ruleId":"1169","severity":1,"message":"1235","line":2,"column":29,"nodeType":"1171","messageId":"1172","endLine":2,"endColumn":43},{"ruleId":"1169","severity":1,"message":"1236","line":4,"column":8,"nodeType":"1171","messageId":"1172","endLine":4,"endColumn":19},{"ruleId":"1169","severity":1,"message":"1237","line":34,"column":10,"nodeType":"1171","messageId":"1172","endLine":34,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1238","line":41,"column":9,"nodeType":"1171","messageId":"1172","endLine":41,"endColumn":21},{"ruleId":"1169","severity":1,"message":"1257","line":283,"column":7,"nodeType":"1171","messageId":"1172","endLine":283,"endColumn":25},{"ruleId":"1169","severity":1,"message":"1258","line":1,"column":28,"nodeType":"1171","messageId":"1172","endLine":1,"endColumn":33},{"ruleId":"1169","severity":1,"message":"1259","line":2,"column":28,"nodeType":"1171","messageId":"1172","endLine":2,"endColumn":35},{"ruleId":"1169","severity":1,"message":"1260","line":3,"column":28,"nodeType":"1171","messageId":"1172","endLine":3,"endColumn":42},{"ruleId":"1169","severity":1,"message":"1178","line":2,"column":10,"nodeType":"1171","messageId":"1172","endLine":2,"endColumn":14},{"ruleId":"1261","severity":1,"message":"1262","line":1312,"column":43,"nodeType":"1171","endLine":1312,"endColumn":63},{"ruleId":"1261","severity":1,"message":"1263","line":1316,"column":43,"nodeType":"1171","endLine":1316,"endColumn":63},{"ruleId":"1264","severity":1,"message":"1265","line":66,"column":95,"nodeType":"1266","messageId":"1267","endLine":66,"endColumn":97},{"ruleId":"1264","severity":1,"message":"1265","line":78,"column":96,"nodeType":"1266","messageId":"1267","endLine":78,"endColumn":98},{"ruleId":"1261","severity":1,"message":"1268","line":530,"column":6,"nodeType":"1269","endLine":530,"endColumn":58,"suggestions":"1271"},"no-native-reassign",["1272"],"no-negated-in-lhs",["1273"],"no-unused-vars","'Dashboard' is defined but never used.","Identifier","unusedVar","'slideVariants' is assigned a value but never used.","'ComingSoonTooltip' is defined but never used.","'copyToClipboard' is defined but never used.","'REFERRAL_CODE_QUERY_PARAMS' is defined but never used.","'ARBITRUM_GOERLI' is defined but never used.","'Link' is defined but never used.","'mlp40Icon' is defined but never used.","'myc40Icon' is defined but never used.","'MlpPriceChart' is defined but never used.","'chainName' is assigned a value but never used.","'stakingApr' is assigned a value but never used.","'showMlpCompoundModal' is assigned a value but never used.","'showMlpClaimModal' is assigned a value but never used.","'showMycVesterDepositModal' is assigned a value but never used.","'showMycVesterWithdrawModal' is assigned a value but never used.","'formatAmount' is defined but never used.","'getToken' is defined but never used.","'USD_DECIMALS' is assigned a value but never used.","'TraderRewards' is defined but never used.","'Leaderboard' is defined but never used.","'ViewSwitch' is defined but never used.","'RoundDropdown' is defined but never used.","'connectWallet' is assigned a value but never used.","'ensName' is assigned a value but never used.","'setSelectedRound' is assigned a value but never used.","'isClaiming' is assigned a value but never used.","'nextRewards' is assigned a value but never used.","'claimDelay' is assigned a value but never used.","'middleRow' is assigned a value but never used.","'roundData' is assigned a value but never used.","'unclaimedRewardsUsd' is assigned a value but never used.","'totalRewardAmountUsd' is assigned a value but never used.","'rewardsMessage' is assigned a value but never used.","'switchView' is assigned a value but never used.","'handleClaim' is assigned a value but never used.","'isLatestRound' is assigned a value but never used.","'hasClaimedRound' is assigned a value but never used.","'MlpSwap' is defined but never used.","'isBuying' is assigned a value but never used.","'nativeTokenSymbol' is assigned a value but never used.","'SwitchButton' is defined but never used.","'poolsSmallImg' is defined but never used.","'close' is defined but never used.","'handleAccept' is assigned a value but never used.","'handleReject' is assigned a value but never used.","'ViewSwitchTriple' is defined but never used.","'TraderRebateStats' is defined but never used.","'ReferralRewards' is defined but never used.","'AccountBanner' is defined but never used.","'ReferralCodesTable' is defined but never used.","'ReferralLeaderboard' is defined but never used.","'tradersTier' is assigned a value but never used.","'handleClaim' is defined but never used.","'finalReferrerTotalStats' is assigned a value but never used.","'referrerTier' is assigned a value but never used.","'referrerRebates' is assigned a value but never used.","'referrerVolume' is assigned a value but never used.","'tradersVolume' is assigned a value but never used.","'tradersRebates' is assigned a value but never used.","'hasCreatedCode' is assigned a value but never used.","'timeTillRewards' is assigned a value but never used.","'handleSetIsEnterCodeModalVisible' is assigned a value but never used.","'DropdownButton' is defined but never used.","'chevronDown' is defined but never used.","'currentItem' is assigned a value but never used.","'handleToggle' is assigned a value but never used.","'ethMergeHeader' is defined but never used.","'ethMergeHeadermesh' is defined but never used.","'twitterIcon' is defined but never used.","'shareToTwitter' is defined but never used.","'event' is assigned a value but never used.","'onClose' is assigned a value but never used.","'LegalMenu' is defined but never used.","'EventBox' is defined but never used.","'EventHeader' is defined but never used.","'EventContent' is defined but never used.","'EventGraphic' is defined but never used.","'ViewNowButton' is defined but never used.","'EventDescription' is defined but never used.","'EventTitle' is defined but never used.","'DashboardIcon' is defined but never used.","'MycStakingIcon' is defined but never used.","'AnalyticsIcon' is defined but never used.","'graphic' is defined but never used.","'deltaPercentageStr' is assigned a value but never used.","'Pools' is defined but never used.","'Staking' is defined but never used.","'TokenMigration' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'cumulativeDistributedUsdPerMlp' variable from inside React Hook useMemo will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useMemo.","Assignments to the 'cumulativeDistributedEthPerMlp' variable from inside React Hook useMemo will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useMemo.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useMemo has a missing dependency: 'showPnlAfterFees'. Either include it or remove the dependency array.","ArrayExpression",["1274"],["1275"],"no-global-assign","no-unsafe-negation",{"desc":"1276","fix":"1277"},{"desc":"1276","fix":"1278"},"Update the dependencies array to be: [position, orderOption, triggerPriceUsd, showPnlAfterFees, fromAmount]",{"range":"1279","text":"1280"},{"range":"1281","text":"1280"},[16928,16980],"[position, orderOption, triggerPriceUsd, showPnlAfterFees, fromAmount]",[16928,16980]]