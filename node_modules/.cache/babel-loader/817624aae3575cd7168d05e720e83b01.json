{"ast":null,"code":"var _a;\n\nvar _b;\n\nimport { getGlobal } from '../../lib/get-global';\nvar env = getGlobal(); // The code below assumes the inspector extension will use Object.assign\n// to add the inspect interface on to this object reference (unless the\n// extension code ran first and has already set up the variable)\n\nexport var inspectorHost = (_a = (_b = env)['__SEGMENT_INSPECTOR__']) !== null && _a !== void 0 ? _a : _b['__SEGMENT_INSPECTOR__'] = {};","map":{"version":3,"sources":["../../../../src/core/inspector/index.ts"],"names":[],"mappings":";;;;AACA,SAAS,SAAT,QAA0B,sBAA1B;AAQA,IAAM,GAAG,GAAG,SAAS,EAArB,C,CAEA;AACA;AACA;;AACA,OAAO,IAAM,aAAa,GAA2B,CAAA,EAAA,GAAA,CAAA,EAAA,GAAE,GAAF,EACnD,uBADmD,CAAA,MAC5B,IAD4B,IAC5B,EAAA,KAAA,KAAA,CAD4B,GAC5B,EAD4B,GAC5B,EAAA,CAAvB,uBAAuB,CAAA,GACnB,EAFC","sourceRoot":"","sourcesContent":["var _a;\nvar _b;\nimport { getGlobal } from '../../lib/get-global';\nvar env = getGlobal();\n// The code below assumes the inspector extension will use Object.assign\n// to add the inspect interface on to this object reference (unless the\n// extension code ran first and has already set up the variable)\nexport var inspectorHost = ((_a = (_b = env)['__SEGMENT_INSPECTOR__']) !== null && _a !== void 0 ? _a : (_b['__SEGMENT_INSPECTOR__'] = {}));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}