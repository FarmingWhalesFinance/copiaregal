{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { ethers } from \"ethers\";\nimport { gql } from \"@apollo/client\";\nimport { useState, useEffect } from \"react\";\nimport { ARBITRUM, bigNumberify, isAddressZero, helperToast, getProvider, fetcher, ARBITRUM_GOERLI } from \"../Helpers\";\nimport { arbitrumReferralsGraphClient, arbitrumTestnetReferralsGraphClient } from \"./common\";\nimport { getContract } from \"../Addresses\";\nimport ReferralStorage from \"../abis/ReferralStorage.json\";\nimport { callContract } from \".\";\nimport useSWR from \"swr\";\nimport { MAX_REFERRAL_CODE_LENGTH } from \"../config/referrals\";\nconst ACTIVE_CHAINS = [ARBITRUM];\n\nfunction getGraphClient(chainId) {\n  if (chainId === ARBITRUM) {\n    return arbitrumReferralsGraphClient;\n  } else if (chainId === ARBITRUM_GOERLI) {\n    return arbitrumTestnetReferralsGraphClient;\n  }\n\n  throw new Error(`Unsupported chain ${chainId}`);\n}\n\nconst DISTRIBUTION_TYPE_REBATES = \"1\";\nconst DISTRIBUTION_TYPE_DISCOUNT = \"2\";\nexport function decodeReferralCode(hexCode) {\n  try {\n    return ethers.utils.parseBytes32String(hexCode);\n  } catch (ex) {\n    let code = \"\";\n    hexCode = hexCode.substring(2);\n\n    for (let i = 0; i < 32; i++) {\n      code += String.fromCharCode(parseInt(hexCode.substring(i * 2, i * 2 + 2), 16));\n    }\n\n    return code.trim();\n  }\n}\nexport function encodeReferralCode(code) {\n  let final = code.replace(/[^\\w\\s_]/g, \"\"); // replace everything other than numbers, string  and underscor to ''\n\n  if (final.length > MAX_REFERRAL_CODE_LENGTH) {\n    return ethers.constants.HashZero;\n  }\n\n  return ethers.utils.formatBytes32String(final);\n}\nexport async function validateReferralCodeExists(referralCode, chainId) {\n  const referralCodeBytes32 = encodeReferralCode(referralCode);\n  const referralCodeOwner = await getReferralCodeOwner(chainId, referralCodeBytes32);\n  return !isAddressZero(referralCodeOwner);\n}\nexport async function registerReferralCode(chainId, referralCode, _ref) {\n  let {\n    library,\n    ...props\n  } = _ref;\n  const referralStorageAddress = getContract(chainId, \"ReferralStorage\");\n  const contract = new ethers.Contract(referralStorageAddress, ReferralStorage.abi, library.getSigner());\n  return callContract(chainId, contract, \"registerCode\", [referralCode], { ...props\n  });\n}\nexport async function setTraderReferralCodeByUser(chainId, referralCode, _ref2) {\n  let {\n    library,\n    ...props\n  } = _ref2;\n  const referralStorageAddress = getContract(chainId, \"ReferralStorage\");\n  const contract = new ethers.Contract(referralStorageAddress, ReferralStorage.abi, library.getSigner());\n  const codeOwner = await contract.codeOwners(referralCode);\n\n  if (isAddressZero(codeOwner)) {\n    helperToast.error(\"Referral code does not exist\");\n    return new Promise((resolve, reject) => {\n      reject();\n    });\n  }\n\n  return callContract(chainId, contract, \"setTraderReferralCodeByUser\", [referralCode], { ...props\n  });\n}\nexport async function getReferralCodeOwner(chainId, referralCode) {\n  const referralStorageAddress = getContract(chainId, \"ReferralStorage\");\n  const provider = getProvider(null, chainId);\n  const contract = new ethers.Contract(referralStorageAddress, ReferralStorage.abi, provider);\n  const codeOwner = await contract.codeOwners(referralCode);\n  return codeOwner;\n}\nexport async function getReferralCodeTakenStatus(account, referralCode, chainId) {\n  const referralCodeBytes32 = encodeReferralCode(referralCode);\n  const ownerArbitrum = await getReferralCodeOwner(ARBITRUM, referralCodeBytes32);\n  const taken = !isAddressZero(ownerArbitrum) && (ownerArbitrum !== account || ownerArbitrum === account && chainId === ARBITRUM);\n  const referralCodeTakenInfo = {\n    taken,\n    ownerArbitrum\n  };\n\n  if (taken) {\n    return {\n      status: \"taken\",\n      info: referralCodeTakenInfo\n    };\n  }\n\n  return {\n    status: \"none\",\n    info: referralCodeTakenInfo\n  };\n}\n\nasync function getCodeOwnersData(chainId, account, codes) {\n  const referralCodeOwnerQuery = referralCode => gql(`{\n      referralCodes(where: {code: \"${referralCode}\"}) {\n        owner\n      }\n    }`);\n\n  return Promise.all(codes.map(async code => {\n    return getGraphClient(chainId).query({\n      query: referralCodeOwnerQuery(code)\n    }).then(_ref3 => {\n      var _data$referralCodes$;\n\n      let {\n        data\n      } = _ref3;\n      const owner = (_data$referralCodes$ = data.referralCodes[0]) === null || _data$referralCodes$ === void 0 ? void 0 : _data$referralCodes$.owner;\n      return {\n        code,\n        codeString: decodeReferralCode(code),\n        owner,\n        isTaken: !!owner,\n        isTakenByCurrentUser: owner && String(owner).toLowerCase() === String(account).toLowerCase()\n      };\n    });\n  }));\n}\n\nexport function useUserCodesOnAllChain(account) {\n  _s();\n\n  const [data, setData] = useState(null);\n  const query = gql(`{\n      referralCodes (\n      first: 1000,\n      where: {\n        owner: \"${(account || \"\").toLowerCase()}\"\n      }) {\n      code\n      }\n    }`);\n  useEffect(() => {\n    async function main() {\n      const [arbitrumCodes] = await Promise.all(ACTIVE_CHAINS.map(chainId => getGraphClient(chainId).query({\n        query\n      }).then(_ref4 => {\n        let {\n          data\n        } = _ref4;\n        return data.referralCodes.map(c => c.code);\n      })));\n      const codeOwnersOnArbitrum = await getCodeOwnersData(ARBITRUM, account, arbitrumCodes);\n      setData({\n        [ARBITRUM]: codeOwnersOnArbitrum.reduce((acc, cv) => {\n          acc[cv.code] = cv;\n          return acc;\n        }, {})\n      });\n    }\n\n    main();\n  }, [account, query]);\n  return data;\n}\n\n_s(useUserCodesOnAllChain, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");\n\nexport async function getCodeByAccount(account) {\n  const query = gql(`{\n      referralCodes (\n      first: 1000,\n      where: {\n        owner: \"${(account || \"\").toLowerCase()}\"\n      }) {\n      code\n      }\n    }`);\n  const [arbitrumCodes] = await Promise.all(ACTIVE_CHAINS.map(chainId => getGraphClient(chainId).query({\n    query\n  }).then(_ref5 => {\n    let {\n      data\n    } = _ref5;\n    return data.referralCodes.map(c => c.code);\n  })));\n  const codeOwnersOnArbitrum = await getCodeOwnersData(ARBITRUM, account, arbitrumCodes);\n  const data = {\n    [ARBITRUM]: codeOwnersOnArbitrum.reduce((acc, cv) => {\n      acc[cv.code] = cv;\n      return acc;\n    }, {})\n  };\n  return data;\n}\nexport function useUserReferralCode(library, chainId, account) {\n  _s2();\n\n  const referralStorageAddress = getContract(chainId, \"ReferralStorage\");\n  const {\n    data: userReferralCode,\n    mutate: mutateUserReferralCode\n  } = useSWR(account && [`ReferralStorage:traderReferralCodes`, chainId, referralStorageAddress, \"traderReferralCodes\", account], {\n    fetcher: fetcher(library, ReferralStorage)\n  });\n  return {\n    userReferralCode,\n    mutateUserReferralCode\n  };\n}\n\n_s2(useUserReferralCode, \"jaw4+CZUfUnM2WJxdhIb+pPoQD0=\", false, function () {\n  return [useSWR];\n});\n\nexport function useReferrerTier(library, chainId, account) {\n  _s3();\n\n  const referralStorageAddress = getContract(chainId, \"ReferralStorage\");\n  const {\n    data: referrerTier,\n    mutate: mutateReferrerTier\n  } = useSWR(account && [`ReferralStorage:referrerTiers`, chainId, referralStorageAddress, \"referrerTiers\", account], {\n    fetcher: fetcher(library, ReferralStorage)\n  });\n  return {\n    referrerTier,\n    mutateReferrerTier\n  };\n}\n\n_s3(useReferrerTier, \"KkCkgMVjHsT5JqvDIezNLWh2YcE=\", false, function () {\n  return [useSWR];\n});\n\nexport function useCodeOwner(library, chainId, account, code) {\n  _s4();\n\n  const referralStorageAddress = getContract(chainId, \"ReferralStorage\");\n  const {\n    data: codeOwner,\n    mutate: mutateCodeOwner\n  } = useSWR(account && code && [`ReferralStorage:codeOwners`, chainId, referralStorageAddress, \"codeOwners\", code], {\n    fetcher: fetcher(library, ReferralStorage)\n  });\n  return {\n    codeOwner,\n    mutateCodeOwner\n  };\n}\n\n_s4(useCodeOwner, \"0pAI/m2K++fq6YrTi2aRiJEinNU=\", false, function () {\n  return [useSWR];\n});\n\nexport function useReferralsData(chainId, account) {\n  _s5();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const ownerOnOtherChain = useUserCodesOnAllChain(account);\n  useEffect(() => {\n    if (!chainId || !account) {\n      setLoading(false);\n      return;\n    }\n\n    const startOfDayTimestamp = Math.floor(Math.floor(Date.now() / 1000) / 86400) * 86400;\n    const query = gql`\n      query referralData($typeIds: [String!]!, $account: String!, $timestamp: Int!, $referralTotalStatsId: String!) {\n        distributions(\n          first: 1000\n          orderBy: timestamp\n          orderDirection: desc\n          where: { receiver: $account, typeId_in: $typeIds }\n        ) {\n          receiver\n          amount\n          typeId\n          token\n          transactionHash\n          timestamp\n        }\n        referrerTotalStats: referrerStats(\n          first: 1000\n          orderBy: volume\n          orderDirection: desc\n          where: { period: total, referrer: $account }\n        ) {\n          referralCode\n          volume\n          trades\n          tradedReferralsCount\n          registeredReferralsCount\n          totalRebateUsd\n          discountUsd\n        }\n        referrerLastDayStats: referrerStats(\n          first: 1000\n          where: { period: daily, referrer: $account, timestamp: $timestamp }\n        ) {\n          referralCode\n          volume\n          trades\n          tradedReferralsCount\n          registeredReferralsCount\n          totalRebateUsd\n          discountUsd\n        }\n        referralCodes(first: 1000, where: { owner: $account }) {\n          code\n        }\n        referralTotalStats: referralStat(id: $referralTotalStatsId) {\n          volume\n          discountUsd\n        }\n        referrerTierInfo: referrer(id: $account) {\n          tierId\n          id\n          discountShare\n        }\n      }\n    `;\n    setLoading(true);\n    getGraphClient(chainId).query({\n      query,\n      variables: {\n        typeIds: [DISTRIBUTION_TYPE_REBATES, DISTRIBUTION_TYPE_DISCOUNT],\n        account: (account || \"\").toLowerCase(),\n        timestamp: startOfDayTimestamp,\n        referralTotalStatsId: account && `total:0:${account.toLowerCase()}`\n      }\n    }).then(res => {\n      const rebateDistributions = [];\n      const discountDistributions = [];\n      res.data.distributions.forEach(d => {\n        const item = {\n          timestamp: parseInt(d.timestamp),\n          transactionHash: d.transactionHash,\n          receiver: ethers.utils.getAddress(d.receiver),\n          amount: bigNumberify(d.amount),\n          typeId: d.typeId,\n          token: ethers.utils.getAddress(d.token)\n        };\n\n        if (d.typeId === DISTRIBUTION_TYPE_REBATES) {\n          rebateDistributions.push(item);\n        } else {\n          discountDistributions.push(item);\n        }\n      });\n\n      function prepareStatsItem(e) {\n        return {\n          volume: bigNumberify(e.volume),\n          trades: parseInt(e.trades),\n          tradedReferralsCount: parseInt(e.tradedReferralsCount),\n          registeredReferralsCount: parseInt(e.registeredReferralsCount),\n          totalRebateUsd: bigNumberify(e.totalRebateUsd),\n          discountUsd: bigNumberify(e.discountUsd),\n          referralCode: decodeReferralCode(e.referralCode),\n          ownerOnOtherChain: ownerOnOtherChain === null || ownerOnOtherChain === void 0 ? void 0 : ownerOnOtherChain[chainId][e.referralCode]\n        };\n      }\n\n      function getCumulativeStats() {\n        let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        return data.reduce((acc, cv) => {\n          acc.totalRebateUsd = acc.totalRebateUsd.add(cv.totalRebateUsd);\n          acc.volume = acc.volume.add(cv.volume);\n          acc.discountUsd = acc.discountUsd.add(cv.discountUsd);\n          acc.trades = acc.trades + cv.trades;\n          acc.tradedReferralsCount = acc.tradedReferralsCount + cv.tradedReferralsCount;\n          acc.registeredReferralsCount = acc.registeredReferralsCount + cv.registeredReferralsCount;\n          return acc;\n        }, {\n          totalRebateUsd: bigNumberify(0),\n          volume: bigNumberify(0),\n          discountUsd: bigNumberify(0),\n          trades: 0,\n          tradedReferralsCount: 0,\n          registeredReferralsCount: 0\n        });\n      }\n\n      let referrerTotalStats = res.data.referrerTotalStats.map(prepareStatsItem);\n      setData({\n        rebateDistributions,\n        discountDistributions,\n        referrerTotalStats,\n        referrerTierInfo: res.data.referrerTierInfo,\n        referrerLastDayStats: res.data.referrerLastDayStats.map(prepareStatsItem),\n        cumulativeStats: getCumulativeStats(referrerTotalStats),\n        codes: res.data.referralCodes.map(e => decodeReferralCode(e.code)),\n        referralTotalStats: res.data.referralTotalStats ? {\n          volume: bigNumberify(res.data.referralTotalStats.volume),\n          discountUsd: bigNumberify(res.data.referralTotalStats.discountUsd)\n        } : {\n          volume: bigNumberify(0),\n          discountUsd: bigNumberify(0)\n        }\n      });\n    }).catch(console.warn).finally(() => {\n      setLoading(false);\n    });\n  }, [setData, chainId, account, ownerOnOtherChain]);\n  return {\n    data: data || null,\n    loading\n  };\n}\n\n_s5(useReferralsData, \"CMbdTUs1+fWpTKjlAMo+RuYTjo4=\", false, function () {\n  return [useUserCodesOnAllChain];\n});","map":{"version":3,"names":["ethers","gql","useState","useEffect","ARBITRUM","bigNumberify","isAddressZero","helperToast","getProvider","fetcher","ARBITRUM_GOERLI","arbitrumReferralsGraphClient","arbitrumTestnetReferralsGraphClient","getContract","ReferralStorage","callContract","useSWR","MAX_REFERRAL_CODE_LENGTH","ACTIVE_CHAINS","getGraphClient","chainId","Error","DISTRIBUTION_TYPE_REBATES","DISTRIBUTION_TYPE_DISCOUNT","decodeReferralCode","hexCode","utils","parseBytes32String","ex","code","substring","i","String","fromCharCode","parseInt","trim","encodeReferralCode","final","replace","length","constants","HashZero","formatBytes32String","validateReferralCodeExists","referralCode","referralCodeBytes32","referralCodeOwner","getReferralCodeOwner","registerReferralCode","library","props","referralStorageAddress","contract","Contract","abi","getSigner","setTraderReferralCodeByUser","codeOwner","codeOwners","error","Promise","resolve","reject","provider","getReferralCodeTakenStatus","account","ownerArbitrum","taken","referralCodeTakenInfo","status","info","getCodeOwnersData","codes","referralCodeOwnerQuery","all","map","query","then","data","owner","referralCodes","codeString","isTaken","isTakenByCurrentUser","toLowerCase","useUserCodesOnAllChain","setData","main","arbitrumCodes","c","codeOwnersOnArbitrum","reduce","acc","cv","getCodeByAccount","useUserReferralCode","userReferralCode","mutate","mutateUserReferralCode","useReferrerTier","referrerTier","mutateReferrerTier","useCodeOwner","mutateCodeOwner","useReferralsData","loading","setLoading","ownerOnOtherChain","startOfDayTimestamp","Math","floor","Date","now","variables","typeIds","timestamp","referralTotalStatsId","res","rebateDistributions","discountDistributions","distributions","forEach","d","item","transactionHash","receiver","getAddress","amount","typeId","token","push","prepareStatsItem","e","volume","trades","tradedReferralsCount","registeredReferralsCount","totalRebateUsd","discountUsd","getCumulativeStats","add","referrerTotalStats","referrerTierInfo","referrerLastDayStats","cumulativeStats","referralTotalStats","catch","console","warn","finally"],"sources":["C:/Users/rober/Documents/swaps-client/src/Api/referrals.ts"],"sourcesContent":["import { ethers } from \"ethers\";\nimport { gql } from \"@apollo/client\";\nimport { useState, useEffect } from \"react\";\n\nimport {\n  ARBITRUM,\n  bigNumberify,\n  isAddressZero,\n  helperToast,\n  getProvider,\n  fetcher,\n  ARBITRUM_GOERLI,\n} from \"../Helpers\";\nimport { arbitrumReferralsGraphClient, arbitrumTestnetReferralsGraphClient } from \"./common\";\nimport { getContract } from \"../Addresses\";\n\nimport ReferralStorage from \"../abis/ReferralStorage.json\";\nimport { callContract } from \".\";\nimport useSWR from \"swr\";\nimport { ChainId, Library } from \"../types/common\";\nimport { MAX_REFERRAL_CODE_LENGTH } from \"../config/referrals\";\n\nconst ACTIVE_CHAINS = [ARBITRUM];\n\nfunction getGraphClient(chainId: ChainId) {\n  if (chainId === ARBITRUM) {\n    return arbitrumReferralsGraphClient;\n  } else if (chainId === ARBITRUM_GOERLI) {\n    return arbitrumTestnetReferralsGraphClient;\n  }\n  throw new Error(`Unsupported chain ${chainId}`);\n}\n\nconst DISTRIBUTION_TYPE_REBATES = \"1\";\nconst DISTRIBUTION_TYPE_DISCOUNT = \"2\";\n\nexport function decodeReferralCode(hexCode: string) {\n  try {\n    return ethers.utils.parseBytes32String(hexCode);\n  } catch (ex) {\n    let code = \"\";\n    hexCode = hexCode.substring(2);\n    for (let i = 0; i < 32; i++) {\n      code += String.fromCharCode(parseInt(hexCode.substring(i * 2, i * 2 + 2), 16));\n    }\n    return code.trim();\n  }\n}\n\nexport function encodeReferralCode(code: string) {\n  let final = code.replace(/[^\\w\\s_]/g, \"\"); // replace everything other than numbers, string  and underscor to ''\n  if (final.length > MAX_REFERRAL_CODE_LENGTH) {\n    return ethers.constants.HashZero;\n  }\n\n  return ethers.utils.formatBytes32String(final);\n}\n\nexport async function validateReferralCodeExists(referralCode: string, chainId: ChainId) {\n  const referralCodeBytes32 = encodeReferralCode(referralCode);\n  const referralCodeOwner = await getReferralCodeOwner(chainId, referralCodeBytes32);\n  return !isAddressZero(referralCodeOwner);\n}\n\nexport async function registerReferralCode(chainId: ChainId, referralCode: string, { library, ...props }) {\n  const referralStorageAddress = getContract(chainId, \"ReferralStorage\");\n  const contract = new ethers.Contract(referralStorageAddress, ReferralStorage.abi, library.getSigner());\n  return callContract(chainId, contract, \"registerCode\", [referralCode], { ...props });\n}\n\nexport async function setTraderReferralCodeByUser(chainId: ChainId, referralCode: string, { library, ...props }) {\n  const referralStorageAddress = getContract(chainId, \"ReferralStorage\");\n  const contract = new ethers.Contract(referralStorageAddress, ReferralStorage.abi, library.getSigner());\n  const codeOwner = await contract.codeOwners(referralCode);\n  if (isAddressZero(codeOwner)) {\n    helperToast.error(\"Referral code does not exist\");\n    return new Promise((resolve, reject) => {\n      reject();\n    });\n  }\n  return callContract(chainId, contract, \"setTraderReferralCodeByUser\", [referralCode], {\n    ...props,\n  });\n}\n\nexport async function getReferralCodeOwner(chainId: ChainId, referralCode: string) {\n  const referralStorageAddress = getContract(chainId, \"ReferralStorage\");\n  const provider = getProvider(null, chainId);\n  const contract = new ethers.Contract(referralStorageAddress, ReferralStorage.abi, provider);\n  const codeOwner = await contract.codeOwners(referralCode);\n  return codeOwner;\n}\n\nexport async function getReferralCodeTakenStatus(account: string, referralCode: string, chainId: ChainId) {\n  const referralCodeBytes32 = encodeReferralCode(referralCode);\n  const ownerArbitrum = await getReferralCodeOwner(ARBITRUM, referralCodeBytes32);\n\n  const taken =\n    !isAddressZero(ownerArbitrum) && (ownerArbitrum !== account || (ownerArbitrum === account && chainId === ARBITRUM));\n\n  const referralCodeTakenInfo = {\n    taken,\n    ownerArbitrum,\n  };\n\n  if (taken) {\n    return { status: \"taken\", info: referralCodeTakenInfo };\n  }\n  return { status: \"none\", info: referralCodeTakenInfo };\n}\n\nasync function getCodeOwnersData(chainId: ChainId, account: string, codes: string[]) {\n  const referralCodeOwnerQuery = (referralCode: string) =>\n    gql(\n      `{\n      referralCodes(where: {code: \"${referralCode}\"}) {\n        owner\n      }\n    }`\n    );\n\n  return Promise.all(\n    codes.map(async (code) => {\n      return getGraphClient(chainId)\n        .query({ query: referralCodeOwnerQuery(code) })\n        .then(({ data }) => {\n          const owner = data.referralCodes[0]?.owner;\n          return {\n            code,\n            codeString: decodeReferralCode(code),\n            owner,\n            isTaken: !!owner,\n            isTakenByCurrentUser: owner && String(owner).toLowerCase() === String(account).toLowerCase(),\n          };\n        });\n    })\n  );\n}\n\nexport function useUserCodesOnAllChain(account: string) {\n  const [data, setData] = useState(null);\n  const query = gql(\n    `{\n      referralCodes (\n      first: 1000,\n      where: {\n        owner: \"${(account || \"\").toLowerCase()}\"\n      }) {\n      code\n      }\n    }`\n  );\n\n  useEffect(() => {\n    async function main() {\n      const [arbitrumCodes] = await Promise.all(\n        ACTIVE_CHAINS.map((chainId) =>\n          getGraphClient(chainId)\n            .query({ query })\n            .then(({ data }) => {\n              return data.referralCodes.map((c: { code: string }) => c.code);\n            })\n        )\n      );\n      const codeOwnersOnArbitrum = await getCodeOwnersData(ARBITRUM, account, arbitrumCodes);\n      setData({\n        [ARBITRUM]: codeOwnersOnArbitrum.reduce((acc, cv) => {\n          acc[cv.code] = cv;\n          return acc;\n        }, {}),\n      });\n    }\n\n    main();\n  }, [account, query]);\n\n  return data;\n}\n\nexport async function getCodeByAccount(account: string) {\n  const query = gql(\n    `{\n      referralCodes (\n      first: 1000,\n      where: {\n        owner: \"${(account || \"\").toLowerCase()}\"\n      }) {\n      code\n      }\n    }`\n  );\n\n  const [arbitrumCodes] = await Promise.all(\n    ACTIVE_CHAINS.map((chainId) =>\n      getGraphClient(chainId)\n        .query({ query })\n        .then(({ data }) => {\n          return data.referralCodes.map((c: { code: string }) => c.code);\n        })\n    )\n  );\n  const codeOwnersOnArbitrum = await getCodeOwnersData(ARBITRUM, account, arbitrumCodes);\n  const data = {\n    [ARBITRUM]: codeOwnersOnArbitrum.reduce((acc, cv) => {\n      acc[cv.code] = cv;\n      return acc;\n    }, {}),\n  };\n\n  return data;\n}\n\nexport function useUserReferralCode(library: Library, chainId: ChainId, account: string) {\n  const referralStorageAddress = getContract(chainId, \"ReferralStorage\");\n  const { data: userReferralCode, mutate: mutateUserReferralCode } = useSWR(\n    account && [`ReferralStorage:traderReferralCodes`, chainId, referralStorageAddress, \"traderReferralCodes\", account],\n    {\n      fetcher: fetcher(library, ReferralStorage),\n    }\n  );\n  return {\n    userReferralCode,\n    mutateUserReferralCode,\n  };\n}\n\nexport function useReferrerTier(library: Library, chainId: ChainId, account: string) {\n  const referralStorageAddress = getContract(chainId, \"ReferralStorage\");\n  const { data: referrerTier, mutate: mutateReferrerTier } = useSWR(\n    account && [`ReferralStorage:referrerTiers`, chainId, referralStorageAddress, \"referrerTiers\", account],\n    {\n      fetcher: fetcher(library, ReferralStorage),\n    }\n  );\n  return {\n    referrerTier,\n    mutateReferrerTier,\n  };\n}\n\nexport function useCodeOwner(library: Library, chainId: ChainId, account: string, code: string) {\n  const referralStorageAddress = getContract(chainId, \"ReferralStorage\");\n  const { data: codeOwner, mutate: mutateCodeOwner } = useSWR(\n    account && code && [`ReferralStorage:codeOwners`, chainId, referralStorageAddress, \"codeOwners\", code],\n    {\n      fetcher: fetcher(library, ReferralStorage),\n    }\n  );\n  return {\n    codeOwner,\n    mutateCodeOwner,\n  };\n}\n\nexport function useReferralsData(chainId: ChainId, account: string) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const ownerOnOtherChain = useUserCodesOnAllChain(account);\n  useEffect(() => {\n    if (!chainId || !account) {\n      setLoading(false);\n      return;\n    }\n    const startOfDayTimestamp = Math.floor(Math.floor(Date.now() / 1000) / 86400) * 86400;\n    const query = gql`\n      query referralData($typeIds: [String!]!, $account: String!, $timestamp: Int!, $referralTotalStatsId: String!) {\n        distributions(\n          first: 1000\n          orderBy: timestamp\n          orderDirection: desc\n          where: { receiver: $account, typeId_in: $typeIds }\n        ) {\n          receiver\n          amount\n          typeId\n          token\n          transactionHash\n          timestamp\n        }\n        referrerTotalStats: referrerStats(\n          first: 1000\n          orderBy: volume\n          orderDirection: desc\n          where: { period: total, referrer: $account }\n        ) {\n          referralCode\n          volume\n          trades\n          tradedReferralsCount\n          registeredReferralsCount\n          totalRebateUsd\n          discountUsd\n        }\n        referrerLastDayStats: referrerStats(\n          first: 1000\n          where: { period: daily, referrer: $account, timestamp: $timestamp }\n        ) {\n          referralCode\n          volume\n          trades\n          tradedReferralsCount\n          registeredReferralsCount\n          totalRebateUsd\n          discountUsd\n        }\n        referralCodes(first: 1000, where: { owner: $account }) {\n          code\n        }\n        referralTotalStats: referralStat(id: $referralTotalStatsId) {\n          volume\n          discountUsd\n        }\n        referrerTierInfo: referrer(id: $account) {\n          tierId\n          id\n          discountShare\n        }\n      }\n    `;\n    setLoading(true);\n\n    getGraphClient(chainId)\n      .query({\n        query,\n        variables: {\n          typeIds: [DISTRIBUTION_TYPE_REBATES, DISTRIBUTION_TYPE_DISCOUNT],\n          account: (account || \"\").toLowerCase(),\n          timestamp: startOfDayTimestamp,\n          referralTotalStatsId: account && `total:0:${account.toLowerCase()}`,\n        },\n      })\n      .then((res) => {\n        const rebateDistributions = [];\n        const discountDistributions = [];\n        res.data.distributions.forEach((d: any) => {\n          const item = {\n            timestamp: parseInt(d.timestamp),\n            transactionHash: d.transactionHash,\n            receiver: ethers.utils.getAddress(d.receiver),\n            amount: bigNumberify(d.amount),\n            typeId: d.typeId,\n            token: ethers.utils.getAddress(d.token),\n          };\n          if (d.typeId === DISTRIBUTION_TYPE_REBATES) {\n            rebateDistributions.push(item);\n          } else {\n            discountDistributions.push(item);\n          }\n        });\n\n        function prepareStatsItem(e: any) {\n          return {\n            volume: bigNumberify(e.volume),\n            trades: parseInt(e.trades),\n            tradedReferralsCount: parseInt(e.tradedReferralsCount),\n            registeredReferralsCount: parseInt(e.registeredReferralsCount),\n            totalRebateUsd: bigNumberify(e.totalRebateUsd),\n            discountUsd: bigNumberify(e.discountUsd),\n            referralCode: decodeReferralCode(e.referralCode),\n            ownerOnOtherChain: ownerOnOtherChain?.[chainId][e.referralCode],\n          };\n        }\n\n        function getCumulativeStats(data = []) {\n          return data.reduce(\n            (acc, cv) => {\n              acc.totalRebateUsd = acc.totalRebateUsd.add(cv.totalRebateUsd);\n              acc.volume = acc.volume.add(cv.volume);\n              acc.discountUsd = acc.discountUsd.add(cv.discountUsd);\n              acc.trades = acc.trades + cv.trades;\n              acc.tradedReferralsCount = acc.tradedReferralsCount + cv.tradedReferralsCount;\n              acc.registeredReferralsCount = acc.registeredReferralsCount + cv.registeredReferralsCount;\n              return acc;\n            },\n            {\n              totalRebateUsd: bigNumberify(0),\n              volume: bigNumberify(0),\n              discountUsd: bigNumberify(0),\n              trades: 0,\n              tradedReferralsCount: 0,\n              registeredReferralsCount: 0,\n            }\n          );\n        }\n\n        let referrerTotalStats = res.data.referrerTotalStats.map(prepareStatsItem);\n        setData({\n          rebateDistributions,\n          discountDistributions,\n          referrerTotalStats,\n          referrerTierInfo: res.data.referrerTierInfo,\n          referrerLastDayStats: res.data.referrerLastDayStats.map(prepareStatsItem),\n          cumulativeStats: getCumulativeStats(referrerTotalStats),\n          codes: res.data.referralCodes.map((e: { code: string }) => decodeReferralCode(e.code)),\n          referralTotalStats: res.data.referralTotalStats\n            ? {\n                volume: bigNumberify(res.data.referralTotalStats.volume),\n                discountUsd: bigNumberify(res.data.referralTotalStats.discountUsd),\n              }\n            : {\n                volume: bigNumberify(0),\n                discountUsd: bigNumberify(0),\n              },\n        });\n      })\n      .catch(console.warn)\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [setData, chainId, account, ownerOnOtherChain]);\n\n  return {\n    data: data || null,\n    loading,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}