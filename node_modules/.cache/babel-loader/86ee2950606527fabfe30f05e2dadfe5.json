{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Group = void 0;\n\nvar inherits_1 = __importDefault(require(\"inherits\"));\n\nvar is_email_1 = __importDefault(require(\"./is-email\"));\n\nvar new_date_1 = __importDefault(require(\"new-date\"));\n\nvar facade_1 = require(\"./facade\");\n\nfunction Group(dictionary, opts) {\n  facade_1.Facade.call(this, dictionary, opts);\n}\n\nexports.Group = Group;\ninherits_1.default(Group, facade_1.Facade);\nvar g = Group.prototype;\n\ng.action = function () {\n  return \"group\";\n};\n\ng.type = g.action;\ng.groupId = facade_1.Facade.field(\"groupId\");\n\ng.created = function () {\n  var created = this.proxy(\"traits.createdAt\") || this.proxy(\"traits.created\") || this.proxy(\"properties.createdAt\") || this.proxy(\"properties.created\");\n  if (created) return new_date_1.default(created);\n};\n\ng.email = function () {\n  var email = this.proxy(\"traits.email\");\n  if (email) return email;\n  var groupId = this.groupId();\n  if (is_email_1.default(groupId)) return groupId;\n};\n\ng.traits = function (aliases) {\n  var ret = this.properties();\n  var id = this.groupId();\n  aliases = aliases || {};\n  if (id) ret.id = id;\n\n  for (var alias in aliases) {\n    var value = this[alias] == null ? this.proxy(\"traits.\" + alias) : this[alias]();\n    if (value == null) continue;\n    ret[aliases[alias]] = value;\n    delete ret[alias];\n  }\n\n  return ret;\n};\n\ng.name = facade_1.Facade.proxy(\"traits.name\");\ng.industry = facade_1.Facade.proxy(\"traits.industry\");\ng.employees = facade_1.Facade.proxy(\"traits.employees\");\n\ng.properties = function () {\n  return this.field(\"traits\") || this.field(\"properties\") || {};\n};","map":{"version":3,"sources":["../lib/group.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAEA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAaA,SAAgB,KAAhB,CAAsB,UAAtB,EAAkC,IAAlC,EAAsC;EACpC,QAAA,CAAA,MAAA,CAAO,IAAP,CAAY,IAAZ,EAAkB,UAAlB,EAA8B,IAA9B;AACD;;AAFD,OAAA,CAAA,KAAA,GAAA,KAAA;AAIA,UAAA,CAAA,OAAA,CAAQ,KAAR,EAAe,QAAA,CAAA,MAAf;AAEA,IAAM,CAAC,GAAG,KAAK,CAAC,SAAhB;;AAOA,CAAC,CAAC,MAAF,GAAW,YAAA;EACT,OAAO,OAAP;AACD,CAFD;;AAUA,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,MAAX;AAUA,CAAC,CAAC,OAAF,GAAY,QAAA,CAAA,MAAA,CAAO,KAAP,CAAa,SAAb,CAAZ;;AAQA,CAAC,CAAC,OAAF,GAAY,YAAA;EACV,IAAI,OAAO,GACT,KAAK,KAAL,CAAW,kBAAX,KACA,KAAK,KAAL,CAAW,gBAAX,CADA,IAEA,KAAK,KAAL,CAAW,sBAAX,CAFA,IAGA,KAAK,KAAL,CAAW,oBAAX,CAJF;EAMA,IAAI,OAAJ,EAAa,OAAO,UAAA,CAAA,OAAA,CAAQ,OAAR,CAAP;AACd,CARD;;AAgBA,CAAC,CAAC,KAAF,GAAU,YAAA;EACR,IAAI,KAAK,GAAG,KAAK,KAAL,CAAW,cAAX,CAAZ;EACA,IAAI,KAAJ,EAAW,OAAO,KAAP;EACX,IAAI,OAAO,GAAG,KAAK,OAAL,EAAd;EACA,IAAI,UAAA,CAAA,OAAA,CAAQ,OAAR,CAAJ,EAAsB,OAAO,OAAP;AACvB,CALD;;AA+BA,CAAC,CAAC,MAAF,GAAW,UAAU,OAAV,EAAiB;EAC1B,IAAI,GAAG,GAAG,KAAK,UAAL,EAAV;EACA,IAAI,EAAE,GAAG,KAAK,OAAL,EAAT;EACA,OAAO,GAAG,OAAO,IAAI,EAArB;EAEA,IAAI,EAAJ,EAAQ,GAAG,CAAC,EAAJ,GAAS,EAAT;;EAER,KAAK,IAAI,KAAT,IAAkB,OAAlB,EAA2B;IACzB,IAAI,KAAK,GACP,KAAK,KAAL,KAAe,IAAf,GAAsB,KAAK,KAAL,CAAW,YAAY,KAAvB,CAAtB,GAAsD,KAAK,KAAL,GADxD;IAEA,IAAI,KAAK,IAAI,IAAb,EAAmB;IACnB,GAAG,CAAC,OAAO,CAAC,KAAD,CAAR,CAAH,GAAsB,KAAtB;IACA,OAAO,GAAG,CAAC,KAAD,CAAV;EACD;;EAED,OAAO,GAAP;AACD,CAhBD;;AA2BA,CAAC,CAAC,IAAF,GAAS,QAAA,CAAA,MAAA,CAAO,KAAP,CAAa,aAAb,CAAT;AAWA,CAAC,CAAC,QAAF,GAAa,QAAA,CAAA,MAAA,CAAO,KAAP,CAAa,iBAAb,CAAb;AAWA,CAAC,CAAC,SAAF,GAAc,QAAA,CAAA,MAAA,CAAO,KAAP,CAAa,kBAAb,CAAd;;AAQA,CAAC,CAAC,UAAF,GAAe,YAAA;EAEb,OAAO,KAAK,KAAL,CAAW,QAAX,KAAwB,KAAK,KAAL,CAAW,YAAX,CAAxB,IAAoD,EAA3D;AACD,CAHD","sourcesContent":["\"use strict\";\n\nimport inherit from \"inherits\";\nimport isEmail from \"./is-email\";\nimport newDate from \"new-date\";\nimport { Facade } from \"./facade\";\n\n/**\n * Initialize a new `Group` facade with a `dictionary` of arguments.\n *\n * @param {Object} dictionary - The object to wrap.\n * @param {string} [dictionary.userId] - The user to add to the group.\n * @param {string} [dictionary.groupId] - The ID of the group.\n * @param {Object} [dictionary.traits] - The traits of the group.\n * @param {Object} opts - Options about what kind of Facade to create.\n *\n * @augments Facade\n */\nexport function Group(dictionary, opts) {\n  Facade.call(this, dictionary, opts);\n}\n\ninherit(Group, Facade);\n\nconst g = Group.prototype;\n\n/**\n * Return the type of facade this is. This will always return `\"group\"`.\n *\n * @return {string}\n */\ng.action = function () {\n  return \"group\";\n};\n\n/**\n * An alias for {@link Group#action}.\n *\n * @function\n * @return {string}\n */\ng.type = g.action;\n\n/**\n * Get the group ID from `groupId`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ng.groupId = Facade.field(\"groupId\");\n\n/**\n * Get the time of creation of the group from `traits.createdAt`,\n * `traits.created`, `properties.createdAt`, or `properties.created`.\n *\n * @return {Date}\n */\ng.created = function () {\n  var created =\n    this.proxy(\"traits.createdAt\") ||\n    this.proxy(\"traits.created\") ||\n    this.proxy(\"properties.createdAt\") ||\n    this.proxy(\"properties.created\");\n\n  if (created) return newDate(created);\n};\n\n/**\n * Get the group's email from `traits.email`, falling back to `groupId` only if\n * it looks like a valid email.\n *\n * @return {string}\n */\ng.email = function () {\n  var email = this.proxy(\"traits.email\");\n  if (email) return email;\n  var groupId = this.groupId();\n  if (isEmail(groupId)) return groupId;\n};\n\n/**\n * Get the group's traits. This is identical to how {@link Facade#traits}\n * works, except it looks at `traits.*` instead of `options.traits.*`.\n *\n * Traits are gotten from `traits`, augmented with a property `id` with\n * the event's `groupId`.\n *\n * The parameter `aliases` is meant to transform keys in `traits` into new\n * keys. Each alias like `{ \"xxx\": \"yyy\" }` will take whatever is at `xxx` in\n * the traits, and move it to `yyy`. If `xxx` is a method of this facade, it'll\n * be called as a function instead of treated as a key into the traits.\n *\n * @example\n * var obj = { traits: { foo: \"bar\" }, anonymousId: \"xxx\" }\n * var group = new Group(obj)\n *\n * group.traits() // { \"foo\": \"bar\" }\n * group.traits({ \"foo\": \"asdf\" }) // { \"asdf\": \"bar\" }\n * group.traits({ \"sessionId\": \"rofl\" }) // { \"rofl\": \"xxx\" }\n *\n * @param {Object} aliases - A mapping from keys to the new keys they should be\n * transformed to.\n * @return {Object}\n */\ng.traits = function (aliases) {\n  var ret = this.properties();\n  var id = this.groupId();\n  aliases = aliases || {};\n\n  if (id) ret.id = id;\n\n  for (var alias in aliases) {\n    var value =\n      this[alias] == null ? this.proxy(\"traits.\" + alias) : this[alias]();\n    if (value == null) continue;\n    ret[aliases[alias]] = value;\n    delete ret[alias];\n  }\n\n  return ret;\n};\n\n/**\n * Get the group's name from `traits.name`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ng.name = Facade.proxy(\"traits.name\");\n\n/**\n * Get the group's industry from `traits.industry`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ng.industry = Facade.proxy(\"traits.industry\");\n\n/**\n * Get the group's employee count from `traits.employees`.\n *\n * This *should* be a number, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {number}\n */\ng.employees = Facade.proxy(\"traits.employees\");\n\n/**\n * Get the group's properties from `traits` or `properties`, falling back to\n * simply an empty object.\n *\n * @return {Object}\n */\ng.properties = function () {\n  // TODO remove this function\n  return this.field(\"traits\") || this.field(\"properties\") || {};\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}