{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar ctors = require('./ctors.js'); // VARIABLES //\n\n\nvar bool; // FUNCTIONS //\n\n/**\n* Returns a boolean indicating if an environment is little endian.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment is little endian\n*\n* @example\n* var bool = isLittleEndian();\n* // returns <boolean>\n*/\n\nfunction isLittleEndian() {\n  var uint16view;\n  var uint8view;\n  uint16view = new ctors['uint16'](1);\n  /*\n  * Set the uint16 view to a value having distinguishable lower and higher order words.\n  *\n  * 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)\n  */\n\n  uint16view[0] = 0x1234; // Create a uint8 view on top of the uint16 buffer:\n\n  uint8view = new ctors['uint8'](uint16view.buffer); // If little endian, the least significant byte will be first...\n\n  return uint8view[0] === 0x34;\n} // MAIN //\n\n\nbool = isLittleEndian(); // EXPORTS //\n\nmodule.exports = bool;","map":{"version":3,"names":["ctors","require","bool","isLittleEndian","uint16view","uint8view","buffer","module","exports"],"sources":["C:/Users/rober/Documents/copiaswaps-client/swaps-client/node_modules/@stdlib/assert-is-little-endian/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ctors = require( './ctors.js' );\n\n\n// VARIABLES //\n\nvar bool;\n\n\n// FUNCTIONS //\n\n/**\n* Returns a boolean indicating if an environment is little endian.\n*\n* @private\n* @returns {boolean} boolean indicating if an environment is little endian\n*\n* @example\n* var bool = isLittleEndian();\n* // returns <boolean>\n*/\nfunction isLittleEndian() {\n\tvar uint16view;\n\tvar uint8view;\n\n\tuint16view = new ctors[ 'uint16' ]( 1 );\n\n\t/*\n\t* Set the uint16 view to a value having distinguishable lower and higher order words.\n\t*\n\t* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)\n\t*/\n\tuint16view[ 0 ] = 0x1234;\n\n\t// Create a uint8 view on top of the uint16 buffer:\n\tuint8view = new ctors[ 'uint8' ]( uint16view.buffer );\n\n\t// If little endian, the least significant byte will be first...\n\treturn ( uint8view[ 0 ] === 0x34 );\n}\n\n\n// MAIN //\n\nbool = isLittleEndian();\n\n\n// EXPORTS //\n\nmodule.exports = bool;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAE,YAAF,CAAnB,C,CAGA;;;AAEA,IAAIC,IAAJ,C,CAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,GAA0B;EACzB,IAAIC,UAAJ;EACA,IAAIC,SAAJ;EAEAD,UAAU,GAAG,IAAIJ,KAAK,CAAE,QAAF,CAAT,CAAuB,CAAvB,CAAb;EAEA;AACD;AACA;AACA;AACA;;EACCI,UAAU,CAAE,CAAF,CAAV,GAAkB,MAAlB,CAXyB,CAazB;;EACAC,SAAS,GAAG,IAAIL,KAAK,CAAE,OAAF,CAAT,CAAsBI,UAAU,CAACE,MAAjC,CAAZ,CAdyB,CAgBzB;;EACA,OAASD,SAAS,CAAE,CAAF,CAAT,KAAmB,IAA5B;AACA,C,CAGD;;;AAEAH,IAAI,GAAGC,cAAc,EAArB,C,CAGA;;AAEAI,MAAM,CAACC,OAAP,GAAiBN,IAAjB"},"metadata":{},"sourceType":"script"}