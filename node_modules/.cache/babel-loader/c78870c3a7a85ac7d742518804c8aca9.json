{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nimport { gql } from \"@apollo/client\";\nimport useSWR from \"swr\";\nimport { ethers } from \"ethers\";\nimport { USD_DECIMALS, CHART_PERIODS, formatAmount, sleep } from \"../Helpers\";\nimport { chainlinkClient } from \"./common\";\nconst BigNumber = ethers.BigNumber; // Ethereum network, Chainlink Aggregator contracts\n\nconst FEED_ID_MAP = {\n  BTC_USD: \"0xae74faa92cb67a95ebcab07358bc222e33a34da7\",\n  ETH_USD: \"0x37bc7498f4ff12c19678ee8fe19d713b87f6a9e6\",\n  BNB_USD: \"0xc45ebd0f901ba6b2b8c7e70b717778f055ef5e6d\",\n  LINK_USD: \"0xdfd03bfc3465107ce570a0397b247f546a42d0fa\",\n  UNI_USD: \"0x68577f915131087199fe48913d8b416b3984fd38\",\n  FXS_USD: \"0x6c363c5a33ef6aa7030fade33b3ed1fe9d9c44a5\",\n  CRV_USD: \"0x5ea974a35c37e42dfb91004cfe2b8aab9210f772\",\n  BAL_USD: \"0xa022ce3aea73cbeb245fcead10e3c001551c0dd4\",\n  SUSHI_USD: \"0x7213536a36094cd8a768a5e45203ec286cba2d74\",\n  AVAX_USD: \"0x0fc3657899693648bba4dbd2d8b33b82e875105d\",\n  AAVE_USD: \"0xe3f0dede4b499c07e12475087ab1a084b5f93bc0\",\n  YFI_USD: \"0x8a4d74003870064d41d4f84940550911fbfccf04\",\n  SPELL_USD: \"0x8640b23468815902e011948f3ab173e1e83f9879\"\n};\nconst timezoneOffset = -new Date().getTimezoneOffset() * 60;\n\nfunction fillGaps(prices, periodSeconds) {\n  if (prices.length < 2) {\n    return prices;\n  }\n\n  const newPrices = [prices[0]];\n  let prevTime = prices[0].time;\n\n  for (let i = 1; i < prices.length; i++) {\n    const {\n      time,\n      open,\n      low\n    } = prices[i];\n\n    if (prevTime) {\n      let j = (time - prevTime) / periodSeconds - 1;\n\n      while (j > 0) {\n        newPrices.push({\n          time: time - j * periodSeconds,\n          open,\n          close: open,\n          high: open * 1.0003,\n          low: open * 0.9996\n        });\n        j--;\n      }\n    }\n\n    prevTime = time;\n\n    if (low === 0) {\n      newPrices.push({ ...prices[i],\n        low: open * 0.9996\n      });\n    } else {\n      newPrices.push(prices[i]);\n    }\n  }\n\n  return newPrices;\n}\n\nasync function getChartPricesFromStats(_chainId, symbol, period) {\n  var _prices2;\n\n  if ([\"WBTC\", \"WETH\"].includes(symbol)) {\n    symbol = symbol.substr(1);\n  }\n\n  const hostname = \"https://swaps-stats-kltusqhvaa-uw.a.run.app/\"; // const hostname = \"http://localhost:8080/\";\n\n  const timeDiff = CHART_PERIODS[period] * 3000;\n  const from = Math.floor(Date.now() / 1000 - timeDiff);\n  const url = `${hostname}api/candles/${symbol}?preferableChainId=42161&period=${period}&from=${from}&preferableSource=fast`;\n  const TIMEOUT = 5000;\n  const res = await new Promise(async (resolve, reject) => {\n    let done = false;\n    setTimeout(() => {\n      done = true;\n      reject(new Error(`request timeout ${url}`));\n    }, TIMEOUT);\n    let lastEx;\n\n    for (let i = 0; i < 3; i++) {\n      if (done) return;\n\n      try {\n        const res = await fetch(url);\n        resolve(res);\n        return;\n      } catch (ex) {\n        await sleep(300);\n        lastEx = ex;\n      }\n    }\n\n    reject(lastEx);\n  });\n\n  if (!res.ok) {\n    throw new Error(`request failed ${res.status} ${res.statusText}`);\n  }\n\n  let json = await res.json();\n  let prices = json === null || json === void 0 ? void 0 : json.prices;\n\n  if (!prices || ((_prices2 = prices) === null || _prices2 === void 0 ? void 0 : _prices2.length) < 10) {\n    var _prices3;\n\n    throw new Error(`not enough prices data: ${(_prices3 = prices) === null || _prices3 === void 0 ? void 0 : _prices3.length}`);\n  }\n\n  const OBSOLETE_THRESHOLD = Date.now() / 1000 - 60 * 30; // 30 min ago\n\n  const updatedAt = (json === null || json === void 0 ? void 0 : json.updatedAt) || 0;\n\n  if (updatedAt < OBSOLETE_THRESHOLD) {\n    throw new Error(\"chart data is obsolete, last price record at \" + new Date(updatedAt * 1000).toISOString() + \" now: \" + new Date().toISOString());\n  }\n\n  prices = prices.map((_ref, i) => {\n    let {\n      t,\n      o: open,\n      c: close,\n      h: high,\n      l: low\n    } = _ref;\n\n    if (i !== 0) {\n      // set open to close\n      // prices are sorted in timestamp ascending order\n      open = prices[i - 1].c;\n    }\n\n    return {\n      time: t + timezoneOffset,\n      open,\n      close,\n      high,\n      low\n    };\n  });\n  return prices;\n}\n\nfunction getCandlesFromPrices(prices, period) {\n  const periodTime = CHART_PERIODS[period];\n\n  if (prices.length < 2) {\n    return [];\n  }\n\n  const candles = [];\n  const first = prices[0];\n  let prevTsGroup = Math.floor(first[0] / periodTime) * periodTime;\n  let prevPrice = first[1];\n  let o = prevPrice;\n  let h = prevPrice;\n  let l = prevPrice;\n  let c = prevPrice;\n\n  for (let i = 1; i < prices.length; i++) {\n    const [ts, price] = prices[i];\n    const tsGroup = Math.floor(ts / periodTime) * periodTime;\n\n    if (prevTsGroup !== tsGroup) {\n      candles.push({\n        t: prevTsGroup + timezoneOffset,\n        o,\n        h,\n        l,\n        c\n      });\n      o = c;\n      h = Math.max(o, c);\n      l = Math.min(o, c);\n    }\n\n    c = price;\n    h = Math.max(h, price);\n    l = Math.min(l, price);\n    prevTsGroup = tsGroup;\n  }\n\n  return candles.map(_ref2 => {\n    let {\n      t: time,\n      o: open,\n      c: close,\n      h: high,\n      l: low\n    } = _ref2;\n    return {\n      time,\n      open,\n      close,\n      high,\n      low\n    };\n  });\n}\n\nasync function getChainlinkChartPricesFromGraph(symbol, period) {\n  if ([\"WBTC\", \"WETH\"].includes(symbol)) {\n    symbol = symbol.substr(1);\n  }\n\n  const marketName = symbol + \"_USD\";\n  const feedId = FEED_ID_MAP[marketName];\n\n  if (!feedId) {\n    throw new Error(`undefined marketName ${marketName}`);\n  }\n\n  const PER_CHUNK = 1000;\n  const CHUNKS_TOTAL = 6;\n  const requests = [];\n\n  for (let i = 0; i < CHUNKS_TOTAL; i++) {\n    const query = gql(`{\n      rounds(\n        first: ${PER_CHUNK},\n        skip: ${i * PER_CHUNK},\n        orderBy: unixTimestamp,\n        orderDirection: desc,\n        where: {feed: \"${feedId.toLowerCase()}\"}\n      ) {\n        unixTimestamp,\n        value\n      }\n    }`);\n    requests.push(chainlinkClient.query({\n      query\n    }));\n  }\n\n  return Promise.all(requests).then(chunks => {\n    let prices = [];\n    const uniqTs = new Set();\n    chunks.forEach(chunk => {\n      chunk.data.rounds.forEach(item => {\n        if (uniqTs.has(item.unixTimestamp)) {\n          return;\n        }\n\n        uniqTs.add(item.unixTimestamp);\n        prices.push([item.unixTimestamp, Number(item.value) / 1e8]);\n      });\n    });\n    prices.sort((_ref3, _ref4) => {\n      let [timeA] = _ref3;\n      let [timeB] = _ref4;\n      return timeA - timeB;\n    });\n    prices = getCandlesFromPrices(prices, period);\n    return prices;\n  }).catch(err => {\n    console.error(\"Failed to fetch chainlink prices\", err);\n  });\n}\n\nexport function useChartPrices(chainId, symbol, isStable, period, currentAveragePrice) {\n  _s();\n\n  const swrKey = !isStable && symbol ? [\"getChartCandles\", chainId, symbol, period] : null;\n  let {\n    data: prices,\n    mutate: updatePrices\n  } = useSWR(swrKey, {\n    fetcher: async function () {\n      try {\n        return await getChartPricesFromStats(chainId, symbol, period);\n      } catch (ex) {\n        console.warn(ex);\n        console.warn(\"Switching to graph chainlink data\");\n\n        try {\n          return await getChainlinkChartPricesFromGraph(symbol, period);\n        } catch (ex2) {\n          console.warn(\"getChainlinkChartPricesFromGraph failed\");\n          console.warn(ex2);\n          return [];\n        }\n      }\n    },\n    dedupingInterval: 60000,\n    focusThrottleInterval: 60000 * 10\n  });\n  const currentAveragePriceString = currentAveragePrice && currentAveragePrice.toString();\n  const retPrices = useMemo(() => {\n    if (isStable) {\n      return getStablePriceData(period);\n    }\n\n    if (!prices) {\n      return [];\n    }\n\n    let _prices = [...prices];\n\n    if (currentAveragePriceString && prices.length) {\n      _prices = appendCurrentAveragePrice(_prices, BigNumber.from(currentAveragePriceString), period);\n    }\n\n    return fillGaps(_prices, CHART_PERIODS[period]);\n  }, [prices, isStable, currentAveragePriceString, period]);\n  return [retPrices, updatePrices];\n}\n\n_s(useChartPrices, \"qUPQA9JayRInGCvgfLYoSg/VVHw=\", false, function () {\n  return [useSWR];\n});\n\nfunction appendCurrentAveragePrice(prices, currentAveragePrice, period) {\n  const periodSeconds = CHART_PERIODS[period];\n  const currentCandleTime = Math.floor(Date.now() / 1000 / periodSeconds) * periodSeconds + timezoneOffset;\n  const last = prices[prices.length - 1];\n  const averagePriceValue = parseFloat(formatAmount(currentAveragePrice, USD_DECIMALS, 2));\n\n  if (currentCandleTime === last.time) {\n    last.close = averagePriceValue;\n    last.high = Math.max(last.high, averagePriceValue);\n    last.low = Math.max(last.low, averagePriceValue);\n    return prices;\n  } else {\n    const newCandle = {\n      time: currentCandleTime,\n      open: last.close,\n      close: averagePriceValue,\n      high: averagePriceValue,\n      low: averagePriceValue\n    };\n    return [...prices, newCandle];\n  }\n}\n\nfunction getStablePriceData(period) {\n  const periodSeconds = CHART_PERIODS[period];\n  const now = Math.floor(Date.now() / 1000 / periodSeconds) * periodSeconds;\n  let priceData = [];\n\n  for (let i = 100; i > 0; i--) {\n    priceData.push({\n      time: now - i * periodSeconds,\n      open: 1,\n      close: 1,\n      high: 1,\n      low: 1\n    });\n  }\n\n  return priceData;\n}","map":{"version":3,"names":["useMemo","gql","useSWR","ethers","USD_DECIMALS","CHART_PERIODS","formatAmount","sleep","chainlinkClient","BigNumber","FEED_ID_MAP","BTC_USD","ETH_USD","BNB_USD","LINK_USD","UNI_USD","FXS_USD","CRV_USD","BAL_USD","SUSHI_USD","AVAX_USD","AAVE_USD","YFI_USD","SPELL_USD","timezoneOffset","Date","getTimezoneOffset","fillGaps","prices","periodSeconds","length","newPrices","prevTime","time","i","open","low","j","push","close","high","getChartPricesFromStats","_chainId","symbol","period","includes","substr","hostname","timeDiff","from","Math","floor","now","url","TIMEOUT","res","Promise","resolve","reject","done","setTimeout","Error","lastEx","fetch","ex","ok","status","statusText","json","OBSOLETE_THRESHOLD","updatedAt","toISOString","map","t","o","c","h","l","getCandlesFromPrices","periodTime","candles","first","prevTsGroup","prevPrice","ts","price","tsGroup","max","min","getChainlinkChartPricesFromGraph","marketName","feedId","PER_CHUNK","CHUNKS_TOTAL","requests","query","toLowerCase","all","then","chunks","uniqTs","Set","forEach","chunk","data","rounds","item","has","unixTimestamp","add","Number","value","sort","timeA","timeB","catch","err","console","error","useChartPrices","chainId","isStable","currentAveragePrice","swrKey","mutate","updatePrices","fetcher","warn","ex2","dedupingInterval","focusThrottleInterval","currentAveragePriceString","toString","retPrices","getStablePriceData","_prices","appendCurrentAveragePrice","currentCandleTime","last","averagePriceValue","parseFloat","newCandle","priceData"],"sources":["C:/Users/rober/Documents/copiaswaps-client/swaps-client/src/Api/prices.ts"],"sourcesContent":["import { useMemo } from \"react\";\nimport { gql } from \"@apollo/client\";\nimport useSWR from \"swr\";\nimport { ethers } from \"ethers\";\n\nimport { USD_DECIMALS, CHART_PERIODS, formatAmount, sleep } from \"../Helpers\";\nimport { chainlinkClient } from \"./common\";\nimport { ChainId, Period, TokenSymbol } from \"../types/common\";\n\n\ntype Price = {\n  time: number\n  open: number,\n  close: number,\n  low: number\n  high: number,\n\n}\nconst BigNumber = ethers.BigNumber;\n\n// Ethereum network, Chainlink Aggregator contracts\nconst FEED_ID_MAP = {\n  BTC_USD: \"0xae74faa92cb67a95ebcab07358bc222e33a34da7\",\n  ETH_USD: \"0x37bc7498f4ff12c19678ee8fe19d713b87f6a9e6\",\n  BNB_USD: \"0xc45ebd0f901ba6b2b8c7e70b717778f055ef5e6d\",\n  LINK_USD: \"0xdfd03bfc3465107ce570a0397b247f546a42d0fa\",\n  UNI_USD: \"0x68577f915131087199fe48913d8b416b3984fd38\",\n  FXS_USD: \"0x6c363c5a33ef6aa7030fade33b3ed1fe9d9c44a5\",\n  CRV_USD: \"0x5ea974a35c37e42dfb91004cfe2b8aab9210f772\",\n  BAL_USD: \"0xa022ce3aea73cbeb245fcead10e3c001551c0dd4\",\n  SUSHI_USD: \"0x7213536a36094cd8a768a5e45203ec286cba2d74\",\n  AVAX_USD: \"0x0fc3657899693648bba4dbd2d8b33b82e875105d\",\n  AAVE_USD: \"0xe3f0dede4b499c07e12475087ab1a084b5f93bc0\",\n  YFI_USD: \"0x8a4d74003870064d41d4f84940550911fbfccf04\",\n  SPELL_USD: \"0x8640b23468815902e011948f3ab173e1e83f9879\",\n};\nconst timezoneOffset = -new Date().getTimezoneOffset() * 60;\n\nfunction fillGaps(prices: Price[], periodSeconds: number) {\n  if (prices.length < 2) {\n    return prices;\n  }\n\n  const newPrices = [prices[0]];\n  let prevTime = prices[0].time;\n  for (let i = 1; i < prices.length; i++) {\n    const { time, open, low } = prices[i];\n    if (prevTime) {\n      let j = (time - prevTime) / periodSeconds - 1;\n      while (j > 0) {\n        newPrices.push({\n          time: time - j * periodSeconds,\n          open,\n          close: open,\n          high: open * 1.0003,\n          low: open * 0.9996,\n        });\n        j--;\n      }\n    }\n\n    prevTime = time;\n    \n    if (low === 0) {\n      newPrices.push({\n        ...prices[i],\n        low: open * 0.9996,\n      });\n    } else {\n      newPrices.push(prices[i]);\n    }\n  }\n\n  return newPrices;\n}\n\nasync function getChartPricesFromStats(_chainId: ChainId, symbol: TokenSymbol, period: Period) {\n  if ([\"WBTC\", \"WETH\"].includes(symbol)) {\n    symbol = symbol.substr(1);\n  }\n  const hostname = \"https://swaps-stats-kltusqhvaa-uw.a.run.app/\";\n  // const hostname = \"http://localhost:8080/\";\n  const timeDiff = CHART_PERIODS[period] * 3000;\n  const from = Math.floor(Date.now() / 1000 - timeDiff);\n  const url = `${hostname}api/candles/${symbol}?preferableChainId=42161&period=${period}&from=${from}&preferableSource=fast`;\n  const TIMEOUT = 5000;\n  const res: Response = await new Promise(async (resolve, reject) => {\n    let done = false;\n    setTimeout(() => {\n      done = true;\n      reject(new Error(`request timeout ${url}`));\n    }, TIMEOUT);\n\n    let lastEx: any;\n    for (let i = 0; i < 3; i++) {\n      if (done) return;\n      try {\n        const res = await fetch(url);\n        resolve(res);\n        return;\n      } catch (ex) {\n        await sleep(300);\n        lastEx = ex;\n      }\n    }\n    reject(lastEx);\n  });\n\n  if (!res.ok) {\n    throw new Error(`request failed ${res.status} ${res.statusText}`);\n  }\n\n  let json = await res.json();\n  let prices = json?.prices;\n  if (!prices || prices?.length < 10) {\n    throw new Error(`not enough prices data: ${prices?.length}`);\n  }\n\n  const OBSOLETE_THRESHOLD = Date.now() / 1000 - 60 * 30; // 30 min ago\n  const updatedAt = json?.updatedAt || 0;\n  if (updatedAt < OBSOLETE_THRESHOLD) {\n    throw new Error(\n      \"chart data is obsolete, last price record at \" +\n        new Date(updatedAt * 1000).toISOString() +\n        \" now: \" +\n        new Date().toISOString()\n    );\n  }\n\n  prices = prices.map(({ t, o: open, c: close, h: high, l: low }, i: number) => {\n    if (i !== 0) {\n      // set open to close\n      // prices are sorted in timestamp ascending order\n      open = prices[i-1].c;\n    }\n    return {\n      time: t + timezoneOffset,\n      open,\n      close,\n      high,\n      low,\n    };\n  });\n\n  return prices;\n}\n\nfunction getCandlesFromPrices(prices, period: Period) {\n  const periodTime = CHART_PERIODS[period];\n\n  if (prices.length < 2) {\n    return [];\n  }\n\n  const candles = [];\n  const first = prices[0];\n  let prevTsGroup = Math.floor(first[0] / periodTime) * periodTime;\n  let prevPrice = first[1];\n  let o = prevPrice;\n  let h = prevPrice;\n  let l = prevPrice;\n  let c = prevPrice;\n  for (let i = 1; i < prices.length; i++) {\n    const [ts, price] = prices[i];\n    const tsGroup = Math.floor(ts / periodTime) * periodTime;\n    if (prevTsGroup !== tsGroup) {\n      candles.push({ t: prevTsGroup + timezoneOffset, o, h, l, c });\n      o = c;\n      h = Math.max(o, c);\n      l = Math.min(o, c);\n    }\n    c = price;\n    h = Math.max(h, price);\n    l = Math.min(l, price);\n    prevTsGroup = tsGroup;\n  }\n\n  return candles.map(({ t: time, o: open, c: close, h: high, l: low }) => ({\n    time,\n    open,\n    close,\n    high,\n    low,\n  }));\n}\n\nasync function getChainlinkChartPricesFromGraph(symbol: TokenSymbol, period: Period) {\n  if ([\"WBTC\", \"WETH\"].includes(symbol)) {\n    symbol = symbol.substr(1);\n  }\n  const marketName = symbol + \"_USD\";\n  const feedId = FEED_ID_MAP[marketName];\n  if (!feedId) {\n    throw new Error(`undefined marketName ${marketName}`);\n  }\n  const PER_CHUNK = 1000;\n  const CHUNKS_TOTAL = 6;\n  const requests = [];\n  for (let i = 0; i < CHUNKS_TOTAL; i++) {\n    const query = gql(`{\n      rounds(\n        first: ${PER_CHUNK},\n        skip: ${i * PER_CHUNK},\n        orderBy: unixTimestamp,\n        orderDirection: desc,\n        where: {feed: \"${feedId.toLowerCase()}\"}\n      ) {\n        unixTimestamp,\n        value\n      }\n    }`);\n    requests.push(chainlinkClient.query({ query }));\n  }\n\n  return Promise.all(requests)\n    .then((chunks) => {\n      let prices = [];\n      const uniqTs = new Set();\n      chunks.forEach((chunk) => {\n        chunk.data.rounds.forEach((item: any) => {\n          if (uniqTs.has(item.unixTimestamp)) {\n            return;\n          }\n\n          uniqTs.add(item.unixTimestamp);\n          prices.push([item.unixTimestamp, Number(item.value) / 1e8]);\n        });\n      });\n\n      prices.sort(([timeA], [timeB]) => timeA - timeB);\n      prices = getCandlesFromPrices(prices, period);\n      return prices;\n    })\n    .catch((err) => {\n      console.error(\"Failed to fetch chainlink prices\", err);\n    });\n}\n\nexport function useChartPrices(chainId: ChainId, symbol: TokenSymbol, isStable: boolean, period: Period, currentAveragePrice: ethers.BigNumber) {\n  const swrKey = !isStable && symbol ? [\"getChartCandles\", chainId, symbol, period] : null;\n  let { data: prices, mutate: updatePrices } = useSWR(swrKey, {\n    fetcher: async (...args) => {\n      try {\n        return await getChartPricesFromStats(chainId, symbol, period);\n      } catch (ex) {\n        console.warn(ex);\n        console.warn(\"Switching to graph chainlink data\");\n        try {\n          return await getChainlinkChartPricesFromGraph(symbol, period);\n        } catch (ex2) {\n          console.warn(\"getChainlinkChartPricesFromGraph failed\");\n          console.warn(ex2);\n          return [];\n        }\n      }\n    },\n    dedupingInterval: 60000,\n    focusThrottleInterval: 60000 * 10,\n  });\n\n  const currentAveragePriceString = currentAveragePrice && currentAveragePrice.toString();\n  const retPrices = useMemo(() => {\n    if (isStable) {\n      return getStablePriceData(period);\n    }\n\n    if (!prices) {\n      return [];\n    }\n\n    let _prices = [...prices];\n    if (currentAveragePriceString && prices.length) {\n      _prices = appendCurrentAveragePrice(_prices, BigNumber.from(currentAveragePriceString), period);\n    }\n\n    return fillGaps(_prices, CHART_PERIODS[period]);\n  }, [prices, isStable, currentAveragePriceString, period]);\n\n  return [retPrices, updatePrices];\n}\n\nfunction appendCurrentAveragePrice(prices: Price[], currentAveragePrice: ethers.BigNumber, period: Period) {\n  const periodSeconds = CHART_PERIODS[period];\n  const currentCandleTime = Math.floor(Date.now() / 1000 / periodSeconds) * periodSeconds + timezoneOffset;\n  const last = prices[prices.length - 1];\n  const averagePriceValue = parseFloat(formatAmount(currentAveragePrice, USD_DECIMALS, 2));\n  if (currentCandleTime === last.time) {\n    last.close = averagePriceValue;\n    last.high = Math.max(last.high, averagePriceValue);\n    last.low = Math.max(last.low, averagePriceValue);\n    return prices;\n  } else {\n    const newCandle = {\n      time: currentCandleTime,\n      open: last.close,\n      close: averagePriceValue,\n      high: averagePriceValue,\n      low: averagePriceValue,\n    };\n    return [...prices, newCandle];\n  }\n}\n\nfunction getStablePriceData(period: Period) {\n  const periodSeconds = CHART_PERIODS[period];\n  const now = Math.floor(Date.now() / 1000 / periodSeconds) * periodSeconds;\n  let priceData = [];\n  for (let i = 100; i > 0; i--) {\n    priceData.push({\n      time: now - i * periodSeconds,\n      open: 1,\n      close: 1,\n      high: 1,\n      low: 1,\n    });\n  }\n  return priceData;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}