{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { isOffline } from '../../core/connection';\nimport { PriorityQueue } from '../../lib/priority-queue';\nimport { PersistedPriorityQueue } from '../../lib/priority-queue/persisted';\nimport { toFacade } from '../../lib/to-facade';\nimport batch from './batched-dispatcher';\nimport standard from './fetch-dispatcher';\nimport { normalize } from './normalize';\nimport { scheduleFlush } from './schedule-flush';\n\nfunction onAlias(analytics, json) {\n  var _a, _b, _c, _d;\n\n  var user = analytics.user();\n  json.previousId = (_c = (_b = (_a = json.previousId) !== null && _a !== void 0 ? _a : json.from) !== null && _b !== void 0 ? _b : user.id()) !== null && _c !== void 0 ? _c : user.anonymousId();\n  json.userId = (_d = json.userId) !== null && _d !== void 0 ? _d : json.to;\n  delete json.from;\n  delete json.to;\n  return json;\n}\n\nexport function segmentio(analytics, settings, integrations) {\n  var _a, _b, _c, _d;\n\n  var buffer = analytics.options.disableClientPersistence ? new PriorityQueue(analytics.queue.queue.maxAttempts, []) : new PersistedPriorityQueue(analytics.queue.queue.maxAttempts, \"dest-Segment.io\");\n  var flushing = false;\n  var apiHost = (_a = settings === null || settings === void 0 ? void 0 : settings.apiHost) !== null && _a !== void 0 ? _a : 'api.segment.io/v1';\n  var protocol = (_b = settings === null || settings === void 0 ? void 0 : settings.protocol) !== null && _b !== void 0 ? _b : 'https';\n  var remote = \"\".concat(protocol, \"://\").concat(apiHost);\n  var client = ((_c = settings === null || settings === void 0 ? void 0 : settings.deliveryStrategy) === null || _c === void 0 ? void 0 : _c.strategy) === 'batching' ? batch(apiHost, (_d = settings === null || settings === void 0 ? void 0 : settings.deliveryStrategy) === null || _d === void 0 ? void 0 : _d.config) : standard();\n\n  function send(ctx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, json;\n      return __generator(this, function (_a) {\n        if (isOffline()) {\n          buffer.push(ctx); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n          scheduleFlush(flushing, buffer, segmentio, scheduleFlush);\n          return [2\n          /*return*/\n          , ctx];\n        }\n\n        path = ctx.event.type.charAt(0);\n        json = toFacade(ctx.event).json();\n\n        if (ctx.event.type === 'track') {\n          delete json.traits;\n        }\n\n        if (ctx.event.type === 'alias') {\n          json = onAlias(analytics, json);\n        }\n\n        return [2\n        /*return*/\n        , client.dispatch(\"\".concat(remote, \"/\").concat(path), normalize(analytics, json, settings, integrations)).then(function () {\n          return ctx;\n        }).catch(function (err) {\n          if (err.type === 'error' || err.message === 'Failed to fetch') {\n            buffer.push(ctx); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n            scheduleFlush(flushing, buffer, segmentio, scheduleFlush);\n          }\n\n          return ctx;\n        })];\n      });\n    });\n  }\n\n  var segmentio = {\n    name: 'Segment.io',\n    type: 'after',\n    version: '0.1.0',\n    isLoaded: function () {\n      return true;\n    },\n    load: function () {\n      return Promise.resolve();\n    },\n    track: send,\n    identify: send,\n    page: send,\n    alias: send,\n    group: send\n  };\n  return segmentio;\n}","map":{"version":3,"sources":["../../../../src/plugins/segmentio/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { isOffline } from '../../core/connection';\nimport { PriorityQueue } from '../../lib/priority-queue';\nimport { PersistedPriorityQueue } from '../../lib/priority-queue/persisted';\nimport { toFacade } from '../../lib/to-facade';\nimport batch from './batched-dispatcher';\nimport standard from './fetch-dispatcher';\nimport { normalize } from './normalize';\nimport { scheduleFlush } from './schedule-flush';\nfunction onAlias(analytics, json) {\n    var _a, _b, _c, _d;\n    var user = analytics.user();\n    json.previousId =\n        (_c = (_b = (_a = json.previousId) !== null && _a !== void 0 ? _a : json.from) !== null && _b !== void 0 ? _b : user.id()) !== null && _c !== void 0 ? _c : user.anonymousId();\n    json.userId = (_d = json.userId) !== null && _d !== void 0 ? _d : json.to;\n    delete json.from;\n    delete json.to;\n    return json;\n}\nexport function segmentio(analytics, settings, integrations) {\n    var _a, _b, _c, _d;\n    var buffer = analytics.options.disableClientPersistence\n        ? new PriorityQueue(analytics.queue.queue.maxAttempts, [])\n        : new PersistedPriorityQueue(analytics.queue.queue.maxAttempts, \"dest-Segment.io\");\n    var flushing = false;\n    var apiHost = (_a = settings === null || settings === void 0 ? void 0 : settings.apiHost) !== null && _a !== void 0 ? _a : 'api.segment.io/v1';\n    var protocol = (_b = settings === null || settings === void 0 ? void 0 : settings.protocol) !== null && _b !== void 0 ? _b : 'https';\n    var remote = \"\".concat(protocol, \"://\").concat(apiHost);\n    var client = ((_c = settings === null || settings === void 0 ? void 0 : settings.deliveryStrategy) === null || _c === void 0 ? void 0 : _c.strategy) === 'batching'\n        ? batch(apiHost, (_d = settings === null || settings === void 0 ? void 0 : settings.deliveryStrategy) === null || _d === void 0 ? void 0 : _d.config)\n        : standard();\n    function send(ctx) {\n        return __awaiter(this, void 0, void 0, function () {\n            var path, json;\n            return __generator(this, function (_a) {\n                if (isOffline()) {\n                    buffer.push(ctx);\n                    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                    scheduleFlush(flushing, buffer, segmentio, scheduleFlush);\n                    return [2 /*return*/, ctx];\n                }\n                path = ctx.event.type.charAt(0);\n                json = toFacade(ctx.event).json();\n                if (ctx.event.type === 'track') {\n                    delete json.traits;\n                }\n                if (ctx.event.type === 'alias') {\n                    json = onAlias(analytics, json);\n                }\n                return [2 /*return*/, client\n                        .dispatch(\"\".concat(remote, \"/\").concat(path), normalize(analytics, json, settings, integrations))\n                        .then(function () { return ctx; })\n                        .catch(function (err) {\n                        if (err.type === 'error' || err.message === 'Failed to fetch') {\n                            buffer.push(ctx);\n                            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                            scheduleFlush(flushing, buffer, segmentio, scheduleFlush);\n                        }\n                        return ctx;\n                    })];\n            });\n        });\n    }\n    var segmentio = {\n        name: 'Segment.io',\n        type: 'after',\n        version: '0.1.0',\n        isLoaded: function () { return true; },\n        load: function () { return Promise.resolve(); },\n        track: send,\n        identify: send,\n        page: send,\n        alias: send,\n        group: send,\n    };\n    return segmentio;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}