{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Screen = void 0;\n\nvar inherits_1 = __importDefault(require(\"inherits\"));\n\nvar page_1 = require(\"./page\");\n\nvar track_1 = require(\"./track\");\n\nfunction Screen(dictionary, opts) {\n  page_1.Page.call(this, dictionary, opts);\n}\n\nexports.Screen = Screen;\ninherits_1.default(Screen, page_1.Page);\n\nScreen.prototype.action = function () {\n  return \"screen\";\n};\n\nScreen.prototype.type = Screen.prototype.action;\n\nScreen.prototype.event = function (name) {\n  return name ? \"Viewed \" + name + \" Screen\" : \"Loaded a Screen\";\n};\n\nScreen.prototype.track = function (name) {\n  var json = this.json();\n  json.event = this.event(name);\n  json.timestamp = this.timestamp();\n  json.properties = this.properties();\n  return new track_1.Track(json, this.opts);\n};","map":{"version":3,"sources":["../lib/screen.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAEA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAgBA,SAAgB,MAAhB,CAAuB,UAAvB,EAAmC,IAAnC,EAAuC;EACrC,MAAA,CAAA,IAAA,CAAK,IAAL,CAAU,IAAV,EAAgB,UAAhB,EAA4B,IAA5B;AACD;;AAFD,OAAA,CAAA,MAAA,GAAA,MAAA;AAIA,UAAA,CAAA,OAAA,CAAQ,MAAR,EAAgB,MAAA,CAAA,IAAhB;;AAOA,MAAM,CAAC,SAAP,CAAiB,MAAjB,GAA0B,YAAA;EACxB,OAAO,QAAP;AACD,CAFD;;AAUA,MAAM,CAAC,SAAP,CAAiB,IAAjB,GAAwB,MAAM,CAAC,SAAP,CAAiB,MAAzC;;AASA,MAAM,CAAC,SAAP,CAAiB,KAAjB,GAAyB,UAAU,IAAV,EAAc;EACrC,OAAO,IAAI,GAAG,YAAY,IAAZ,GAAmB,SAAtB,GAAkC,iBAA7C;AACD,CAFD;;AAWA,MAAM,CAAC,SAAP,CAAiB,KAAjB,GAAyB,UAAU,IAAV,EAAc;EACrC,IAAI,IAAI,GAAG,KAAK,IAAL,EAAX;EACA,IAAI,CAAC,KAAL,GAAa,KAAK,KAAL,CAAW,IAAX,CAAb;EACA,IAAI,CAAC,SAAL,GAAiB,KAAK,SAAL,EAAjB;EACA,IAAI,CAAC,UAAL,GAAkB,KAAK,UAAL,EAAlB;EACA,OAAO,IAAI,OAAA,CAAA,KAAJ,CAAU,IAAV,EAAgB,KAAK,IAArB,CAAP;AACD,CAND","sourcesContent":["\"use strict\";\n\nimport inherit from \"inherits\";\nimport { Page } from \"./page\";\nimport { Track } from \"./track\";\n\n/**\n * Initialize a new `Screen` facade with a `dictionary` of arguments.\n *\n * Note that this class extends {@link Page}, so its methods are available to\n * instances of this class as well.\n *\n * @param {Object} dictionary - The object to wrap.\n * @param {string} [dictionary.category] - The page category.\n * @param {string} [dictionary.name] - The page name.\n * @param {string} [dictionary.properties] - The page properties.\n * @param {Object} opts - Options about what kind of Facade to create.\n *\n * @augments Page\n */\nexport function Screen(dictionary, opts) {\n  Page.call(this, dictionary, opts);\n}\n\ninherit(Screen, Page);\n\n/**\n * Return the type of facade this is. This will always return `\"screen\"`.\n *\n * @return {string}\n */\nScreen.prototype.action = function () {\n  return \"screen\";\n};\n\n/**\n * An alias for {@link Screen#action}.\n *\n * @function\n * @return {string}\n */\nScreen.prototype.type = Screen.prototype.action;\n\n/**\n * Get an event name from this screen call. If `name` is present, this will be\n * `Viewed $name Screen`; otherwise, it will be `Loaded a Screen`.\n *\n * @param {string} name - The name of this screen.\n * @return {string}\n */\nScreen.prototype.event = function (name) {\n  return name ? \"Viewed \" + name + \" Screen\" : \"Loaded a Screen\";\n};\n\n/**\n * Convert this Screen to a {@link Track} facade. The inputted `name` will be\n * converted to the Track's event name via {@link Screen#event}.\n *\n * @param {string} name\n * @return {Track}\n */\nScreen.prototype.track = function (name) {\n  let json = this.json();\n  json.event = this.event(name);\n  json.timestamp = this.timestamp();\n  json.properties = this.properties();\n  return new Track(json, this.opts);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}