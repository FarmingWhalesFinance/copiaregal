{"ast":null,"code":"export function transformSnippetCall(_a) {\n  var methodName = _a[0],\n      args = _a.slice(1);\n\n  return {\n    method: methodName,\n    resolve: function () {},\n    reject: console.error,\n    args: args,\n    called: false\n  };\n}\n\nvar normalizeSnippetBuffer = function (buffer) {\n  return buffer.map(transformSnippetCall);\n};\n/**\n * Fetch the buffered method calls from the window object and normalize them.\n * This removes existing buffered calls from the window object.\n */\n\n\nexport var popSnippetWindowBuffer = function () {\n  var wa = window.analytics;\n  if (!Array.isArray(wa)) return [];\n  var buffered = wa.splice(0, wa.length);\n  return normalizeSnippetBuffer(buffered);\n};","map":{"version":3,"sources":["../../../../src/core/buffer/snippet.ts"],"names":[],"mappings":"AAMA,OAAM,SAAU,oBAAV,CAA+B,EAA/B,EAG4B;MAFhC,UAAU,GAAA,EAAA,CAAA,CAAA,C;MACP,IAAI,GAAA,EAAA,CAAA,KAAA,CAAA,CAAA,C;;EAEP,OAAO;IACL,MAAM,EAAE,UADH;IAEL,OAAO,EAAE,YAAA,CAAQ,CAFZ;IAGL,MAAM,EAAE,OAAO,CAAC,KAHX;IAIL,IAAI,EAAA,IAJC;IAKL,MAAM,EAAE;EALH,CAAP;AAOD;;AAED,IAAM,sBAAsB,GAAG,UAAC,MAAD,EAAsB;EACnD,OAAO,MAAM,CAAC,GAAP,CAAW,oBAAX,CAAP;AACD,CAFD;AAcA;;;AAGG;;;AACH,OAAO,IAAM,sBAAsB,GAAG,YAAA;EACpC,IAAM,EAAE,GAAG,MAAM,CAAC,SAAlB;EACA,IAAI,CAAC,KAAK,CAAC,OAAN,CAAc,EAAd,CAAL,EAAwB,OAAO,EAAP;EACxB,IAAM,QAAQ,GAAG,EAAE,CAAC,MAAH,CAAU,CAAV,EAAa,EAAE,CAAC,MAAhB,CAAjB;EACA,OAAO,sBAAsB,CAAC,QAAD,CAA7B;AACD,CALM","sourceRoot":"","sourcesContent":["export function transformSnippetCall(_a) {\n    var methodName = _a[0], args = _a.slice(1);\n    return {\n        method: methodName,\n        resolve: function () { },\n        reject: console.error,\n        args: args,\n        called: false,\n    };\n}\nvar normalizeSnippetBuffer = function (buffer) {\n    return buffer.map(transformSnippetCall);\n};\n/**\n * Fetch the buffered method calls from the window object and normalize them.\n * This removes existing buffered calls from the window object.\n */\nexport var popSnippetWindowBuffer = function () {\n    var wa = window.analytics;\n    if (!Array.isArray(wa))\n        return [];\n    var buffered = wa.splice(0, wa.length);\n    return normalizeSnippetBuffer(buffered);\n};\n//# sourceMappingURL=snippet.js.map"]},"metadata":{},"sourceType":"module"}