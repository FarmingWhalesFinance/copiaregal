{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar getHighWord = require('@stdlib/number-float64-base-get-high-word');\n\nvar EXP_MASK = require('@stdlib/constants-float64-high-word-exponent-mask');\n\nvar BIAS = require('@stdlib/constants-float64-exponent-bias'); // MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\n\n\nfunction exponent(x) {\n  // Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n  var high = getHighWord(x); // Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\n  high = (high & EXP_MASK) >>> 20; // Remove the bias and return:\n\n  return high - BIAS | 0; // asm type annotation\n} // EXPORTS //\n\n\nmodule.exports = exponent;","map":{"version":3,"names":["getHighWord","require","EXP_MASK","BIAS","exponent","x","high","module","exports"],"sources":["C:/Users/rober/Documents/copiaswaps-client/swaps-client/node_modules/@stdlib/number-float64-base-exponent/lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar EXP_MASK = require( '@stdlib/constants-float64-high-word-exponent-mask' );\nvar BIAS = require( '@stdlib/constants-float64-exponent-bias' );\n\n\n// MAIN //\n\n/**\n* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.\n*\n* @param {number} x - input value\n* @returns {integer32} unbiased exponent\n*\n* @example\n* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307\n* // returns -1019\n*\n* @example\n* var exp = exponent( -3.14 );\n* // returns 1\n*\n* @example\n* var exp = exponent( 0.0 );\n* // returns -1023\n*\n* @example\n* var exp = exponent( NaN );\n* // returns 1024\n*/\nfunction exponent( x ) {\n\t// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:\n\tvar high = getHighWord( x );\n\n\t// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:\n\thigh = ( high & EXP_MASK ) >>> 20;\n\n\t// Remove the bias and return:\n\treturn (high - BIAS)|0; // asm type annotation\n}\n\n\n// EXPORTS //\n\nmodule.exports = exponent;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAE,2CAAF,CAAzB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAE,mDAAF,CAAtB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAE,yCAAF,CAAlB,C,CAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,QAAT,CAAmBC,CAAnB,EAAuB;EACtB;EACA,IAAIC,IAAI,GAAGN,WAAW,CAAEK,CAAF,CAAtB,CAFsB,CAItB;;EACAC,IAAI,GAAG,CAAEA,IAAI,GAAGJ,QAAT,MAAwB,EAA/B,CALsB,CAOtB;;EACA,OAAQI,IAAI,GAAGH,IAAR,GAAc,CAArB,CARsB,CAQE;AACxB,C,CAGD;;;AAEAI,MAAM,CAACC,OAAP,GAAiBJ,QAAjB"},"metadata":{},"sourceType":"script"}