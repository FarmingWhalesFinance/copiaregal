{"ast":null,"code":"/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n'use strict'; // MODULES //\n\nvar hasOwnProp = require('@stdlib/assert-has-own-property');\n\nvar toStringTag = require('./tostringtag.js');\n\nvar toStr = require('./tostring.js'); // MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\n\n\nfunction nativeClass(v) {\n  var isOwn;\n  var tag;\n  var out;\n\n  if (v === null || v === void 0) {\n    return toStr.call(v);\n  }\n\n  tag = v[toStringTag];\n  isOwn = hasOwnProp(v, toStringTag); // Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\n  try {\n    v[toStringTag] = void 0;\n  } catch (err) {\n    // eslint-disable-line no-unused-vars\n    return toStr.call(v);\n  }\n\n  out = toStr.call(v);\n\n  if (isOwn) {\n    v[toStringTag] = tag;\n  } else {\n    delete v[toStringTag];\n  }\n\n  return out;\n} // EXPORTS //\n\n\nmodule.exports = nativeClass;","map":{"version":3,"names":["hasOwnProp","require","toStringTag","toStr","nativeClass","v","isOwn","tag","out","call","err","module","exports"],"sources":["C:/Users/rober/Documents/swaps-client/node_modules/@stdlib/utils-native-class/lib/polyfill.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar toStringTag = require( './tostringtag.js' );\nvar toStr = require( './tostring.js' );\n\n\n// MAIN //\n\n/**\n* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.\n*\n* @param {*} v - input value\n* @returns {string} string value indicating a specification defined classification of the input value\n*\n* @example\n* var str = nativeClass( 'a' );\n* // returns '[object String]'\n*\n* @example\n* var str = nativeClass( 5 );\n* // returns '[object Number]'\n*\n* @example\n* function Beep() {\n*     return this;\n* }\n* var str = nativeClass( new Beep() );\n* // returns '[object Object]'\n*/\nfunction nativeClass( v ) {\n\tvar isOwn;\n\tvar tag;\n\tvar out;\n\n\tif ( v === null || v === void 0 ) {\n\t\treturn toStr.call( v );\n\t}\n\ttag = v[ toStringTag ];\n\tisOwn = hasOwnProp( v, toStringTag );\n\n\t// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.\n\ttry {\n\t\tv[ toStringTag ] = void 0;\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn toStr.call( v );\n\t}\n\tout = toStr.call( v );\n\n\tif ( isOwn ) {\n\t\tv[ toStringTag ] = tag;\n\t} else {\n\t\tdelete v[ toStringTag ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nativeClass;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAE,iCAAF,CAAxB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAE,kBAAF,CAAzB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAE,eAAF,CAAnB,C,CAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,WAAT,CAAsBC,CAAtB,EAA0B;EACzB,IAAIC,KAAJ;EACA,IAAIC,GAAJ;EACA,IAAIC,GAAJ;;EAEA,IAAKH,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAK,KAAK,CAA9B,EAAkC;IACjC,OAAOF,KAAK,CAACM,IAAN,CAAYJ,CAAZ,CAAP;EACA;;EACDE,GAAG,GAAGF,CAAC,CAAEH,WAAF,CAAP;EACAI,KAAK,GAAGN,UAAU,CAAEK,CAAF,EAAKH,WAAL,CAAlB,CATyB,CAWzB;;EACA,IAAI;IACHG,CAAC,CAAEH,WAAF,CAAD,GAAmB,KAAK,CAAxB;EACA,CAFD,CAEE,OAAQQ,GAAR,EAAc;IAAE;IACjB,OAAOP,KAAK,CAACM,IAAN,CAAYJ,CAAZ,CAAP;EACA;;EACDG,GAAG,GAAGL,KAAK,CAACM,IAAN,CAAYJ,CAAZ,CAAN;;EAEA,IAAKC,KAAL,EAAa;IACZD,CAAC,CAAEH,WAAF,CAAD,GAAmBK,GAAnB;EACA,CAFD,MAEO;IACN,OAAOF,CAAC,CAAEH,WAAF,CAAR;EACA;;EACD,OAAOM,GAAP;AACA,C,CAGD;;;AAEAG,MAAM,CAACC,OAAP,GAAiBR,WAAjB"},"metadata":{},"sourceType":"script"}