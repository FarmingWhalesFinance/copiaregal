{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\Documents\\\\swaps-client\\\\src\\\\views\\\\Rewards\\\\Rewards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport useSWR from \"swr\";\nimport { getPageTitle, getTokenInfo, useChainId, useENS, fetcher, expandDecimals, ETH_DECIMALS, helperToast, useLocalStorageSerializeKey } from \"../../Helpers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { callContract } from \"../../Api\";\nimport { ethers } from \"ethers\";\nimport TraderRewards from \"./TraderRewards\";\nimport Leaderboard from \"./Leaderboard\";\nimport * as Styles from \"./Rewards.styles\";\nimport SEO from \"../../components/Common/SEO\";\nimport { getContract } from \"../../Addresses\";\nimport FeeDistributor from \"../../abis/FeeDistributor.json\";\nimport FeeDistributorReader from \"../../abis/FeeDistributorReader.json\";\nimport ViewSwitch from \"../../components/ViewSwitch/ViewSwitch\";\nimport { RoundDropdown } from \"../../components/RewardsRoundSelect/RewardsRoundSelect\";\nimport { getServerUrl } from \"src/lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PersonalHeader = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"Page-title-section mt-0\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Page-title\",\n    children: \"Trader Rewards || Coming Soon\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Page-description\",\n    children: \"Be in the top 8% of traders to earn weekly rewards.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 33,\n  columnNumber: 3\n}, this);\n\n_c = PersonalHeader;\n\nconst LeaderboardHeader = () => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"Page-title-section mt-0\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 43,\n  columnNumber: 3\n}, this);\n\n_c2 = LeaderboardHeader;\nexport default function Rewards(props) {\n  _s();\n\n  var _allRoundsRewardsData;\n\n  const {\n    connectWallet,\n    trackPageWithTraits,\n    trackAction,\n    analytics,\n    setPendingTxns,\n    infoTokens\n  } = props;\n  const {\n    chainId\n  } = useChainId();\n  const {\n    active,\n    account,\n    library\n  } = useWeb3React();\n  const {\n    ensName\n  } = useENS(account);\n  const [selectedRound, setSelectedRound] = useLocalStorageSerializeKey([chainId, \"Rewards-selected-round\"], \"latest\");\n  const [currentView, setCurrentView] = useLocalStorageSerializeKey([chainId, \"Rewards-current-view\"], \"Personal\");\n  const [pageTracked, setPageTracked] = useState(false);\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [nextRewards, setNextRewards] = useState();\n  const [claimDelay, setClaimDelay] = useState();\n  const feeDistributor = getContract(chainId, \"FeeDistributor\");\n  const feeDistributorReader = getContract(chainId, \"FeeDistributorReader\"); // Fetch all round data from server\n\n  const {\n    data: allRoundsRewardsData_,\n    error: failedFetchingRewards\n  } = useSWR([getServerUrl(chainId, \"/tradingRewards\")], {\n    fetcher: function () {\n      return fetch(...arguments).then(res => res.json());\n    }\n  });\n  const allRoundsRewardsData = Array.isArray(allRoundsRewardsData_) ? allRoundsRewardsData_ : undefined; // Fetch only the latest round's data from server\n\n  const {\n    data: currentRewardRound,\n    error: failedFetchingRoundRewards\n  } = useSWR([getServerUrl(chainId, \"/tradingRewards\"), selectedRound], {\n    fetcher: (url, round) => fetch(`${url}&round=${round}`).then(res => res.json())\n  });\n  const {\n    data: hasClaimed\n  } = useSWR([`Rewards:claimed:${active}`, chainId, feeDistributorReader, \"getUserClaimed\", feeDistributor, account !== null && account !== void 0 ? account : ethers.constants.AddressZero, (_allRoundsRewardsData = allRoundsRewardsData === null || allRoundsRewardsData === void 0 ? void 0 : allRoundsRewardsData.length) !== null && _allRoundsRewardsData !== void 0 ? _allRoundsRewardsData : 1], {\n    fetcher: fetcher(library, FeeDistributorReader)\n  }); // Fetch user proof\n\n  const {\n    data: userProof\n  } = useSWR([getServerUrl(chainId, \"/tradingRewardProof\"), selectedRound, account !== null && account !== void 0 ? account : ethers.constants.AddressZero], {\n    fetcher: (url, round, account) => fetch(`${url}&round=${round}&userAddress=${account}`).then(res => res.json())\n  }); // Get the data for the current user\n\n  const userData = useMemo(() => allRoundsRewardsData === null || allRoundsRewardsData === void 0 ? void 0 : allRoundsRewardsData.reduce((totals, round) => {\n    var _round$rewards;\n\n    const trader = (_round$rewards = round.rewards) === null || _round$rewards === void 0 ? void 0 : _round$rewards.find(trader => trader.user_address.toLowerCase() === (account === null || account === void 0 ? void 0 : account.toLowerCase()));\n\n    if (!trader) {\n      return totals;\n    }\n\n    let unclaimedRewards = totals.unclaimedRewards;\n    const userReward = ethers.BigNumber.from(trader.reward).add(trader.degen_reward);\n\n    if (hasClaimed && !hasClaimed[round.round]) {\n      unclaimedRewards = unclaimedRewards.add(userReward);\n    }\n\n    return {\n      totalTradingVolume: totals.totalTradingVolume.add(trader.volume),\n      totalRewards: totals.totalRewards.add(userReward),\n      unclaimedRewards\n    };\n  }, {\n    totalTradingVolume: ethers.BigNumber.from(0),\n    totalRewards: ethers.BigNumber.from(0),\n    unclaimedRewards: ethers.BigNumber.from(0)\n  }), [allRoundsRewardsData, hasClaimed, account]); // Extract round data from full API response\n\n  const [middleRow, setMiddleRow] = useState();\n  const roundData = useMemo(() => {\n    var _currentRewardRound$r;\n\n    if (!currentRewardRound || !!(currentRewardRound !== null && currentRewardRound !== void 0 && currentRewardRound.message)) {\n      setMiddleRow(undefined);\n      return undefined;\n    }\n\n    let hasSetMiddle = false;\n    const rewards = (_currentRewardRound$r = currentRewardRound.rewards) === null || _currentRewardRound$r === void 0 ? void 0 : _currentRewardRound$r.sort((a, b) => b.volume - a.volume).map((trader, index) => {\n      const positionReward = ethers.BigNumber.from(trader.reward);\n      const degenReward = ethers.BigNumber.from(trader.degen_reward);\n\n      if (!hasSetMiddle && positionReward.eq(0)) {\n        hasSetMiddle = true;\n        setMiddleRow(index);\n      }\n\n      return { ...trader,\n        totalReward: positionReward.add(degenReward),\n        positionReward,\n        degenReward\n      };\n    }); // Sort traders by highest to lowest in volume\n\n    return { ...currentRewardRound,\n      rewards\n    };\n  }, [currentRewardRound]); // Get volume, position and reward from user round data\n\n  const userRoundData = useMemo(() => {\n    var _currentRewardRound$r2;\n\n    if (!currentRewardRound) {\n      return undefined;\n    }\n\n    const leaderBoardIndex = (_currentRewardRound$r2 = currentRewardRound.rewards) === null || _currentRewardRound$r2 === void 0 ? void 0 : _currentRewardRound$r2.findIndex(trader => trader.user_address.toLowerCase() === (account === null || account === void 0 ? void 0 : account.toLowerCase()));\n    let traderData;\n\n    if (leaderBoardIndex !== undefined && leaderBoardIndex >= 0) {\n      traderData = currentRewardRound.rewards[leaderBoardIndex];\n    } // trader's data found\n\n\n    if (traderData) {\n      const positionReward = ethers.BigNumber.from(traderData.reward);\n      const degenReward = ethers.BigNumber.from(traderData.degen_reward);\n      return {\n        volume: ethers.BigNumber.from(traderData.volume),\n        totalReward: positionReward.add(degenReward),\n        position: leaderBoardIndex + 1,\n        positionReward,\n        degenReward\n      };\n    } else {\n      // trader not found but data exists so user has no rewards\n      return {\n        volume: ethers.BigNumber.from(0),\n        totalReward: ethers.BigNumber.from(0),\n        positionReward: ethers.BigNumber.from(0),\n        degenReward: ethers.BigNumber.from(0),\n        rewardAmountUsd: ethers.BigNumber.from(0)\n      };\n    }\n  }, [account, currentRewardRound]);\n  const eth = getTokenInfo(infoTokens, ethers.constants.AddressZero);\n  const ethPrice = eth === null || eth === void 0 ? void 0 : eth.maxPrimaryPrice;\n\n  if (ethPrice && userRoundData !== null && userRoundData !== void 0 && userRoundData.totalReward) {\n    var _userRoundData$totalR;\n\n    userRoundData.rewardAmountUsd = (_userRoundData$totalR = userRoundData.totalReward) === null || _userRoundData$totalR === void 0 ? void 0 : _userRoundData$totalR.mul(ethPrice).div(expandDecimals(1, ETH_DECIMALS));\n  }\n\n  let unclaimedRewardsUsd, totalRewardAmountUsd;\n\n  if (ethPrice && userData) {\n    unclaimedRewardsUsd = userData.unclaimedRewards.mul(ethPrice).div(expandDecimals(1, ETH_DECIMALS));\n    totalRewardAmountUsd = userData.totalRewards.mul(ethPrice).div(expandDecimals(1, ETH_DECIMALS));\n  }\n\n  let rewardsMessage = \"\";\n\n  if (!currentRewardRound) {\n    rewardsMessage = \"Fetching rewards\";\n  } else if (!!failedFetchingRoundRewards) {\n    rewardsMessage = \"Failed fetching current round rewards\";\n  } else if (!!failedFetchingRewards) {\n    rewardsMessage = \"Failed fetching rewards\";\n  } else {\n    if ((currentRewardRound === null || currentRewardRound === void 0 ? void 0 : currentRewardRound.length) === 0) {\n      rewardsMessage = \"No rewards\";\n    } else if (selectedRound === \"latest\") {\n      rewardsMessage = `Round ${Number.parseInt(currentRewardRound.round) + 1}`;\n    } else {\n      rewardsMessage = `Round ${selectedRound + 1}`;\n    }\n  }\n\n  const switchView = () => {\n    setCurrentView(currentView === \"Personal\" ? \"Leaderboard\" : \"Personal\");\n    trackAction && trackAction(\"Button clicked\", {\n      buttonName: \"Rewards panel\",\n      view: currentView === \"Leaderboard\" ? \"Rewards\" : \"Leaderboard\"\n    });\n  };\n\n  useEffect(() => {\n    const now = Date.now();\n    const buffer = 60 * 60 * 2 * 1000; // 2 hours\n\n    if (currentRewardRound && Number(currentRewardRound.end) + buffer > now) {\n      setClaimDelay(true);\n    } else {\n      setClaimDelay(false);\n    }\n  }, [currentRewardRound]);\n  useEffect(() => {\n    if (!!allRoundsRewardsData) {\n      const ends = allRoundsRewardsData.map(round => Number(round.end));\n      const max = Math.max(...ends);\n\n      if (!Number.isNaN(max)) {\n        setNextRewards(max);\n      }\n    }\n  }, [allRoundsRewardsData]); // Segment Analytics Page tracking\n\n  useEffect(() => {\n    if (!pageTracked && currentRewardRound && analytics) {\n      const traits = {\n        round: currentRewardRound.key\n      };\n      trackPageWithTraits(traits);\n      setPageTracked(true); // Prevent Page function being called twice\n    }\n  }, [currentRewardRound, pageTracked, trackPageWithTraits, analytics]);\n\n  const handleClaim = () => {\n    setIsClaiming(true); // helperToast.error(\"Claiming rewards is currently disabled\");\n\n    trackAction(\"Button clicked\", {\n      buttonName: \"Claim rewards\"\n    });\n    let error;\n\n    if (selectedRound === \"latest\") {\n      helperToast.error(\"Cannot claim rewards before round has ended\");\n      error = true;\n    }\n\n    if (!userProof) {\n      helperToast.error(\"Fetching merkle proof\");\n      error = true;\n    }\n\n    if (userProof.amount === \"0\") {\n      helperToast.error(`No rewards for round: ${selectedRound}`);\n      error = true;\n    }\n\n    if (!!(userProof !== null && userProof !== void 0 && userProof.message)) {\n      helperToast.error(`Invalid user proof`);\n      error = true;\n    }\n\n    if (error) {\n      setIsClaiming(true);\n      return;\n    }\n\n    const contract = new ethers.Contract(feeDistributor, FeeDistributor.abi, library.getSigner());\n    callContract(chainId, contract, \"withdraw\", [userProof.merkleProof, // proof\n    userProof.amount, // amount\n    selectedRound // round\n    ], {\n      sentMsg: \"Claim submitted!\",\n      failMsg: \"Claim failed.\",\n      successMsg: \"Claim completed!\",\n      setPendingTxns\n    }).finally(() => {\n      setIsClaiming(false);\n    });\n  };\n\n  const isLatestRound = selectedRound === \"latest\";\n  let hasClaimedRound;\n\n  if (selectedRound !== \"latest\" && hasClaimed) {\n    hasClaimedRound = hasClaimed[selectedRound];\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SEO, {\n      title: getPageTitle(\"Rewards\"),\n      description: \"Claim fees earned via being in the top 5% of traders on Mycelium Perpetual Swaps.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Styles.StyledRewardsPage, {\n      className: \"default-container page-layout\",\n      children: {\n        Personal: /*#__PURE__*/_jsxDEV(PersonalHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 23\n        }, this),\n        Leaderboard: /*#__PURE__*/_jsxDEV(LeaderboardHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 26\n        }, this)\n      }[currentView]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Rewards, \"A54Falc1mA9tzteeO9W2/USfq28=\", false, function () {\n  return [useChainId, useWeb3React, useENS, useLocalStorageSerializeKey, useLocalStorageSerializeKey, useSWR, useSWR, useSWR, useSWR];\n});\n\n_c3 = Rewards;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PersonalHeader\");\n$RefreshReg$(_c2, \"LeaderboardHeader\");\n$RefreshReg$(_c3, \"Rewards\");","map":{"version":3,"names":["React","useState","useMemo","useEffect","useSWR","getPageTitle","getTokenInfo","useChainId","useENS","fetcher","expandDecimals","ETH_DECIMALS","helperToast","useLocalStorageSerializeKey","useWeb3React","callContract","ethers","TraderRewards","Leaderboard","Styles","SEO","getContract","FeeDistributor","FeeDistributorReader","ViewSwitch","RoundDropdown","getServerUrl","PersonalHeader","LeaderboardHeader","Rewards","props","connectWallet","trackPageWithTraits","trackAction","analytics","setPendingTxns","infoTokens","chainId","active","account","library","ensName","selectedRound","setSelectedRound","currentView","setCurrentView","pageTracked","setPageTracked","isClaiming","setIsClaiming","nextRewards","setNextRewards","claimDelay","setClaimDelay","feeDistributor","feeDistributorReader","data","allRoundsRewardsData_","error","failedFetchingRewards","fetch","then","res","json","allRoundsRewardsData","Array","isArray","undefined","currentRewardRound","failedFetchingRoundRewards","url","round","hasClaimed","constants","AddressZero","length","userProof","userData","reduce","totals","trader","rewards","find","user_address","toLowerCase","unclaimedRewards","userReward","BigNumber","from","reward","add","degen_reward","totalTradingVolume","volume","totalRewards","middleRow","setMiddleRow","roundData","message","hasSetMiddle","sort","a","b","map","index","positionReward","degenReward","eq","totalReward","userRoundData","leaderBoardIndex","findIndex","traderData","position","rewardAmountUsd","eth","ethPrice","maxPrimaryPrice","mul","div","unclaimedRewardsUsd","totalRewardAmountUsd","rewardsMessage","Number","parseInt","switchView","buttonName","view","now","Date","buffer","end","ends","max","Math","isNaN","traits","key","handleClaim","amount","contract","Contract","abi","getSigner","merkleProof","sentMsg","failMsg","successMsg","finally","isLatestRound","hasClaimedRound","Personal"],"sources":["C:/Users/rober/Documents/swaps-client/src/views/Rewards/Rewards.js"],"sourcesContent":["import React, { useState, useMemo, useEffect } from \"react\";\n\nimport useSWR from \"swr\";\n\nimport {\n  getPageTitle,\n  getTokenInfo,\n  useChainId,\n  useENS,\n  fetcher,\n  expandDecimals,\n  ETH_DECIMALS,\n  helperToast,\n  useLocalStorageSerializeKey,\n} from \"../../Helpers\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { callContract } from \"../../Api\";\nimport { ethers } from \"ethers\";\nimport TraderRewards from \"./TraderRewards\";\nimport Leaderboard from \"./Leaderboard\";\nimport * as Styles from \"./Rewards.styles\";\n\nimport SEO from \"../../components/Common/SEO\";\nimport { getContract } from \"../../Addresses\";\n\nimport FeeDistributor from \"../../abis/FeeDistributor.json\";\nimport FeeDistributorReader from \"../../abis/FeeDistributorReader.json\";\nimport ViewSwitch from \"../../components/ViewSwitch/ViewSwitch\";\nimport { RoundDropdown } from \"../../components/RewardsRoundSelect/RewardsRoundSelect\";\nimport { getServerUrl } from \"src/lib\";\n\nconst PersonalHeader = () => (\n  <div className=\"Page-title-section mt-0\">\n    <div className=\"Page-title\">Trader Rewards || Coming Soon</div>\n    <div className=\"Page-description\">\n      Be in the top 8% of traders to earn weekly rewards.\n      \n    </div>\n  </div>\n);\n\nconst LeaderboardHeader = () => (\n  <div className=\"Page-title-section mt-0\">\n    \n  </div>\n);\n\nexport default function Rewards(props) {\n  const { connectWallet, trackPageWithTraits, trackAction, analytics, setPendingTxns, infoTokens } = props;\n\n  const { chainId } = useChainId();\n  const { active, account, library } = useWeb3React();\n  const { ensName } = useENS(account);\n\n  const [selectedRound, setSelectedRound] = useLocalStorageSerializeKey([chainId, \"Rewards-selected-round\"], \"latest\");\n\n  const [currentView, setCurrentView] = useLocalStorageSerializeKey([chainId, \"Rewards-current-view\"], \"Personal\");\n\n  const [pageTracked, setPageTracked] = useState(false);\n  const [isClaiming, setIsClaiming] = useState(false);\n  const [nextRewards, setNextRewards] = useState();\n  const [claimDelay, setClaimDelay] = useState();\n\n  const feeDistributor = getContract(chainId, \"FeeDistributor\");\n  const feeDistributorReader = getContract(chainId, \"FeeDistributorReader\");\n\n  // Fetch all round data from server\n  const { data: allRoundsRewardsData_, error: failedFetchingRewards } = useSWR(\n    [getServerUrl(chainId, \"/tradingRewards\")],\n    {\n      fetcher: (...args) => fetch(...args).then((res) => res.json()),\n    }\n  );\n\n  const allRoundsRewardsData = Array.isArray(allRoundsRewardsData_) ? allRoundsRewardsData_ : undefined;\n\n  // Fetch only the latest round's data from server\n  const { data: currentRewardRound, error: failedFetchingRoundRewards } = useSWR(\n    [getServerUrl(chainId, \"/tradingRewards\"), selectedRound],\n    {\n      fetcher: (url, round) => fetch(`${url}&round=${round}`).then((res) => res.json()),\n    }\n  );\n\n  const { data: hasClaimed } = useSWR(\n    [\n      `Rewards:claimed:${active}`,\n      chainId,\n      feeDistributorReader,\n      \"getUserClaimed\",\n      feeDistributor,\n      account ?? ethers.constants.AddressZero,\n      allRoundsRewardsData?.length ?? 1,\n    ],\n    {\n      fetcher: fetcher(library, FeeDistributorReader),\n    }\n  );\n\n  // Fetch user proof\n  const { data: userProof } = useSWR(\n    [getServerUrl(chainId, \"/tradingRewardProof\"), selectedRound, account ?? ethers.constants.AddressZero],\n    {\n      fetcher: (url, round, account) => fetch(`${url}&round=${round}&userAddress=${account}`).then((res) => res.json()),\n    }\n  );\n\n  // Get the data for the current user\n  const userData = useMemo(\n    () =>\n      allRoundsRewardsData?.reduce(\n        (totals, round) => {\n          const trader = round.rewards?.find((trader) => trader.user_address.toLowerCase() === account?.toLowerCase());\n          if (!trader) {\n            return totals;\n          }\n          let unclaimedRewards = totals.unclaimedRewards;\n          const userReward = ethers.BigNumber.from(trader.reward).add(trader.degen_reward);\n          if (hasClaimed && !hasClaimed[round.round]) {\n            unclaimedRewards = unclaimedRewards.add(userReward);\n          }\n          return {\n            totalTradingVolume: totals.totalTradingVolume.add(trader.volume),\n            totalRewards: totals.totalRewards.add(userReward),\n            unclaimedRewards,\n          };\n        },\n        {\n          totalTradingVolume: ethers.BigNumber.from(0),\n          totalRewards: ethers.BigNumber.from(0),\n          unclaimedRewards: ethers.BigNumber.from(0),\n        }\n      ),\n    [allRoundsRewardsData, hasClaimed, account]\n  );\n\n  // Extract round data from full API response\n  const [middleRow, setMiddleRow] = useState();\n  const roundData = useMemo(() => {\n    if (!currentRewardRound || !!currentRewardRound?.message) {\n      setMiddleRow(undefined);\n      return undefined;\n    }\n    let hasSetMiddle = false;\n    const rewards = currentRewardRound.rewards\n      ?.sort((a, b) => b.volume - a.volume)\n      .map((trader, index) => {\n        const positionReward = ethers.BigNumber.from(trader.reward);\n        const degenReward = ethers.BigNumber.from(trader.degen_reward);\n        if (!hasSetMiddle && positionReward.eq(0)) {\n          hasSetMiddle = true;\n          setMiddleRow(index);\n        }\n        return {\n          ...trader,\n          totalReward: positionReward.add(degenReward),\n          positionReward,\n          degenReward,\n        };\n      }); // Sort traders by highest to lowest in volume\n    return {\n      ...currentRewardRound,\n      rewards,\n    };\n  }, [currentRewardRound]);\n\n  // Get volume, position and reward from user round data\n  const userRoundData = useMemo(() => {\n    if (!currentRewardRound) {\n      return undefined;\n    }\n    const leaderBoardIndex = currentRewardRound.rewards?.findIndex(\n      (trader) => trader.user_address.toLowerCase() === account?.toLowerCase()\n    );\n    let traderData;\n    if (leaderBoardIndex !== undefined && leaderBoardIndex >= 0) {\n      traderData = currentRewardRound.rewards[leaderBoardIndex];\n    }\n    // trader's data found\n    if (traderData) {\n      const positionReward = ethers.BigNumber.from(traderData.reward);\n      const degenReward = ethers.BigNumber.from(traderData.degen_reward);\n      return {\n        volume: ethers.BigNumber.from(traderData.volume),\n        totalReward: positionReward.add(degenReward),\n        position: leaderBoardIndex + 1,\n        positionReward,\n        degenReward,\n      };\n    } else {\n      // trader not found but data exists so user has no rewards\n      return {\n        volume: ethers.BigNumber.from(0),\n        totalReward: ethers.BigNumber.from(0),\n        positionReward: ethers.BigNumber.from(0),\n        degenReward: ethers.BigNumber.from(0),\n        rewardAmountUsd: ethers.BigNumber.from(0),\n      };\n    }\n  }, [account, currentRewardRound]);\n\n  const eth = getTokenInfo(infoTokens, ethers.constants.AddressZero);\n  const ethPrice = eth?.maxPrimaryPrice;\n\n  if (ethPrice && userRoundData?.totalReward) {\n    userRoundData.rewardAmountUsd = userRoundData.totalReward?.mul(ethPrice).div(expandDecimals(1, ETH_DECIMALS));\n  }\n\n  let unclaimedRewardsUsd, totalRewardAmountUsd;\n  if (ethPrice && userData) {\n    unclaimedRewardsUsd = userData.unclaimedRewards.mul(ethPrice).div(expandDecimals(1, ETH_DECIMALS));\n    totalRewardAmountUsd = userData.totalRewards.mul(ethPrice).div(expandDecimals(1, ETH_DECIMALS));\n  }\n\n  let rewardsMessage = \"\";\n  if (!currentRewardRound) {\n    rewardsMessage = \"Fetching rewards\";\n  } else if (!!failedFetchingRoundRewards) {\n    rewardsMessage = \"Failed fetching current round rewards\";\n  } else if (!!failedFetchingRewards) {\n    rewardsMessage = \"Failed fetching rewards\";\n  } else {\n    if (currentRewardRound?.length === 0) {\n      rewardsMessage = \"No rewards\";\n    } else if (selectedRound === \"latest\") {\n      rewardsMessage = `Round ${Number.parseInt(currentRewardRound.round) + 1}`;\n    } else {\n      rewardsMessage = `Round ${selectedRound + 1}`;\n    }\n  }\n\n  const switchView = () => {\n    setCurrentView(currentView === \"Personal\" ? \"Leaderboard\" : \"Personal\");\n    trackAction &&\n      trackAction(\"Button clicked\", {\n        buttonName: \"Rewards panel\",\n        view: currentView === \"Leaderboard\" ? \"Rewards\" : \"Leaderboard\",\n      });\n  };\n\n  useEffect(() => {\n    const now = Date.now();\n    const buffer = 60 * 60 * 2 * 1000; // 2 hours\n    if (currentRewardRound && Number(currentRewardRound.end) + buffer > now) {\n      setClaimDelay(true);\n    } else {\n      setClaimDelay(false);\n    }\n  }, [currentRewardRound]);\n\n  useEffect(() => {\n    if (!!allRoundsRewardsData) {\n      const ends = allRoundsRewardsData.map((round) => Number(round.end));\n      const max = Math.max(...ends);\n      if (!Number.isNaN(max)) {\n        setNextRewards(max);\n      }\n    }\n  }, [allRoundsRewardsData]);\n\n  // Segment Analytics Page tracking\n  useEffect(() => {\n    if (!pageTracked && currentRewardRound && analytics) {\n      const traits = {\n        round: currentRewardRound.key,\n      };\n      trackPageWithTraits(traits);\n      setPageTracked(true); // Prevent Page function being called twice\n    }\n  }, [currentRewardRound, pageTracked, trackPageWithTraits, analytics]);\n\n  const handleClaim = () => {\n    setIsClaiming(true);\n    // helperToast.error(\"Claiming rewards is currently disabled\");\n    trackAction(\"Button clicked\", {\n      buttonName: \"Claim rewards\",\n    });\n    let error;\n    if (selectedRound === \"latest\") {\n      helperToast.error(\"Cannot claim rewards before round has ended\");\n      error = true;\n    }\n    if (!userProof) {\n      helperToast.error(\"Fetching merkle proof\");\n      error = true;\n    }\n    if (userProof.amount === \"0\") {\n      helperToast.error(`No rewards for round: ${selectedRound}`);\n      error = true;\n    }\n    if (!!userProof?.message) {\n      helperToast.error(`Invalid user proof`);\n      error = true;\n    }\n    if (error) {\n      setIsClaiming(true);\n      return;\n    }\n    const contract = new ethers.Contract(feeDistributor, FeeDistributor.abi, library.getSigner());\n    callContract(\n      chainId,\n      contract,\n      \"withdraw\",\n      [\n        userProof.merkleProof, // proof\n        userProof.amount, // amount\n        selectedRound, // round\n      ],\n      {\n        sentMsg: \"Claim submitted!\",\n        failMsg: \"Claim failed.\",\n        successMsg: \"Claim completed!\",\n        setPendingTxns,\n      }\n    ).finally(() => {\n      setIsClaiming(false);\n    });\n  };\n\n  const isLatestRound = selectedRound === \"latest\";\n  let hasClaimedRound;\n  if (selectedRound !== \"latest\" && hasClaimed) {\n    hasClaimedRound = hasClaimed[selectedRound];\n  }\n\n  return (\n    <>\n      <SEO\n        title={getPageTitle(\"Rewards\")}\n        description=\"Claim fees earned via being in the top 5% of traders on Mycelium Perpetual Swaps.\"\n      />\n      <Styles.StyledRewardsPage className=\"default-container page-layout\">\n        {\n          {\n            Personal: <PersonalHeader />,\n            Leaderboard: <LeaderboardHeader />,\n          }[currentView]\n        }\n        \n        \n      </Styles.StyledRewardsPage>\n    </>\n  ); \n} \n"],"mappings":"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"},"metadata":{},"sourceType":"module"}