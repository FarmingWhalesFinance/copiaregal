{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Alias = void 0;\n\nvar inherits_1 = __importDefault(require(\"inherits\"));\n\nvar facade_1 = require(\"./facade\");\n\nfunction Alias(dictionary, opts) {\n  facade_1.Facade.call(this, dictionary, opts);\n}\n\nexports.Alias = Alias;\ninherits_1.default(Alias, facade_1.Facade);\n\nAlias.prototype.action = function () {\n  return \"alias\";\n};\n\nAlias.prototype.type = Alias.prototype.action;\n\nAlias.prototype.previousId = function () {\n  return this.field(\"previousId\") || this.field(\"from\");\n};\n\nAlias.prototype.from = Alias.prototype.previousId;\n\nAlias.prototype.userId = function () {\n  return this.field(\"userId\") || this.field(\"to\");\n};\n\nAlias.prototype.to = Alias.prototype.userId;","map":{"version":3,"sources":["../lib/alias.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAEA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAYA,SAAgB,KAAhB,CAAsB,UAAtB,EAAkC,IAAlC,EAAsC;EACpC,QAAA,CAAA,MAAA,CAAO,IAAP,CAAY,IAAZ,EAAkB,UAAlB,EAA8B,IAA9B;AACD;;AAFD,OAAA,CAAA,KAAA,GAAA,KAAA;AAIA,UAAA,CAAA,OAAA,CAAQ,KAAR,EAAe,QAAA,CAAA,MAAf;;AAOA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB,YAAA;EACvB,OAAO,OAAP;AACD,CAFD;;AAUA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB,KAAK,CAAC,SAAN,CAAgB,MAAvC;;AAUA,KAAK,CAAC,SAAN,CAAgB,UAAhB,GAA6B,YAAA;EAC3B,OAAO,KAAK,KAAL,CAAW,YAAX,KAA4B,KAAK,KAAL,CAAW,MAAX,CAAnC;AACD,CAFD;;AAUA,KAAK,CAAC,SAAN,CAAgB,IAAhB,GAAuB,KAAK,CAAC,SAAN,CAAgB,UAAvC;;AAUA,KAAK,CAAC,SAAN,CAAgB,MAAhB,GAAyB,YAAA;EACvB,OAAO,KAAK,KAAL,CAAW,QAAX,KAAwB,KAAK,KAAL,CAAW,IAAX,CAA/B;AACD,CAFD;;AAUA,KAAK,CAAC,SAAN,CAAgB,EAAhB,GAAqB,KAAK,CAAC,SAAN,CAAgB,MAArC","sourcesContent":["\"use strict\";\n\nimport inherit from \"inherits\";\nimport { Facade } from \"./facade\";\n\n/**\n * Initialize a new `Alias` facade with a `dictionary` of arguments.\n *\n * @param {Object} dictionary - The object to wrap.\n * @param {string} [dictionary.from] - The previous ID of the user.\n * @param {string} [dictionary.to] - The new ID of the user.\n * @param {Object} opts - Options about what kind of Facade to create.\n *\n * @augments Facade\n */\nexport function Alias(dictionary, opts) {\n  Facade.call(this, dictionary, opts);\n}\n\ninherit(Alias, Facade);\n\n/**\n * Return the type of facade this is. This will always return `\"alias\"`.\n *\n * @return {string}\n */\nAlias.prototype.action = function () {\n  return \"alias\";\n};\n\n/**\n * An alias for {@link Alias#action}.\n *\n * @function\n * @return {string}\n */\nAlias.prototype.type = Alias.prototype.action;\n\n/**\n * Get the user's previous ID from `previousId` or `from`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\nAlias.prototype.previousId = function () {\n  return this.field(\"previousId\") || this.field(\"from\");\n};\n\n/**\n * An alias for {@link Alias#previousId}.\n *\n * @function\n * @return {string}\n */\nAlias.prototype.from = Alias.prototype.previousId;\n\n/**\n * Get the user's new ID from `userId` or `to`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\nAlias.prototype.userId = function () {\n  return this.field(\"userId\") || this.field(\"to\");\n};\n\n/**\n * An alias for {@link Alias#userId}.\n *\n * @function\n * @return {string}\n */\nAlias.prototype.to = Alias.prototype.userId;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}