{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { ARBITRUM, ARBITRUM_GOERLI } from \"./Helpers\";\nconst {\n  parseEther\n} = ethers.utils;\nconst constants = {\n  [ARBITRUM_GOERLI]: {\n    nativeTokenSymbol: \"ETH\",\n    wrappedTokenSymbol: \"WETH\",\n    defaultCollateralSymbol: \"USDC\",\n    defaultFlagOrdersEnabled: false,\n    positionReaderPropsLength: 9,\n    v2: true,\n    SWAP_ORDER_EXECUTION_GAS_FEE: parseEther(\"0.01\"),\n    INCREASE_ORDER_EXECUTION_GAS_FEE: parseEther(\"0.01\"),\n    // contract requires that execution fee be strictly greater than instead of gte\n    DECREASE_ORDER_EXECUTION_GAS_FEE: parseEther(\"0.010000001\")\n  },\n  [ARBITRUM]: {\n    nativeTokenSymbol: \"ETH\",\n    wrappedTokenSymbol: \"WETH\",\n    defaultCollateralSymbol: \"USDC\",\n    defaultFlagOrdersEnabled: false,\n    positionReaderPropsLength: 9,\n    v2: true,\n    SWAP_ORDER_EXECUTION_GAS_FEE: parseEther(\"0.0003\"),\n    INCREASE_ORDER_EXECUTION_GAS_FEE: parseEther(\"0.0003\"),\n    // contract requires that execution fee be strictly greater than instead of gte\n    DECREASE_ORDER_EXECUTION_GAS_FEE: parseEther(\"0.000000001\")\n  }\n};\nexport const getConstant = (chainId, key) => {\n  if (!constants[chainId]) {\n    throw new Error(`Unsupported chainId ${chainId}`);\n  }\n\n  if (!(key in constants[chainId])) {\n    throw new Error(`Key ${key} does not exist for chainId ${chainId}`);\n  }\n\n  return constants[chainId][key];\n};","map":{"version":3,"names":["ethers","ARBITRUM","ARBITRUM_GOERLI","parseEther","utils","constants","nativeTokenSymbol","wrappedTokenSymbol","defaultCollateralSymbol","defaultFlagOrdersEnabled","positionReaderPropsLength","v2","SWAP_ORDER_EXECUTION_GAS_FEE","INCREASE_ORDER_EXECUTION_GAS_FEE","DECREASE_ORDER_EXECUTION_GAS_FEE","getConstant","chainId","key","Error"],"sources":["C:/Users/rober/Documents/copiaswaps-client/swaps-client/src/Constants.js"],"sourcesContent":["import { ethers } from \"ethers\";\n\nimport { ARBITRUM, ARBITRUM_GOERLI } from \"./Helpers\";\n\nconst { parseEther } = ethers.utils;\n\nconst constants = {\n  [ARBITRUM_GOERLI]: {\n    nativeTokenSymbol: \"ETH\",\n    wrappedTokenSymbol: \"WETH\",\n    defaultCollateralSymbol: \"USDC\",\n    defaultFlagOrdersEnabled: false,\n    positionReaderPropsLength: 9,\n    v2: true,\n\n    SWAP_ORDER_EXECUTION_GAS_FEE: parseEther(\"0.01\"),\n    INCREASE_ORDER_EXECUTION_GAS_FEE: parseEther(\"0.01\"),\n    // contract requires that execution fee be strictly greater than instead of gte\n    DECREASE_ORDER_EXECUTION_GAS_FEE: parseEther(\"0.010000001\"),\n  },\n\n  [ARBITRUM]: {\n    nativeTokenSymbol: \"ETH\",\n    wrappedTokenSymbol: \"WETH\",\n    defaultCollateralSymbol: \"USDC\",\n    defaultFlagOrdersEnabled: false,\n    positionReaderPropsLength: 9,\n    v2: true,\n\n    SWAP_ORDER_EXECUTION_GAS_FEE: parseEther(\"0.0003\"),\n    INCREASE_ORDER_EXECUTION_GAS_FEE: parseEther(\"0.0003\"),\n    // contract requires that execution fee be strictly greater than instead of gte\n    DECREASE_ORDER_EXECUTION_GAS_FEE: parseEther(\"0.000000001\"),\n  },\n};\n\nexport const getConstant = (chainId, key) => {\n  if (!constants[chainId]) {\n    throw new Error(`Unsupported chainId ${chainId}`);\n  }\n  if (!(key in constants[chainId])) {\n    throw new Error(`Key ${key} does not exist for chainId ${chainId}`);\n  }\n  return constants[chainId][key];\n};\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,WAA1C;AAEA,MAAM;EAAEC;AAAF,IAAiBH,MAAM,CAACI,KAA9B;AAEA,MAAMC,SAAS,GAAG;EAChB,CAACH,eAAD,GAAmB;IACjBI,iBAAiB,EAAE,KADF;IAEjBC,kBAAkB,EAAE,MAFH;IAGjBC,uBAAuB,EAAE,MAHR;IAIjBC,wBAAwB,EAAE,KAJT;IAKjBC,yBAAyB,EAAE,CALV;IAMjBC,EAAE,EAAE,IANa;IAQjBC,4BAA4B,EAAET,UAAU,CAAC,MAAD,CARvB;IASjBU,gCAAgC,EAAEV,UAAU,CAAC,MAAD,CAT3B;IAUjB;IACAW,gCAAgC,EAAEX,UAAU,CAAC,aAAD;EAX3B,CADH;EAehB,CAACF,QAAD,GAAY;IACVK,iBAAiB,EAAE,KADT;IAEVC,kBAAkB,EAAE,MAFV;IAGVC,uBAAuB,EAAE,MAHf;IAIVC,wBAAwB,EAAE,KAJhB;IAKVC,yBAAyB,EAAE,CALjB;IAMVC,EAAE,EAAE,IANM;IAQVC,4BAA4B,EAAET,UAAU,CAAC,QAAD,CAR9B;IASVU,gCAAgC,EAAEV,UAAU,CAAC,QAAD,CATlC;IAUV;IACAW,gCAAgC,EAAEX,UAAU,CAAC,aAAD;EAXlC;AAfI,CAAlB;AA8BA,OAAO,MAAMY,WAAW,GAAG,CAACC,OAAD,EAAUC,GAAV,KAAkB;EAC3C,IAAI,CAACZ,SAAS,CAACW,OAAD,CAAd,EAAyB;IACvB,MAAM,IAAIE,KAAJ,CAAW,uBAAsBF,OAAQ,EAAzC,CAAN;EACD;;EACD,IAAI,EAAEC,GAAG,IAAIZ,SAAS,CAACW,OAAD,CAAlB,CAAJ,EAAkC;IAChC,MAAM,IAAIE,KAAJ,CAAW,OAAMD,GAAI,+BAA8BD,OAAQ,EAA3D,CAAN;EACD;;EACD,OAAOX,SAAS,CAACW,OAAD,CAAT,CAAmBC,GAAnB,CAAP;AACD,CARM"},"metadata":{},"sourceType":"module"}