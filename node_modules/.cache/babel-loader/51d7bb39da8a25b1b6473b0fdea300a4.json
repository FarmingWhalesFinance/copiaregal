{"ast":null,"code":"\"use strict\";\n\nvar isodate = require(\"@segment/isodate\");\n\nvar milliseconds = require(\"./milliseconds\");\n\nvar seconds = require(\"./seconds\");\n\nvar objProto = Object.prototype;\nvar toStr = objProto.toString;\n\nfunction isDate(value) {\n  return toStr.call(value) === \"[object Date]\";\n}\n\nfunction isNumber(value) {\n  return toStr.call(value) === \"[object Number]\";\n}\n/**\n * Returns a new Javascript Date object, allowing a variety of extra input types\n * over the native Date constructor.\n *\n * @param {Date|string|number} val\n */\n\n\nmodule.exports = function newDate(val) {\n  if (isDate(val)) return val;\n  if (isNumber(val)) return new Date(toMs(val)); // date strings\n\n  if (isodate.is(val)) {\n    return isodate.parse(val);\n  }\n\n  if (milliseconds.is(val)) {\n    return milliseconds.parse(val);\n  }\n\n  if (seconds.is(val)) {\n    return seconds.parse(val);\n  } // fallback to Date.parse\n\n\n  return new Date(val);\n};\n/**\n * If the number passed val is seconds from the epoch, turn it into milliseconds.\n * Milliseconds would be greater than 31557600000 (December 31, 1970).\n *\n * @param {number} num\n */\n\n\nfunction toMs(num) {\n  if (num < 31557600000) return num * 1000;\n  return num;\n}","map":{"version":3,"names":["isodate","require","milliseconds","seconds","objProto","Object","prototype","toStr","toString","isDate","value","call","isNumber","module","exports","newDate","val","Date","toMs","is","parse","num"],"sources":["C:/Users/rober/Documents/swaps-client/node_modules/new-date/lib/index.js"],"sourcesContent":["\"use strict\";\n\nvar isodate = require(\"@segment/isodate\");\nvar milliseconds = require(\"./milliseconds\");\nvar seconds = require(\"./seconds\");\n\nvar objProto = Object.prototype;\nvar toStr = objProto.toString;\n\nfunction isDate(value) {\n  return toStr.call(value) === \"[object Date]\";\n}\n\nfunction isNumber(value) {\n  return toStr.call(value) === \"[object Number]\";\n}\n\n/**\n * Returns a new Javascript Date object, allowing a variety of extra input types\n * over the native Date constructor.\n *\n * @param {Date|string|number} val\n */\nmodule.exports = function newDate(val) {\n  if (isDate(val)) return val;\n  if (isNumber(val)) return new Date(toMs(val));\n\n  // date strings\n  if (isodate.is(val)) {\n    return isodate.parse(val);\n  }\n  if (milliseconds.is(val)) {\n    return milliseconds.parse(val);\n  }\n  if (seconds.is(val)) {\n    return seconds.parse(val);\n  }\n\n  // fallback to Date.parse\n  return new Date(val);\n};\n\n/**\n * If the number passed val is seconds from the epoch, turn it into milliseconds.\n * Milliseconds would be greater than 31557600000 (December 31, 1970).\n *\n * @param {number} num\n */\nfunction toMs(num) {\n  if (num < 31557600000) return num * 1000;\n  return num;\n}\n"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAArB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIG,QAAQ,GAAGC,MAAM,CAACC,SAAtB;AACA,IAAIC,KAAK,GAAGH,QAAQ,CAACI,QAArB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;EACrB,OAAOH,KAAK,CAACI,IAAN,CAAWD,KAAX,MAAsB,eAA7B;AACD;;AAED,SAASE,QAAT,CAAkBF,KAAlB,EAAyB;EACvB,OAAOH,KAAK,CAACI,IAAN,CAAWD,KAAX,MAAsB,iBAA7B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;EACrC,IAAIP,MAAM,CAACO,GAAD,CAAV,EAAiB,OAAOA,GAAP;EACjB,IAAIJ,QAAQ,CAACI,GAAD,CAAZ,EAAmB,OAAO,IAAIC,IAAJ,CAASC,IAAI,CAACF,GAAD,CAAb,CAAP,CAFkB,CAIrC;;EACA,IAAIhB,OAAO,CAACmB,EAAR,CAAWH,GAAX,CAAJ,EAAqB;IACnB,OAAOhB,OAAO,CAACoB,KAAR,CAAcJ,GAAd,CAAP;EACD;;EACD,IAAId,YAAY,CAACiB,EAAb,CAAgBH,GAAhB,CAAJ,EAA0B;IACxB,OAAOd,YAAY,CAACkB,KAAb,CAAmBJ,GAAnB,CAAP;EACD;;EACD,IAAIb,OAAO,CAACgB,EAAR,CAAWH,GAAX,CAAJ,EAAqB;IACnB,OAAOb,OAAO,CAACiB,KAAR,CAAcJ,GAAd,CAAP;EACD,CAboC,CAerC;;;EACA,OAAO,IAAIC,IAAJ,CAASD,GAAT,CAAP;AACD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,IAAT,CAAcG,GAAd,EAAmB;EACjB,IAAIA,GAAG,GAAG,WAAV,EAAuB,OAAOA,GAAG,GAAG,IAAb;EACvB,OAAOA,GAAP;AACD"},"metadata":{},"sourceType":"script"}