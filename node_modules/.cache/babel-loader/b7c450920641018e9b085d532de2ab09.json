{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rober\\\\Documents\\\\swaps-client\\\\src\\\\views\\\\Stake\\\\MlpPriceChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from \"react\";\nimport cx from \"classnames\";\nimport { createChart } from \"krasulya-lightweight-charts\";\nimport { USD_DECIMALS, SWAP, formatAmount, formatDateTime } from \"../../Helpers\";\nimport { useMlpPrices } from \"../../Api\";\nimport { getTokens } from \"../../data/Tokens\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst timezoneOffset = -new Date().getTimezoneOffset() * 60;\nexport function getChartToken(swapOption, fromToken, toToken, chainId) {\n  if (!fromToken || !toToken) {\n    return;\n  }\n\n  if (swapOption !== SWAP) {\n    return toToken;\n  }\n\n  if (fromToken.isUsdg && toToken.isUsdg) {\n    return getTokens(chainId).find(t => t.isStable);\n  }\n\n  if (fromToken.isUsdg) {\n    return toToken;\n  }\n\n  if (toToken.isUsdg) {\n    return fromToken;\n  }\n\n  if (fromToken.isStable && toToken.isStable) {\n    return toToken;\n  }\n\n  if (fromToken.isStable) {\n    return toToken;\n  }\n\n  if (toToken.isStable) {\n    return fromToken;\n  }\n\n  return toToken;\n}\n\nconst getSeriesOptions = () => ({\n  // https://github.com/tradingview/lightweight-charts/blob/master/docs/area-series.md\n  lineColor: \"#4FE021\",\n  topColor: \"rgba(49, 69, 131, 0.4)\",\n  bottomColor: \"rgba(140, 198, 63, 0.2)\",\n  lineWidth: 2,\n  priceLineColor: \"rgba(0, 48, 0, 1)\",\n  downColor: \"#FF5621\",\n  wickDownColor: \"#FF5621\",\n  upColor: \"#4FE021\",\n  wickUpColor: \"#4FE021\",\n  borderVisible: false // topColor: 'rgba(38, 198, 218, 0.56)',\n  // bottomColor: 'rgba(38, 198, 218, 0.04)',\n  // lineColor: 'rgba(38, 198, 218, 1)',\n  // lineWidth: 2,\n  // crossHairMarkerVisible: false,\n\n});\n\nconst getChartOptions = (width, height) => ({\n  width,\n  height,\n  layout: {\n    backgroundColor: \"rgba(255, 255, 255, 0)\",\n    textColor: \"#ccc\",\n    fontFamily: \"Inter\"\n  },\n  localization: {\n    // https://github.com/tradingview/lightweight-charts/blob/master/docs/customization.md#time-format\n    timeFormatter: businessDayOrTimestamp => {\n      return formatDateTime(businessDayOrTimestamp - timezoneOffset);\n    }\n  },\n  grid: {\n    vertLines: {\n      visible: true,\n      color: \"rgba(0, 48, 0, 0.2)\",\n      style: 2\n    },\n    horzLines: {\n      visible: true,\n      color: \"rgba(0, 48, 0, 0.2)\",\n      style: 2\n    }\n  },\n  // https://github.com/tradingview/lightweight-charts/blob/master/docs/time-scale.md#time-scale\n  timeScale: {\n    rightOffset: 5,\n    borderVisible: false,\n    timeVisible: true,\n    fixLeftEdge: true\n  },\n  // https://github.com/tradingview/lightweight-charts/blob/master/docs/customization.md#price-axis\n  priceScale: {\n    borderVisible: false,\n    scaleMargins: {\n      top: 0.5,\n      bottom: 0.3\n    }\n  },\n  crosshair: {\n    horzLine: {\n      color: \"#aaa\"\n    },\n    vertLine: {\n      color: \"#aaa\"\n    },\n    mode: 0\n  }\n});\n\nexport default function MlpPriceChart(props) {\n  _s();\n\n  const {\n    chainId,\n    sidebarVisible,\n    mlpPrice\n  } = props;\n  const priceData = useMlpPrices(chainId, mlpPrice);\n  const [currentChart, setCurrentChart] = useState();\n  const [currentSeries, setCurrentSeries] = useState();\n  const [hoveredPoint, setHoveredPoint] = useState();\n  const ref = useRef(null);\n  const chartRef = useRef(null);\n  const currentPrice = mlpPrice;\n  const [chartInited, setChartInited] = useState(false);\n  const scaleChart = useCallback(() => {\n    currentChart.timeScale().fitContent();\n  }, [currentChart]);\n  const onCrosshairMove = useCallback(evt => {\n    if (!evt.time) {\n      setHoveredPoint(null);\n      return;\n    }\n\n    const priceDataById = priceData.reduce((o, stat) => ({ ...o,\n      [stat.time]: { ...stat\n      }\n    }), {});\n    const hoveredPoint = priceDataById[evt.time];\n\n    if (!hoveredPoint) {\n      return;\n    }\n\n    setHoveredPoint(hoveredPoint);\n  }, [setHoveredPoint, priceData]);\n  useEffect(() => {\n    if (!ref.current || !priceData || !priceData.length || currentChart) {\n      return;\n    }\n\n    const chart = createChart(chartRef.current, getChartOptions(chartRef.current.offsetWidth, chartRef.current.offsetHeight));\n    chart.subscribeCrosshairMove(onCrosshairMove);\n    const series = chart.addAreaSeries(getSeriesOptions());\n    setCurrentChart(chart);\n    setCurrentSeries(series);\n  }, [ref, priceData, currentChart, onCrosshairMove]); // useEffect(() => {\n  // const interval = setInterval(() => {\n  // updatePriceData(undefined, true);\n  // }, 60 * 1000);\n  // return () => clearInterval(interval);\n  // }, [updatePriceData]);\n\n  useEffect(() => {\n    if (!currentChart) {\n      return;\n    }\n\n    const resizeChart = () => {\n      currentChart.resize(chartRef.current.offsetWidth, chartRef.current.offsetHeight);\n    };\n\n    window.addEventListener(\"resize\", resizeChart);\n    return () => window.removeEventListener(\"resize\", resizeChart);\n  }, [currentChart]);\n  useEffect(() => {\n    if (!currentChart) {\n      return;\n    }\n\n    const resizeChart = () => {\n      currentChart.resize(chartRef.current.offsetWidth, chartRef.current.offsetHeight);\n    };\n\n    let timeout = setTimeout(() => {\n      resizeChart();\n    }, 500);\n    return () => clearTimeout(timeout);\n  }, [currentChart, sidebarVisible]);\n  useEffect(() => {\n    if (currentSeries && priceData && priceData.length) {\n      currentSeries.setData(priceData);\n\n      if (!chartInited) {\n        scaleChart();\n        setChartInited(true);\n      }\n    }\n  }, [priceData, currentSeries, chartInited, scaleChart]);\n  const statsHtml = useMemo(() => {\n    if (!priceData) {\n      return null;\n    }\n\n    const point = hoveredPoint || priceData[priceData.length - 1];\n\n    if (!point) {\n      return null;\n    }\n\n    const className = cx({\n      \"ExchangeChart-bottom-stats\": true\n    });\n    const toFixedNumbers = 3;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ExchangeChart-bottom-stats-label\",\n        children: \"p\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ExchangeChart-bottom-stats-value\",\n        children: point.value.toFixed(toFixedNumbers)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ExchangeChart-bottom-stats-label\",\n        children: \"w/fees\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ExchangeChart-bottom-stats-value\",\n        children: point.mlpPriceWithFees.toFixed(toFixedNumbers)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this);\n  }, [hoveredPoint, priceData]);\n  let deltaPrice;\n  let delta;\n  let deltaPercentage;\n  let deltaPercentageStr;\n  const now = parseInt(Date.now() / 1000);\n  const timeThreshold = now - 24 * 60 * 60;\n\n  if (priceData) {\n    for (let i = priceData.length - 1; i > 0; i--) {\n      const price = priceData[i];\n\n      if (price.time < timeThreshold) {\n        break;\n      }\n\n      deltaPrice = price.value;\n    }\n  }\n\n  if (deltaPrice && currentPrice) {\n    const average = parseFloat(formatAmount(currentPrice, USD_DECIMALS, 2));\n    delta = average - deltaPrice;\n    deltaPercentage = delta * 100 / average;\n\n    if (deltaPercentage > 0) {\n      deltaPercentageStr = `+${deltaPercentage.toFixed(2)}%`;\n    } else {\n      deltaPercentageStr = `${deltaPercentage.toFixed(2)}%`;\n    }\n\n    if (deltaPercentage === 0) {\n      deltaPercentageStr = \"0.00\";\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Mlp-price-chart ExchangeChart tv\",\n    ref: ref,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ExchangeChart-bottom App-box App-box-border\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ExchangeChart-bottom-header\",\n        children: statsHtml\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ExchangeChart-bottom-content\",\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MlpPriceChart, \"Hym+xCOfo9TNuLI1S8K0Rh9RDVY=\", false, function () {\n  return [useMlpPrices];\n});\n\n_c = MlpPriceChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MlpPriceChart\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useCallback","useMemo","cx","createChart","USD_DECIMALS","SWAP","formatAmount","formatDateTime","useMlpPrices","getTokens","timezoneOffset","Date","getTimezoneOffset","getChartToken","swapOption","fromToken","toToken","chainId","isUsdg","find","t","isStable","getSeriesOptions","lineColor","topColor","bottomColor","lineWidth","priceLineColor","downColor","wickDownColor","upColor","wickUpColor","borderVisible","getChartOptions","width","height","layout","backgroundColor","textColor","fontFamily","localization","timeFormatter","businessDayOrTimestamp","grid","vertLines","visible","color","style","horzLines","timeScale","rightOffset","timeVisible","fixLeftEdge","priceScale","scaleMargins","top","bottom","crosshair","horzLine","vertLine","mode","MlpPriceChart","props","sidebarVisible","mlpPrice","priceData","currentChart","setCurrentChart","currentSeries","setCurrentSeries","hoveredPoint","setHoveredPoint","ref","chartRef","currentPrice","chartInited","setChartInited","scaleChart","fitContent","onCrosshairMove","evt","time","priceDataById","reduce","o","stat","current","length","chart","offsetWidth","offsetHeight","subscribeCrosshairMove","series","addAreaSeries","resizeChart","resize","window","addEventListener","removeEventListener","timeout","setTimeout","clearTimeout","setData","statsHtml","point","className","toFixedNumbers","value","toFixed","mlpPriceWithFees","deltaPrice","delta","deltaPercentage","deltaPercentageStr","now","parseInt","timeThreshold","i","price","average","parseFloat"],"sources":["C:/Users/rober/Documents/swaps-client/src/views/Stake/MlpPriceChart.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from \"react\";\nimport cx from \"classnames\";\n\nimport { createChart } from \"krasulya-lightweight-charts\";\n\nimport {\n  USD_DECIMALS,\n  SWAP,\n  formatAmount,\n  formatDateTime,\n} from \"../../Helpers\";\nimport { useMlpPrices } from \"../../Api\";\n\nimport { getTokens } from \"../../data/Tokens\";\n\nconst timezoneOffset = -new Date().getTimezoneOffset() * 60;\n\nexport function getChartToken(swapOption, fromToken, toToken, chainId) {\n  if (!fromToken || !toToken) {\n    return;\n  }\n\n  if (swapOption !== SWAP) {\n    return toToken;\n  }\n\n  if (fromToken.isUsdg && toToken.isUsdg) {\n    return getTokens(chainId).find((t) => t.isStable);\n  }\n  if (fromToken.isUsdg) {\n    return toToken;\n  }\n  if (toToken.isUsdg) {\n    return fromToken;\n  }\n\n  if (fromToken.isStable && toToken.isStable) {\n    return toToken;\n  }\n  if (fromToken.isStable) {\n    return toToken;\n  }\n  if (toToken.isStable) {\n    return fromToken;\n  }\n\n  return toToken;\n}\n\nconst getSeriesOptions = () => ({\n  // https://github.com/tradingview/lightweight-charts/blob/master/docs/area-series.md\n  lineColor: \"#4FE021\",\n  topColor: \"rgba(49, 69, 131, 0.4)\",\n  bottomColor: \"rgba(140, 198, 63, 0.2)\",\n  lineWidth: 2,\n  priceLineColor: \"rgba(0, 48, 0, 1)\",\n  downColor: \"#FF5621\",\n  wickDownColor: \"#FF5621\",\n  upColor: \"#4FE021\",\n  wickUpColor: \"#4FE021\",\n  borderVisible: false,\n\n  // topColor: 'rgba(38, 198, 218, 0.56)',\n  // bottomColor: 'rgba(38, 198, 218, 0.04)',\n  // lineColor: 'rgba(38, 198, 218, 1)',\n  // lineWidth: 2,\n  // crossHairMarkerVisible: false,\n});\n\nconst getChartOptions = (width, height) => ({\n  width,\n  height,\n  layout: {\n    backgroundColor: \"rgba(255, 255, 255, 0)\",\n    textColor: \"#ccc\",\n    fontFamily: \"Inter\",\n  },\n  localization: {\n    // https://github.com/tradingview/lightweight-charts/blob/master/docs/customization.md#time-format\n    timeFormatter: (businessDayOrTimestamp) => {\n      return formatDateTime(businessDayOrTimestamp - timezoneOffset);\n    },\n  },\n  grid: {\n    vertLines: {\n      visible: true,\n      color: \"rgba(0, 48, 0, 0.2)\",\n      style: 2,\n    },\n    horzLines: {\n      visible: true,\n      color: \"rgba(0, 48, 0, 0.2)\",\n      style: 2,\n    },\n  },\n  // https://github.com/tradingview/lightweight-charts/blob/master/docs/time-scale.md#time-scale\n  timeScale: {\n    rightOffset: 5,\n    borderVisible: false,\n    timeVisible: true,\n    fixLeftEdge: true,\n  },\n  // https://github.com/tradingview/lightweight-charts/blob/master/docs/customization.md#price-axis\n  priceScale: {\n    borderVisible: false,\n    scaleMargins: {\n        top: 0.5,\n        bottom: 0.3,\n    },\n  },\n  crosshair: {\n    horzLine: {\n      color: \"#aaa\",\n    },\n    vertLine: {\n      color: \"#aaa\",\n    },\n    mode: 0,\n  },\n});\n\nexport default function MlpPriceChart(props) {\n  const {\n    chainId,\n    sidebarVisible,\n    mlpPrice\n  } = props;\n\n  const priceData = useMlpPrices(chainId, mlpPrice);\n\n  const [currentChart, setCurrentChart] = useState();\n  const [currentSeries, setCurrentSeries] = useState();\n\n  const [hoveredPoint, setHoveredPoint] = useState();\n\n  const ref = useRef(null);\n  const chartRef = useRef(null);\n\n  const currentPrice = mlpPrice;\n\n  const [chartInited, setChartInited] = useState(false);\n\n  const scaleChart = useCallback(() => {\n    currentChart.timeScale().fitContent();\n  }, [currentChart]);\n\n  const onCrosshairMove = useCallback(\n    (evt) => {\n      if (!evt.time) {\n        setHoveredPoint(null);\n        return;\n      }\n      const priceDataById = priceData.reduce((o, stat) => ({\n        ...o,\n        [stat.time]: {\n          ...stat\n        }\n      }), {})\n\n      const hoveredPoint = priceDataById[evt.time];\n      if (!hoveredPoint) {\n        return\n      }\n      \n      setHoveredPoint(hoveredPoint);\n    },\n    [setHoveredPoint, priceData]\n  );\n\n  useEffect(() => {\n    if (!ref.current || !priceData || !priceData.length || currentChart) {\n      return;\n    }\n\n    const chart = createChart(\n      chartRef.current,\n      getChartOptions(chartRef.current.offsetWidth, chartRef.current.offsetHeight)\n    );\n\n    chart.subscribeCrosshairMove(onCrosshairMove);\n\n    const series = chart.addAreaSeries(getSeriesOptions());\n\n    setCurrentChart(chart);\n    setCurrentSeries(series);\n  }, [ref, priceData, currentChart, onCrosshairMove]);\n\n  // useEffect(() => {\n    // const interval = setInterval(() => {\n      // updatePriceData(undefined, true);\n    // }, 60 * 1000);\n    // return () => clearInterval(interval);\n  // }, [updatePriceData]);\n\n  useEffect(() => {\n    if (!currentChart) {\n      return;\n    }\n    const resizeChart = () => {\n      currentChart.resize(chartRef.current.offsetWidth, chartRef.current.offsetHeight);\n    };\n    window.addEventListener(\"resize\", resizeChart);\n    return () => window.removeEventListener(\"resize\", resizeChart);\n  }, [currentChart]);\n\n  useEffect(() => {\n    if (!currentChart) {\n      return;\n    }\n    const resizeChart = () => {\n      currentChart.resize(chartRef.current.offsetWidth, chartRef.current.offsetHeight);\n    };\n    let timeout = setTimeout(() => {\n      resizeChart();\n    }, 500);\n    return () => clearTimeout(timeout);\n  }, [currentChart, sidebarVisible]);\n\n  useEffect(() => {\n    if (currentSeries && priceData && priceData.length) {\n      currentSeries.setData(priceData);\n\n      if (!chartInited) {\n        scaleChart();\n        setChartInited(true);\n      }\n    }\n  }, [priceData, currentSeries, chartInited, scaleChart]);\n\n  const statsHtml = useMemo(() => {\n    if (!priceData) {\n      return null;\n    }\n    const point = hoveredPoint || priceData[priceData.length - 1];\n    if (!point) {\n      return null;\n    }\n\n    const className = cx({\n      \"ExchangeChart-bottom-stats\": true,\n    });\n\n    const toFixedNumbers = 3;\n\n    return (\n      <div className={className}>\n        <span className=\"ExchangeChart-bottom-stats-label\">p</span>\n        <span className=\"ExchangeChart-bottom-stats-value\">{point.value.toFixed(toFixedNumbers)}</span>\n        <span className=\"ExchangeChart-bottom-stats-label\">w/fees</span>\n        <span className=\"ExchangeChart-bottom-stats-value\">{point.mlpPriceWithFees.toFixed(toFixedNumbers)}</span>\n      </div>\n    );\n  }, [hoveredPoint, priceData]);\n\n  let deltaPrice;\n  let delta;\n  let deltaPercentage;\n  let deltaPercentageStr;\n\n  const now = parseInt(Date.now() / 1000);\n  const timeThreshold = now - 24 * 60 * 60;\n\n  if (priceData) {\n    for (let i = priceData.length - 1; i > 0; i--) {\n      const price = priceData[i];\n      if (price.time < timeThreshold) {\n        break;\n      }\n      deltaPrice = price.value;\n    }\n  }\n\n  if (deltaPrice && currentPrice) {\n    const average = parseFloat(formatAmount(currentPrice, USD_DECIMALS, 2));\n    delta = average - deltaPrice;\n    deltaPercentage = (delta * 100) / average;\n    if (deltaPercentage > 0) {\n      deltaPercentageStr = `+${deltaPercentage.toFixed(2)}%`;\n    } else {\n      deltaPercentageStr = `${deltaPercentage.toFixed(2)}%`;\n    }\n    if (deltaPercentage === 0) {\n      deltaPercentageStr = \"0.00\";\n    }\n  }\n\n  return (\n    <div className=\"Mlp-price-chart ExchangeChart tv\" ref={ref}>\n      <div className=\"ExchangeChart-bottom App-box App-box-border\">\n        <div className=\"ExchangeChart-bottom-header\">\n          {statsHtml}\n        </div>\n        <div className=\"ExchangeChart-bottom-content\" ref={chartRef}></div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}