{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcMulticallProvider = void 0;\n\nconst contracts_1 = require(\"@ethersproject/contracts\");\n\nconst logger_1 = require(\"@ethersproject/logger\");\n\nconst providers_1 = require(\"@ethersproject/providers\");\n\nconst Multicall_json_1 = __importDefault(require(\"./Multicall.json\"));\n\nconst logger = new logger_1.Logger('0.1.0'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction hasSigner(obj) {\n  return obj.getSigner !== undefined;\n} // Multicall3 is deployed at the same create2 address on basically every chain\n// https://github.com/mds1/multicall\n\n\nconst multicall3Address = '0xcA11bde05977b3631167028862bE2a173976CA11';\n\nclass JsonRpcMulticallProvider extends providers_1.BaseProvider {\n  constructor(provider) {\n    super(provider.getNetwork());\n    this.parent = provider;\n  }\n\n  getSigner(addressOrIndex) {\n    if (!hasSigner(this.parent)) {\n      return logger.throwError('Parent provider does not support getSigner', logger_1.Logger.errors.NOT_IMPLEMENTED, {\n        parent: this.parent\n      });\n    }\n\n    return this.parent.getSigner(addressOrIndex);\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (method === 'call') {\n        const reqParams = params;\n        const target = reqParams.transaction.to;\n        const callData = reqParams.transaction.data; // If there is no call data or unknown multicall contract, just passthrough to parent\n\n        if (!target || !callData) {\n          return this.parent.perform(method, params);\n        }\n\n        if (!this._pendingBatch) {\n          this._pendingBatch = [];\n        }\n\n        const newCall = {\n          request: {\n            target,\n            callData\n          },\n          resolve: null,\n          reject: null\n        };\n        const promise = new Promise((resolve, reject) => {\n          newCall.resolve = resolve;\n          newCall.reject = reject;\n        });\n\n        this._pendingBatch.push(newCall);\n\n        if (!this._pendingBatchAggregator) {\n          const provider = this.parent;\n          this._pendingBatchAggregator = setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n            const batch = this._pendingBatch;\n\n            if (!batch) {\n              return;\n            }\n\n            this._pendingBatch = null;\n            this._pendingBatchAggregator = null;\n            const multicall = new contracts_1.Contract(multicall3Address, Multicall_json_1.default.abi, provider); // returns [blockNumber, call results], so results are at index 1\n\n            const multicallResult = yield multicall.aggregate(batch.map(i => i.request)); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n            multicallResult[1].map((result, i) => batch[i].resolve(result));\n            this._pendingBatch = null;\n            this._pendingBatchAggregator = null;\n          }), 10);\n        }\n\n        return promise;\n      } else {\n        return this.parent.perform(method, params);\n      }\n    });\n  }\n\n  detectNetwork() {\n    return this.parent.detectNetwork();\n  }\n\n}\n\nexports.JsonRpcMulticallProvider = JsonRpcMulticallProvider;","map":{"version":3,"sources":["../src/JsonRpcMulticallProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcMulticallProvider = void 0;\nconst contracts_1 = require(\"@ethersproject/contracts\");\nconst logger_1 = require(\"@ethersproject/logger\");\nconst providers_1 = require(\"@ethersproject/providers\");\nconst Multicall_json_1 = __importDefault(require(\"./Multicall.json\"));\nconst logger = new logger_1.Logger('0.1.0');\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction hasSigner(obj) {\n    return obj.getSigner !== undefined;\n}\n// Multicall3 is deployed at the same create2 address on basically every chain\n// https://github.com/mds1/multicall\nconst multicall3Address = '0xcA11bde05977b3631167028862bE2a173976CA11';\nclass JsonRpcMulticallProvider extends providers_1.BaseProvider {\n    constructor(provider) {\n        super(provider.getNetwork());\n        this.parent = provider;\n    }\n    getSigner(addressOrIndex) {\n        if (!hasSigner(this.parent)) {\n            return logger.throwError('Parent provider does not support getSigner', logger_1.Logger.errors.NOT_IMPLEMENTED, {\n                parent: this.parent,\n            });\n        }\n        return this.parent.getSigner(addressOrIndex);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (method === 'call') {\n                const reqParams = params;\n                const target = reqParams.transaction.to;\n                const callData = reqParams.transaction.data;\n                // If there is no call data or unknown multicall contract, just passthrough to parent\n                if (!target || !callData) {\n                    return this.parent.perform(method, params);\n                }\n                if (!this._pendingBatch) {\n                    this._pendingBatch = [];\n                }\n                const newCall = { request: { target, callData }, resolve: null, reject: null };\n                const promise = new Promise((resolve, reject) => {\n                    newCall.resolve = resolve;\n                    newCall.reject = reject;\n                });\n                this._pendingBatch.push(newCall);\n                if (!this._pendingBatchAggregator) {\n                    const provider = this.parent;\n                    this._pendingBatchAggregator = setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n                        const batch = this._pendingBatch;\n                        if (!batch) {\n                            return;\n                        }\n                        this._pendingBatch = null;\n                        this._pendingBatchAggregator = null;\n                        const multicall = new contracts_1.Contract(multicall3Address, Multicall_json_1.default.abi, provider);\n                        // returns [blockNumber, call results], so results are at index 1\n                        const multicallResult = yield multicall.aggregate(batch.map(i => i.request));\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        multicallResult[1].map((result, i) => batch[i].resolve(result));\n                        this._pendingBatch = null;\n                        this._pendingBatchAggregator = null;\n                    }), 10);\n                }\n                return promise;\n            }\n            else {\n                return this.parent.perform(method, params);\n            }\n        });\n    }\n    detectNetwork() {\n        return this.parent.detectNetwork();\n    }\n}\nexports.JsonRpcMulticallProvider = JsonRpcMulticallProvider;\n//# sourceMappingURL=JsonRpcMulticallProvider.js.map"]},"metadata":{},"sourceType":"script"}