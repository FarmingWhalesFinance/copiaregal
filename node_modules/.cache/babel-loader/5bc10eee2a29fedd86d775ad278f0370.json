{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCachedUrl = exports.storeCachedURI = void 0; // 24 hour TTL\n\nconst DEFAULT_CACHE_TTL = 60 * 60 * 24 * 1000;\n\nconst getCache = () => {\n  const cache = window.localStorage.getItem('davatar/cache');\n\n  if (!cache) {\n    window.localStorage.setItem('davatar/cache', '{}');\n    return {};\n  }\n\n  return JSON.parse(cache);\n};\n\nconst saveCache = cache => window.localStorage.setItem('davatar/cache', JSON.stringify(cache));\n\nconst storeCachedURI = (address, resolvedUrl, ttl) => {\n  const cache = getCache();\n  const normalizedAddress = address.toLowerCase();\n  const item = cache[normalizedAddress];\n\n  if (!item || new Date(item.expiresAt) > new Date()) {\n    const expireDate = new Date(new Date().getTime() + (ttl || DEFAULT_CACHE_TTL));\n    cache[normalizedAddress] = {\n      url: resolvedUrl,\n      expiresAt: expireDate.toString()\n    };\n    saveCache(cache);\n  }\n};\n\nexports.storeCachedURI = storeCachedURI;\n/**\n * Get cached resolved url from local storage\n *\n * @param key - an ethereum address or an avatar URI\n */\n\nconst getCachedUrl = key => {\n  const cache = getCache();\n  const normalizedKey = key.toLowerCase();\n  const item = cache[normalizedKey];\n\n  if (item) {\n    if (new Date(item.expiresAt) > new Date()) {\n      return item.url;\n    }\n  }\n\n  return null;\n};\n\nexports.getCachedUrl = getCachedUrl;","map":{"version":3,"sources":["../src/cache.ts"],"names":[],"mappings":";;;;;wDAAA;;AACA,MAAM,iBAAiB,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAAzC;;AAMA,MAAM,QAAQ,GAAG,MAAmB;EAClC,MAAM,KAAK,GAAG,MAAM,CAAC,YAAP,CAAoB,OAApB,CAA4B,eAA5B,CAAd;;EACA,IAAI,CAAC,KAAL,EAAY;IACV,MAAM,CAAC,YAAP,CAAoB,OAApB,CAA4B,eAA5B,EAA6C,IAA7C;IACA,OAAO,EAAP;EACD;;EAED,OAAO,IAAI,CAAC,KAAL,CAAW,KAAX,CAAP;AACD,CARD;;AAUA,MAAM,SAAS,GAAI,KAAD,IAAyB,MAAM,CAAC,YAAP,CAAoB,OAApB,CAA4B,eAA5B,EAA6C,IAAI,CAAC,SAAL,CAAe,KAAf,CAA7C,CAA3C;;AAEO,MAAM,cAAc,GAAG,CAAC,OAAD,EAAkB,WAAlB,EAAuC,GAAvC,KAAuD;EACnF,MAAM,KAAK,GAAG,QAAQ,EAAtB;EACA,MAAM,iBAAiB,GAAG,OAAO,CAAC,WAAR,EAA1B;EACA,MAAM,IAAI,GAAG,KAAK,CAAC,iBAAD,CAAlB;;EAEA,IAAI,CAAC,IAAD,IAAS,IAAI,IAAJ,CAAS,IAAI,CAAC,SAAd,IAA2B,IAAI,IAAJ,EAAxC,EAAoD;IAClD,MAAM,UAAU,GAAG,IAAI,IAAJ,CAAS,IAAI,IAAJ,GAAW,OAAX,MAAwB,GAAG,IAAI,iBAA/B,CAAT,CAAnB;IAEA,KAAK,CAAC,iBAAD,CAAL,GAA2B;MAAE,GAAG,EAAE,WAAP;MAAoB,SAAS,EAAE,UAAU,CAAC,QAAX;IAA/B,CAA3B;IACA,SAAS,CAAC,KAAD,CAAT;EACD;AACF,CAXM;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd;AAab;;;;AAIG;;AACI,MAAM,YAAY,GAAI,GAAD,IAAgB;EAC1C,MAAM,KAAK,GAAG,QAAQ,EAAtB;EACA,MAAM,aAAa,GAAG,GAAG,CAAC,WAAJ,EAAtB;EACA,MAAM,IAAI,GAAG,KAAK,CAAC,aAAD,CAAlB;;EAEA,IAAI,IAAJ,EAAU;IACR,IAAI,IAAI,IAAJ,CAAS,IAAI,CAAC,SAAd,IAA2B,IAAI,IAAJ,EAA/B,EAA2C;MACzC,OAAO,IAAI,CAAC,GAAZ;IACD;EACF;;EAED,OAAO,IAAP;AACD,CAZM;;AAAM,OAAA,CAAA,YAAA,GAAY,YAAZ","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCachedUrl = exports.storeCachedURI = void 0;\n// 24 hour TTL\nconst DEFAULT_CACHE_TTL = 60 * 60 * 24 * 1000;\nconst getCache = () => {\n    const cache = window.localStorage.getItem('davatar/cache');\n    if (!cache) {\n        window.localStorage.setItem('davatar/cache', '{}');\n        return {};\n    }\n    return JSON.parse(cache);\n};\nconst saveCache = (cache) => window.localStorage.setItem('davatar/cache', JSON.stringify(cache));\nconst storeCachedURI = (address, resolvedUrl, ttl) => {\n    const cache = getCache();\n    const normalizedAddress = address.toLowerCase();\n    const item = cache[normalizedAddress];\n    if (!item || new Date(item.expiresAt) > new Date()) {\n        const expireDate = new Date(new Date().getTime() + (ttl || DEFAULT_CACHE_TTL));\n        cache[normalizedAddress] = { url: resolvedUrl, expiresAt: expireDate.toString() };\n        saveCache(cache);\n    }\n};\nexports.storeCachedURI = storeCachedURI;\n/**\n * Get cached resolved url from local storage\n *\n * @param key - an ethereum address or an avatar URI\n */\nconst getCachedUrl = (key) => {\n    const cache = getCache();\n    const normalizedKey = key.toLowerCase();\n    const item = cache[normalizedKey];\n    if (item) {\n        if (new Date(item.expiresAt) > new Date()) {\n            return item.url;\n        }\n    }\n    return null;\n};\nexports.getCachedUrl = getCachedUrl;\n//# sourceMappingURL=cache.js.map"]},"metadata":{},"sourceType":"script"}