{"ast":null,"code":"import cookie from 'js-cookie';\n/**\n * Levels returns all levels of the given url.\n *\n * @param {string} url\n * @return {Array}\n * @api public\n */\n\nfunction levels(url) {\n  var host = url.hostname;\n  var parts = host.split('.');\n  var last = parts[parts.length - 1];\n  var levels = []; // Ip address.\n\n  if (parts.length === 4 && parseInt(last, 10) > 0) {\n    return levels;\n  } // Localhost.\n\n\n  if (parts.length <= 1) {\n    return levels;\n  } // Create levels.\n\n\n  for (var i = parts.length - 2; i >= 0; --i) {\n    levels.push(parts.slice(i).join('.'));\n  }\n\n  return levels;\n}\n\nfunction parseUrl(url) {\n  try {\n    return new URL(url);\n  } catch (_a) {\n    return;\n  }\n}\n\nexport function tld(url) {\n  var parsedUrl = parseUrl(url);\n  if (!parsedUrl) return;\n  var lvls = levels(parsedUrl); // Lookup the real top level one.\n\n  for (var i = 0; i < lvls.length; ++i) {\n    var cname = '__tld__';\n    var domain = lvls[i];\n    var opts = {\n      domain: '.' + domain\n    };\n\n    try {\n      // cookie access throw an error if the library is ran inside a sandboxed environment (e.g. sandboxed iframe)\n      cookie.set(cname, '1', opts);\n\n      if (cookie.get(cname)) {\n        cookie.remove(cname, opts);\n        return domain;\n      }\n    } catch (_) {\n      return;\n    }\n  }\n}","map":{"version":3,"sources":["../../../../src/core/user/tld.ts"],"names":[],"mappings":"AAAA,OAAO,MAAP,MAAmB,WAAnB;AAEA;;;;;;AAMG;;AACH,SAAS,MAAT,CAAgB,GAAhB,EAAwB;EACtB,IAAM,IAAI,GAAG,GAAG,CAAC,QAAjB;EACA,IAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAd;EACA,IAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAlB;EACA,IAAM,MAAM,GAAa,EAAzB,CAJsB,CAMtB;;EACA,IAAI,KAAK,CAAC,MAAN,KAAiB,CAAjB,IAAsB,QAAQ,CAAC,IAAD,EAAO,EAAP,CAAR,GAAqB,CAA/C,EAAkD;IAChD,OAAO,MAAP;EACD,CATqB,CAWtB;;;EACA,IAAI,KAAK,CAAC,MAAN,IAAgB,CAApB,EAAuB;IACrB,OAAO,MAAP;EACD,CAdqB,CAgBtB;;;EACA,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAN,GAAe,CAA5B,EAA+B,CAAC,IAAI,CAApC,EAAuC,EAAE,CAAzC,EAA4C;IAC1C,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,IAAf,CAAoB,GAApB,CAAZ;EACD;;EAED,OAAO,MAAP;AACD;;AAED,SAAS,QAAT,CAAkB,GAAlB,EAA6B;EAC3B,IAAI;IACF,OAAO,IAAI,GAAJ,CAAQ,GAAR,CAAP;EACD,CAFD,CAEE,OAAA,EAAA,EAAM;IACN;EACD;AACF;;AAED,OAAM,SAAU,GAAV,CAAc,GAAd,EAAyB;EAC7B,IAAM,SAAS,GAAG,QAAQ,CAAC,GAAD,CAA1B;EACA,IAAI,CAAC,SAAL,EAAgB;EAEhB,IAAM,IAAI,GAAG,MAAM,CAAC,SAAD,CAAnB,CAJ6B,CAM7B;;EACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,EAAE,CAAnC,EAAsC;IACpC,IAAM,KAAK,GAAG,SAAd;IACA,IAAM,MAAM,GAAG,IAAI,CAAC,CAAD,CAAnB;IACA,IAAM,IAAI,GAAG;MAAE,MAAM,EAAE,MAAM;IAAhB,CAAb;;IAEA,IAAI;MACF;MACA,MAAM,CAAC,GAAP,CAAW,KAAX,EAAkB,GAAlB,EAAuB,IAAvB;;MACA,IAAI,MAAM,CAAC,GAAP,CAAW,KAAX,CAAJ,EAAuB;QACrB,MAAM,CAAC,MAAP,CAAc,KAAd,EAAqB,IAArB;QACA,OAAO,MAAP;MACD;IACF,CAPD,CAOE,OAAO,CAAP,EAAU;MACV;IACD;EACF;AACF","sourceRoot":"","sourcesContent":["import cookie from 'js-cookie';\n/**\n * Levels returns all levels of the given url.\n *\n * @param {string} url\n * @return {Array}\n * @api public\n */\nfunction levels(url) {\n    var host = url.hostname;\n    var parts = host.split('.');\n    var last = parts[parts.length - 1];\n    var levels = [];\n    // Ip address.\n    if (parts.length === 4 && parseInt(last, 10) > 0) {\n        return levels;\n    }\n    // Localhost.\n    if (parts.length <= 1) {\n        return levels;\n    }\n    // Create levels.\n    for (var i = parts.length - 2; i >= 0; --i) {\n        levels.push(parts.slice(i).join('.'));\n    }\n    return levels;\n}\nfunction parseUrl(url) {\n    try {\n        return new URL(url);\n    }\n    catch (_a) {\n        return;\n    }\n}\nexport function tld(url) {\n    var parsedUrl = parseUrl(url);\n    if (!parsedUrl)\n        return;\n    var lvls = levels(parsedUrl);\n    // Lookup the real top level one.\n    for (var i = 0; i < lvls.length; ++i) {\n        var cname = '__tld__';\n        var domain = lvls[i];\n        var opts = { domain: '.' + domain };\n        try {\n            // cookie access throw an error if the library is ran inside a sandboxed environment (e.g. sandboxed iframe)\n            cookie.set(cname, '1', opts);\n            if (cookie.get(cname)) {\n                cookie.remove(cname, opts);\n                return domain;\n            }\n        }\n        catch (_) {\n            return;\n        }\n    }\n}\n//# sourceMappingURL=tld.js.map"]},"metadata":{},"sourceType":"module"}