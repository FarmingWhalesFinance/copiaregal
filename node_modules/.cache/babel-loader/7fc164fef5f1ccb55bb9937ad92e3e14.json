{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Identify = void 0;\n\nvar facade_1 = require(\"./facade\");\n\nvar obj_case_1 = __importDefault(require(\"obj-case\"));\n\nvar inherits_1 = __importDefault(require(\"inherits\"));\n\nvar is_email_1 = __importDefault(require(\"./is-email\"));\n\nvar new_date_1 = __importDefault(require(\"new-date\"));\n\nvar trim = function (str) {\n  return str.trim();\n};\n\nfunction Identify(dictionary, opts) {\n  facade_1.Facade.call(this, dictionary, opts);\n}\n\nexports.Identify = Identify;\ninherits_1.default(Identify, facade_1.Facade);\nvar i = Identify.prototype;\n\ni.action = function () {\n  return \"identify\";\n};\n\ni.type = i.action;\n\ni.traits = function (aliases) {\n  var ret = this.field(\"traits\") || {};\n  var id = this.userId();\n  aliases = aliases || {};\n  if (id) ret.id = id;\n\n  for (var alias in aliases) {\n    var value = this[alias] == null ? this.proxy(\"traits.\" + alias) : this[alias]();\n    if (value == null) continue;\n    ret[aliases[alias]] = value;\n    if (alias !== aliases[alias]) delete ret[alias];\n  }\n\n  return ret;\n};\n\ni.email = function () {\n  var email = this.proxy(\"traits.email\");\n  if (email) return email;\n  var userId = this.userId();\n  if (is_email_1.default(userId)) return userId;\n};\n\ni.created = function () {\n  var created = this.proxy(\"traits.created\") || this.proxy(\"traits.createdAt\");\n  if (created) return new_date_1.default(created);\n};\n\ni.companyCreated = function () {\n  var created = this.proxy(\"traits.company.created\") || this.proxy(\"traits.company.createdAt\");\n\n  if (created) {\n    return new_date_1.default(created);\n  }\n};\n\ni.companyName = function () {\n  return this.proxy(\"traits.company.name\");\n};\n\ni.name = function () {\n  var name = this.proxy(\"traits.name\");\n\n  if (typeof name === \"string\") {\n    return trim(name);\n  }\n\n  var firstName = this.firstName();\n  var lastName = this.lastName();\n\n  if (firstName && lastName) {\n    return trim(firstName + \" \" + lastName);\n  }\n};\n\ni.firstName = function () {\n  var firstName = this.proxy(\"traits.firstName\");\n\n  if (typeof firstName === \"string\") {\n    return trim(firstName);\n  }\n\n  var name = this.proxy(\"traits.name\");\n\n  if (typeof name === \"string\") {\n    return trim(name).split(\" \")[0];\n  }\n};\n\ni.lastName = function () {\n  var lastName = this.proxy(\"traits.lastName\");\n\n  if (typeof lastName === \"string\") {\n    return trim(lastName);\n  }\n\n  var name = this.proxy(\"traits.name\");\n\n  if (typeof name !== \"string\") {\n    return;\n  }\n\n  var space = trim(name).indexOf(\" \");\n\n  if (space === -1) {\n    return;\n  }\n\n  return trim(name.substr(space + 1));\n};\n\ni.uid = function () {\n  return this.userId() || this.username() || this.email();\n};\n\ni.description = function () {\n  return this.proxy(\"traits.description\") || this.proxy(\"traits.background\");\n};\n\ni.age = function () {\n  var date = this.birthday();\n  var age = obj_case_1.default(this.traits(), \"age\");\n  if (age != null) return age;\n  if (!(date instanceof Date)) return;\n  var now = new Date();\n  return now.getFullYear() - date.getFullYear();\n};\n\ni.avatar = function () {\n  var traits = this.traits();\n  return obj_case_1.default(traits, \"avatar\") || obj_case_1.default(traits, \"photoUrl\") || obj_case_1.default(traits, \"avatarUrl\");\n};\n\ni.position = function () {\n  var traits = this.traits();\n  return obj_case_1.default(traits, \"position\") || obj_case_1.default(traits, \"jobTitle\");\n};\n\ni.username = facade_1.Facade.proxy(\"traits.username\");\ni.website = facade_1.Facade.one(\"traits.website\");\ni.websites = facade_1.Facade.multi(\"traits.website\");\ni.phone = facade_1.Facade.one(\"traits.phone\");\ni.phones = facade_1.Facade.multi(\"traits.phone\");\ni.address = facade_1.Facade.proxy(\"traits.address\");\ni.gender = facade_1.Facade.proxy(\"traits.gender\");\ni.birthday = facade_1.Facade.proxy(\"traits.birthday\");","map":{"version":3,"sources":["../lib/identify.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { Facade } from \"./facade\";\nimport get from \"obj-case\";\nimport inherit from \"inherits\";\nimport isEmail from \"./is-email\";\nimport newDate from \"new-date\";\n\nlet trim = (str) => str.trim();\n\n/**\n * Initialize a new `Identify` facade with a `dictionary` of arguments.\n *\n * @param {Object} dictionary - The object to wrap.\n * @param {string} [dictionary.userId] - The ID of the user.\n * @param {string} [dictionary.anonymousId] - The anonymous ID of the user.\n * @param {string} [dictionary.traits] - The user's traits.\n * @param {Object} opts - Options about what kind of Facade to create.\n *\n * @augments Facade\n */\nexport function Identify(dictionary, opts) {\n  Facade.call(this, dictionary, opts);\n}\n\ninherit(Identify, Facade);\n\nconst i = Identify.prototype;\n\n/**\n * Return the type of facade this is. This will always return `\"identify\"`.\n *\n * @return {string}\n */\ni.action = function () {\n  return \"identify\";\n};\n\n/**\n * An alias for {@link Identify#action}.\n *\n * @function\n * @return {string}\n */\ni.type = i.action;\n\n/**\n * Get the user's traits. This is identical to how {@link Facade#traits} works,\n * except it looks at `traits.*` instead of `options.traits.*`.\n *\n * Traits are gotten from `traits`, augmented with a property `id` with\n * the event's `userId`.\n *\n * The parameter `aliases` is meant to transform keys in `traits` into new\n * keys. Each alias like `{ \"xxx\": \"yyy\" }` will take whatever is at `xxx` in\n * the traits, and move it to `yyy`. If `xxx` is a method of this facade, it'll\n * be called as a function instead of treated as a key into the traits.\n *\n * @example\n * let obj = { traits: { foo: \"bar\" }, anonymousId: \"xxx\" }\n * let identify = new Identify(obj)\n *\n * identify.traits() // { \"foo\": \"bar\" }\n * identify.traits({ \"foo\": \"asdf\" }) // { \"asdf\": \"bar\" }\n * identify.traits({ \"sessionId\": \"rofl\" }) // { \"rofl\": \"xxx\" }\n *\n * @param {Object} aliases - A mapping from keys to the new keys they should be\n * transformed to.\n * @return {Object}\n */\ni.traits = function (aliases) {\n  let ret = this.field(\"traits\") || {};\n  let id = this.userId();\n  aliases = aliases || {};\n\n  if (id) ret.id = id;\n\n  for (let alias in aliases) {\n    let value =\n      this[alias] == null ? this.proxy(\"traits.\" + alias) : this[alias]();\n    if (value == null) continue;\n    ret[aliases[alias]] = value;\n    if (alias !== aliases[alias]) delete ret[alias];\n  }\n\n  return ret;\n};\n\n/**\n * Get the user's email from `traits.email`, falling back to `userId` only if\n * it looks like a valid email.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.email = function () {\n  let email = this.proxy(\"traits.email\");\n  if (email) return email;\n\n  let userId = this.userId();\n  if (isEmail(userId)) return userId;\n};\n\n/**\n * Get the time of creation of the user from `traits.created` or\n * `traits.createdAt`.\n *\n * @return {Date}\n */\ni.created = function () {\n  let created = this.proxy(\"traits.created\") || this.proxy(\"traits.createdAt\");\n  if (created) return newDate(created);\n};\n\n/**\n * Get the time of creation of the user's company from `traits.company.created`\n * or `traits.company.createdAt`.\n *\n * @return {Date}\n */\ni.companyCreated = function () {\n  let created =\n    this.proxy(\"traits.company.created\") ||\n    this.proxy(\"traits.company.createdAt\");\n\n  if (created) {\n    return newDate(created);\n  }\n};\n\n/**\n * Get the user's company name from `traits.company.name`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.companyName = function () {\n  return this.proxy(\"traits.company.name\");\n};\n\n/**\n * Get the user's name `traits.name`, falling back to combining {@link\n * Identify#firstName} and {@link Identify#lastName} if possible.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.name = function () {\n  let name = this.proxy(\"traits.name\");\n  if (typeof name === \"string\") {\n    return trim(name);\n  }\n\n  let firstName = this.firstName();\n  let lastName = this.lastName();\n  if (firstName && lastName) {\n    return trim(firstName + \" \" + lastName);\n  }\n};\n\n/**\n * Get the user's first name from `traits.firstName`, optionally splitting it\n * out of a the full name if that's all that was provided.\n *\n * Splitting the full name works on the assumption that the full name is of the\n * form \"FirstName LastName\"; it will not work for non-Western names.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.firstName = function () {\n  let firstName = this.proxy(\"traits.firstName\");\n  if (typeof firstName === \"string\") {\n    return trim(firstName);\n  }\n\n  let name = this.proxy(\"traits.name\");\n  if (typeof name === \"string\") {\n    return trim(name).split(\" \")[0];\n  }\n};\n\n/**\n * Get the user's last name from `traits.lastName`, optionally splitting it out\n * of a the full name if that's all that was provided.\n *\n * Splitting the full name works on the assumption that the full name is of the\n * form \"FirstName LastName\"; it will not work for non-Western names.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.lastName = function () {\n  let lastName = this.proxy(\"traits.lastName\");\n  if (typeof lastName === \"string\") {\n    return trim(lastName);\n  }\n\n  let name = this.proxy(\"traits.name\");\n  if (typeof name !== \"string\") {\n    return;\n  }\n\n  let space = trim(name).indexOf(\" \");\n  if (space === -1) {\n    return;\n  }\n\n  return trim(name.substr(space + 1));\n};\n\n/**\n * Get the user's \"unique id\" from `userId`, `traits.username`, or\n * `traits.email`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.uid = function () {\n  return this.userId() || this.username() || this.email();\n};\n\n/**\n * Get the user's description from `traits.description` or `traits.background`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.description = function () {\n  return this.proxy(\"traits.description\") || this.proxy(\"traits.background\");\n};\n\n/**\n * Get the user's age from `traits.age`, falling back to computing it from\n * `traits.birthday` and the current time.\n *\n * @return {number}\n */\ni.age = function () {\n  let date = this.birthday();\n  let age = get(this.traits(), \"age\");\n  if (age != null) return age;\n  if (!(date instanceof Date)) return;\n  let now = new Date();\n  return now.getFullYear() - date.getFullYear();\n};\n\n/**\n * Get the URL of the user's avatar from `traits.avatar`, `traits.photoUrl`, or\n * `traits.avatarUrl`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.avatar = function () {\n  let traits = this.traits();\n  return (\n    get(traits, \"avatar\") || get(traits, \"photoUrl\") || get(traits, \"avatarUrl\")\n  );\n};\n\n/**\n * Get the user's job position from `traits.position` or `traits.jobTitle`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @return {string}\n */\ni.position = function () {\n  let traits = this.traits();\n  return get(traits, \"position\") || get(traits, \"jobTitle\");\n};\n\n/**\n * Get the user's username from `traits.username`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ni.username = Facade.proxy(\"traits.username\");\n\n/**\n * Get the user's website from `traits.website`, or if there are multiple in\n * `traits.websites`, return the first one.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ni.website = Facade.one(\"traits.website\");\n\n/**\n * Get the user's websites from `traits.websites`, or if there is only one in\n * `traits.website`, then wrap it in an array.\n *\n * This *should* be an array of strings, but may not be if the client isn't\n * adhering to the spec.\n *\n * @function\n * @return {array}\n */\ni.websites = Facade.multi(\"traits.website\");\n\n/**\n * Get the user's phone number from `traits.phone`, or if there are multiple in\n * `traits.phones`, return the first one.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ni.phone = Facade.one(\"traits.phone\");\n\n/**\n * Get the user's phone numbers from `traits.phones`, or if there is only one\n * in `traits.phone`, then wrap it in an array.\n *\n * This *should* be an array of strings, but may not be if the client isn't\n * adhering to the spec.\n *\n * @function\n * @return {array}\n */\ni.phones = Facade.multi(\"traits.phone\");\n\n/**\n * Get the user's address from `traits.address`.\n *\n * This *should* be an object, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {object}\n */\ni.address = Facade.proxy(\"traits.address\");\n\n/**\n * Get the user's gender from `traits.gender`.\n *\n * This *should* be a string, but may not be if the client isn't adhering to\n * the spec.\n *\n * @function\n * @return {string}\n */\ni.gender = Facade.proxy(\"traits.gender\");\n\n/**\n * Get the user's birthday from `traits.birthday`.\n *\n * This *should* be a Date if `opts.traverse` was enabled (it is by default)\n * when letructing this Identify. Otherwise, it should be a string. But it\n * may be neither if the client isn't adhering to the spec.\n * spec.\n *\n * @function\n * @return {object}\n */\ni.birthday = Facade.proxy(\"traits.birthday\");\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}