{"ast":null,"code":"import { __assign } from \"tslib\";\n\nvar compactMetricType = function (type) {\n  var enums = {\n    gauge: 'g',\n    counter: 'c'\n  };\n  return enums[type];\n};\n\nvar Stats =\n/** @class */\nfunction () {\n  function Stats(remoteMetrics) {\n    this.metrics = [];\n    this.remoteMetrics = remoteMetrics;\n  }\n\n  Stats.prototype.increment = function (metric, by, tags) {\n    var _a;\n\n    if (by === void 0) {\n      by = 1;\n    }\n\n    this.metrics.push({\n      metric: metric,\n      value: by,\n      tags: tags !== null && tags !== void 0 ? tags : [],\n      type: 'counter',\n      timestamp: Date.now()\n    });\n    (_a = this.remoteMetrics) === null || _a === void 0 ? void 0 : _a.increment(metric, tags !== null && tags !== void 0 ? tags : []);\n  };\n\n  Stats.prototype.gauge = function (metric, value, tags) {\n    this.metrics.push({\n      metric: metric,\n      value: value,\n      tags: tags !== null && tags !== void 0 ? tags : [],\n      type: 'gauge',\n      timestamp: Date.now()\n    });\n  };\n\n  Stats.prototype.flush = function () {\n    var formatted = this.metrics.map(function (m) {\n      return __assign(__assign({}, m), {\n        tags: m.tags.join(',')\n      });\n    }); // ie doesn't like console.table\n\n    if (console.table) {\n      console.table(formatted);\n    } else {\n      console.log(formatted);\n    }\n\n    this.metrics = [];\n  };\n  /**\n   * compact keys for smaller payload\n   */\n\n\n  Stats.prototype.serialize = function () {\n    return this.metrics.map(function (m) {\n      return {\n        m: m.metric,\n        v: m.value,\n        t: m.tags,\n        k: compactMetricType(m.type),\n        e: m.timestamp\n      };\n    });\n  };\n\n  return Stats;\n}();\n\nexport default Stats;","map":{"version":3,"sources":["../../../../src/core/stats/index.ts"],"names":[],"mappings":";;AAqBA,IAAM,iBAAiB,GAAG,UAAC,IAAD,EAAiB;EACzC,IAAM,KAAK,GAA0C;IACnD,KAAK,EAAE,GAD4C;IAEnD,OAAO,EAAE;EAF0C,CAArD;EAIA,OAAO,KAAK,CAAC,IAAD,CAAZ;AACD,CAND;;AAQA,IAAA,KAAA;AAAA;AAAA,YAAA;EAKE,SAAA,KAAA,CAAY,aAAZ,EAAyC;IAJzC,KAAA,OAAA,GAAoB,EAApB;IAKE,KAAK,aAAL,GAAqB,aAArB;EACD;;EAED,KAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,MAAV,EAA0B,EAA1B,EAAkC,IAAlC,EAAiD;;;IAAvB,IAAA,EAAA,KAAA,KAAA,CAAA,EAAA;MAAA,EAAA,GAAA,CAAA;IAAM;;IAC9B,KAAK,OAAL,CAAa,IAAb,CAAkB;MAChB,MAAM,EAAA,MADU;MAEhB,KAAK,EAAE,EAFS;MAGhB,IAAI,EAAE,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAA,IAAA,GAAQ,EAHE;MAIhB,IAAI,EAAE,SAJU;MAKhB,SAAS,EAAE,IAAI,CAAC,GAAL;IALK,CAAlB;IAQA,CAAA,EAAA,GAAA,KAAK,aAAL,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,SAAF,CAAY,MAAZ,EAAoB,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAA,IAAA,GAAQ,EAA5B,CAAlB;EACD,CAVD;;EAYA,KAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,MAAN,EAAsB,KAAtB,EAAqC,IAArC,EAAoD;IAClD,KAAK,OAAL,CAAa,IAAb,CAAkB;MAChB,MAAM,EAAA,MADU;MAEhB,KAAK,EAAA,KAFW;MAGhB,IAAI,EAAE,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAA,IAAA,GAAQ,EAHE;MAIhB,IAAI,EAAE,OAJU;MAKhB,SAAS,EAAE,IAAI,CAAC,GAAL;IALK,CAAlB;EAOD,CARD;;EAUA,KAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;IACE,IAAM,SAAS,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,UAAC,CAAD,EAAE;MAAK,OAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACrC,CADqC,CAAA,EACpC;QACJ,IAAI,EAAE,CAAC,CAAC,IAAF,CAAO,IAAP,CAFkC,GAElC;MADF,CADoC,CAAA;IAGxC,CAHgB,CAAlB,CADF,CAKE;;IACA,IAAI,OAAO,CAAC,KAAZ,EAAmB;MACjB,OAAO,CAAC,KAAR,CAAc,SAAd;IACD,CAFD,MAEO;MACL,OAAO,CAAC,GAAR,CAAY,SAAZ;IACD;;IACD,KAAK,OAAL,GAAe,EAAf;EACD,CAZD;EAcA;;AAEG;;;EACH,KAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;IACE,OAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,UAAC,CAAD,EAAE;MACxB,OAAO;QACL,CAAC,EAAE,CAAC,CAAC,MADA;QAEL,CAAC,EAAE,CAAC,CAAC,KAFA;QAGL,CAAC,EAAE,CAAC,CAAC,IAHA;QAIL,CAAC,EAAE,iBAAiB,CAAC,CAAC,CAAC,IAAH,CAJf;QAKL,CAAC,EAAE,CAAC,CAAC;MALA,CAAP;IAOD,CARM,CAAP;EASD,CAVD;;EAWF,OAAA,KAAA;AAAC,CA3DD,EAAA","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nvar compactMetricType = function (type) {\n    var enums = {\n        gauge: 'g',\n        counter: 'c',\n    };\n    return enums[type];\n};\nvar Stats = /** @class */ (function () {\n    function Stats(remoteMetrics) {\n        this.metrics = [];\n        this.remoteMetrics = remoteMetrics;\n    }\n    Stats.prototype.increment = function (metric, by, tags) {\n        var _a;\n        if (by === void 0) { by = 1; }\n        this.metrics.push({\n            metric: metric,\n            value: by,\n            tags: tags !== null && tags !== void 0 ? tags : [],\n            type: 'counter',\n            timestamp: Date.now(),\n        });\n        (_a = this.remoteMetrics) === null || _a === void 0 ? void 0 : _a.increment(metric, tags !== null && tags !== void 0 ? tags : []);\n    };\n    Stats.prototype.gauge = function (metric, value, tags) {\n        this.metrics.push({\n            metric: metric,\n            value: value,\n            tags: tags !== null && tags !== void 0 ? tags : [],\n            type: 'gauge',\n            timestamp: Date.now(),\n        });\n    };\n    Stats.prototype.flush = function () {\n        var formatted = this.metrics.map(function (m) { return (__assign(__assign({}, m), { tags: m.tags.join(',') })); });\n        // ie doesn't like console.table\n        if (console.table) {\n            console.table(formatted);\n        }\n        else {\n            console.log(formatted);\n        }\n        this.metrics = [];\n    };\n    /**\n     * compact keys for smaller payload\n     */\n    Stats.prototype.serialize = function () {\n        return this.metrics.map(function (m) {\n            return {\n                m: m.metric,\n                v: m.value,\n                t: m.tags,\n                k: compactMetricType(m.type),\n                e: m.timestamp,\n            };\n        });\n    };\n    return Stats;\n}());\nexport default Stats;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}