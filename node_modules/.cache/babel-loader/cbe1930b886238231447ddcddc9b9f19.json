{"ast":null,"code":"'use strict';\n/**\n * Matcher, slightly modified from:\n *\n * https://github.com/csnover/js-iso8601/blob/lax/iso8601.js\n */\n\nvar matcher = /^(\\d{4})(?:-?(\\d{2})(?:-?(\\d{2}))?)?(?:([ T])(\\d{2}):?(\\d{2})(?::?(\\d{2})(?:[,\\.](\\d{1,}))?)?(?:(Z)|([+\\-])(\\d{2})(?::?(\\d{2}))?)?)?$/;\n/**\n * Convert an ISO date string to a date. Fallback to native `Date.parse`.\n *\n * https://github.com/csnover/js-iso8601/blob/lax/iso8601.js\n *\n * @param {String} iso\n * @return {Date}\n */\n\nexports.parse = function (iso) {\n  var numericKeys = [1, 5, 6, 7, 11, 12];\n  var arr = matcher.exec(iso);\n  var offset = 0; // fallback to native parsing\n\n  if (!arr) {\n    return new Date(iso);\n  }\n  /* eslint-disable no-cond-assign */\n  // remove undefined values\n\n\n  for (var i = 0, val; val = numericKeys[i]; i++) {\n    arr[val] = parseInt(arr[val], 10) || 0;\n  }\n  /* eslint-enable no-cond-assign */\n  // allow undefined days and months\n\n\n  arr[2] = parseInt(arr[2], 10) || 1;\n  arr[3] = parseInt(arr[3], 10) || 1; // month is 0-11\n\n  arr[2]--; // allow abitrary sub-second precision\n\n  arr[8] = arr[8] ? (arr[8] + '00').substring(0, 3) : 0; // apply timezone if one exists\n\n  if (arr[4] === ' ') {\n    offset = new Date().getTimezoneOffset();\n  } else if (arr[9] !== 'Z' && arr[10]) {\n    offset = arr[11] * 60 + arr[12];\n\n    if (arr[10] === '+') {\n      offset = 0 - offset;\n    }\n  }\n\n  var millis = Date.UTC(arr[1], arr[2], arr[3], arr[5], arr[6] + offset, arr[7], arr[8]);\n  return new Date(millis);\n};\n/**\n * Checks whether a `string` is an ISO date string. `strict` mode requires that\n * the date string at least have a year, month and date.\n *\n * @param {String} string\n * @param {Boolean} strict\n * @return {Boolean}\n */\n\n\nexports.is = function (string, strict) {\n  if (typeof string !== 'string') {\n    return false;\n  }\n\n  if (strict && /^\\d{4}-\\d{2}-\\d{2}/.test(string) === false) {\n    return false;\n  }\n\n  return matcher.test(string);\n};","map":{"version":3,"names":["matcher","exports","parse","iso","numericKeys","arr","exec","offset","Date","i","val","parseInt","substring","getTimezoneOffset","millis","UTC","is","string","strict","test"],"sources":["C:/Users/rober/Documents/copiaswaps-client/swaps-client/node_modules/@segment/isodate/lib/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Matcher, slightly modified from:\n *\n * https://github.com/csnover/js-iso8601/blob/lax/iso8601.js\n */\n\nvar matcher = /^(\\d{4})(?:-?(\\d{2})(?:-?(\\d{2}))?)?(?:([ T])(\\d{2}):?(\\d{2})(?::?(\\d{2})(?:[,\\.](\\d{1,}))?)?(?:(Z)|([+\\-])(\\d{2})(?::?(\\d{2}))?)?)?$/;\n\n/**\n * Convert an ISO date string to a date. Fallback to native `Date.parse`.\n *\n * https://github.com/csnover/js-iso8601/blob/lax/iso8601.js\n *\n * @param {String} iso\n * @return {Date}\n */\n\nexports.parse = function(iso) {\n  var numericKeys = [1, 5, 6, 7, 11, 12];\n  var arr = matcher.exec(iso);\n  var offset = 0;\n\n  // fallback to native parsing\n  if (!arr) {\n    return new Date(iso);\n  }\n\n  /* eslint-disable no-cond-assign */\n  // remove undefined values\n  for (var i = 0, val; val = numericKeys[i]; i++) {\n    arr[val] = parseInt(arr[val], 10) || 0;\n  }\n  /* eslint-enable no-cond-assign */\n\n  // allow undefined days and months\n  arr[2] = parseInt(arr[2], 10) || 1;\n  arr[3] = parseInt(arr[3], 10) || 1;\n\n  // month is 0-11\n  arr[2]--;\n\n  // allow abitrary sub-second precision\n  arr[8] = arr[8] ? (arr[8] + '00').substring(0, 3) : 0;\n\n  // apply timezone if one exists\n  if (arr[4] === ' ') {\n    offset = new Date().getTimezoneOffset();\n  } else if (arr[9] !== 'Z' && arr[10]) {\n    offset = arr[11] * 60 + arr[12];\n    if (arr[10] === '+') {\n      offset = 0 - offset;\n    }\n  }\n\n  var millis = Date.UTC(arr[1], arr[2], arr[3], arr[5], arr[6] + offset, arr[7], arr[8]);\n  return new Date(millis);\n};\n\n\n/**\n * Checks whether a `string` is an ISO date string. `strict` mode requires that\n * the date string at least have a year, month and date.\n *\n * @param {String} string\n * @param {Boolean} strict\n * @return {Boolean}\n */\n\nexports.is = function(string, strict) {\n  if (typeof string !== 'string') {\n    return false;\n  }\n  if (strict && (/^\\d{4}-\\d{2}-\\d{2}/).test(string) === false) {\n    return false;\n  }\n  return matcher.test(string);\n};\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,OAAO,GAAG,uIAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACC,KAAR,GAAgB,UAASC,GAAT,EAAc;EAC5B,IAAIC,WAAW,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,CAAlB;EACA,IAAIC,GAAG,GAAGL,OAAO,CAACM,IAAR,CAAaH,GAAb,CAAV;EACA,IAAII,MAAM,GAAG,CAAb,CAH4B,CAK5B;;EACA,IAAI,CAACF,GAAL,EAAU;IACR,OAAO,IAAIG,IAAJ,CAASL,GAAT,CAAP;EACD;EAED;EACA;;;EACA,KAAK,IAAIM,CAAC,GAAG,CAAR,EAAWC,GAAhB,EAAqBA,GAAG,GAAGN,WAAW,CAACK,CAAD,CAAtC,EAA2CA,CAAC,EAA5C,EAAgD;IAC9CJ,GAAG,CAACK,GAAD,CAAH,GAAWC,QAAQ,CAACN,GAAG,CAACK,GAAD,CAAJ,EAAW,EAAX,CAAR,IAA0B,CAArC;EACD;EACD;EAEA;;;EACAL,GAAG,CAAC,CAAD,CAAH,GAASM,QAAQ,CAACN,GAAG,CAAC,CAAD,CAAJ,EAAS,EAAT,CAAR,IAAwB,CAAjC;EACAA,GAAG,CAAC,CAAD,CAAH,GAASM,QAAQ,CAACN,GAAG,CAAC,CAAD,CAAJ,EAAS,EAAT,CAAR,IAAwB,CAAjC,CAnB4B,CAqB5B;;EACAA,GAAG,CAAC,CAAD,CAAH,GAtB4B,CAwB5B;;EACAA,GAAG,CAAC,CAAD,CAAH,GAASA,GAAG,CAAC,CAAD,CAAH,GAAS,CAACA,GAAG,CAAC,CAAD,CAAH,GAAS,IAAV,EAAgBO,SAAhB,CAA0B,CAA1B,EAA6B,CAA7B,CAAT,GAA2C,CAApD,CAzB4B,CA2B5B;;EACA,IAAIP,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;IAClBE,MAAM,GAAG,IAAIC,IAAJ,GAAWK,iBAAX,EAAT;EACD,CAFD,MAEO,IAAIR,GAAG,CAAC,CAAD,CAAH,KAAW,GAAX,IAAkBA,GAAG,CAAC,EAAD,CAAzB,EAA+B;IACpCE,MAAM,GAAGF,GAAG,CAAC,EAAD,CAAH,GAAU,EAAV,GAAeA,GAAG,CAAC,EAAD,CAA3B;;IACA,IAAIA,GAAG,CAAC,EAAD,CAAH,KAAY,GAAhB,EAAqB;MACnBE,MAAM,GAAG,IAAIA,MAAb;IACD;EACF;;EAED,IAAIO,MAAM,GAAGN,IAAI,CAACO,GAAL,CAASV,GAAG,CAAC,CAAD,CAAZ,EAAiBA,GAAG,CAAC,CAAD,CAApB,EAAyBA,GAAG,CAAC,CAAD,CAA5B,EAAiCA,GAAG,CAAC,CAAD,CAApC,EAAyCA,GAAG,CAAC,CAAD,CAAH,GAASE,MAAlD,EAA0DF,GAAG,CAAC,CAAD,CAA7D,EAAkEA,GAAG,CAAC,CAAD,CAArE,CAAb;EACA,OAAO,IAAIG,IAAJ,CAASM,MAAT,CAAP;AACD,CAvCD;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAb,OAAO,CAACe,EAAR,GAAa,UAASC,MAAT,EAAiBC,MAAjB,EAAyB;EACpC,IAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;IAC9B,OAAO,KAAP;EACD;;EACD,IAAIC,MAAM,IAAK,oBAAD,CAAuBC,IAAvB,CAA4BF,MAA5B,MAAwC,KAAtD,EAA6D;IAC3D,OAAO,KAAP;EACD;;EACD,OAAOjB,OAAO,CAACmB,IAAR,CAAaF,MAAb,CAAP;AACD,CARD"},"metadata":{},"sourceType":"script"}