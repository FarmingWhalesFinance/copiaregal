{"version":3,"sources":["webpack://@segment/analytics-next/./src/core/query-string/pickPrefix.ts","webpack://@segment/analytics-next/./src/core/query-string/index.ts"],"names":["pickPrefix","prefix","object","Object","keys","reduce","acc","key","startsWith","substr","length","queryString","analytics","query","a","document","createElement","href","params","search","slice","split","str","k","v","gracefulDecodeURIComponent","calls","ajs_uid","ajs_event","anonId","Array","isArray","ajs_aid","setAnonymousId","uid","traits","push","identify","event","props","track","Promise","all"],"mappings":"sIAQO,SAASA,EACdC,EACAC,GAEA,OAAOC,OAAOC,KAAKF,GAAQG,QAAO,SAACC,EAAwBC,GACrDA,EAAIC,WAAWP,KAEjBK,EADcC,EAAIE,OAAOR,EAAOS,SACnBR,EAAOK,IAEtB,OAAOD,IACN,I,+DCTE,SAASK,EACdC,EACAC,GAEA,IAAMC,EAAIC,SAASC,cAAc,KACjCF,EAAEG,KAAOJ,EACT,IACMK,EADSJ,EAAEK,OAAOC,MAAM,GACRC,MAAM,KAAKhB,QAAO,SAACC,EAAwBgB,GACzD,MAASA,EAAID,MAAM,KAAlBE,EAAC,KAAEC,EAAC,KAEX,OADAlB,EAAIiB,IAAK,EAAAE,EAAA,GAA2BD,GAC7BlB,IACN,IAEGoB,EAAQ,GAENC,EAAgCT,EAAM,QAA7BU,EAAuBV,EAAM,UAE9C,GAFwCA,EAAM,QAEjC,CACX,IAAMW,EAASC,MAAMC,QAAQb,EAAOc,SAChCd,EAAOc,QAAQ,GACfd,EAAOc,QAEXpB,EAAUqB,eAAeJ,GAG3B,GAAIF,EAAS,CACX,IAAMO,EAAMJ,MAAMC,QAAQb,EAAOS,SAC7BT,EAAOS,QAAQ,GACfT,EAAOS,QACLQ,EAASnC,EAAW,aAAckB,GAExCQ,EAAMU,KAAKxB,EAAUyB,SAASH,EAAKC,IAGrC,GAAIP,EAAW,CACb,IAAMU,EAAQR,MAAMC,QAAQb,EAAOU,WAC/BV,EAAOU,UAAU,GACjBV,EAAOU,UACLW,EAAQvC,EAAW,YAAakB,GACtCQ,EAAMU,KAAKxB,EAAU4B,MAAMF,EAAOC,IAGpC,OAAOE,QAAQC,IAAIhB","file":"queryString.bundle.b10623c878690bb0d2a3.js","sourcesContent":["import { QueryStringParams } from '.'\n\n/**\n * Returns an object containing only the properties prefixed by the input\n * string.\n * Ex: prefix('ajs_traits_', { ajs_traits_address: '123 St' })\n * will return { address: '123 St' }\n **/\nexport function pickPrefix(\n  prefix: string,\n  object: QueryStringParams\n): QueryStringParams {\n  return Object.keys(object).reduce((acc: QueryStringParams, key: string) => {\n    if (key.startsWith(prefix)) {\n      const field = key.substr(prefix.length)\n      acc[field] = object[key]!\n    }\n    return acc\n  }, {})\n}\n","import { pickPrefix } from './pickPrefix'\nimport { gracefulDecodeURIComponent } from './gracefulDecodeURIComponent'\nimport { Analytics } from '../analytics'\nimport { Context } from '../context'\n\nexport interface QueryStringParams {\n  [key: string]: string | null\n}\n\nexport function queryString(\n  analytics: Analytics,\n  query: string\n): Promise<Context[]> {\n  const a = document.createElement('a')\n  a.href = query\n  const parsed = a.search.slice(1)\n  const params = parsed.split('&').reduce((acc: QueryStringParams, str) => {\n    const [k, v] = str.split('=')\n    acc[k] = gracefulDecodeURIComponent(v)\n    return acc\n  }, {})\n\n  const calls = []\n\n  const { ajs_uid, ajs_event, ajs_aid } = params\n\n  if (ajs_aid) {\n    const anonId = Array.isArray(params.ajs_aid)\n      ? params.ajs_aid[0]\n      : params.ajs_aid\n\n    analytics.setAnonymousId(anonId)\n  }\n\n  if (ajs_uid) {\n    const uid = Array.isArray(params.ajs_uid)\n      ? params.ajs_uid[0]\n      : params.ajs_uid\n    const traits = pickPrefix('ajs_trait_', params)\n\n    calls.push(analytics.identify(uid, traits))\n  }\n\n  if (ajs_event) {\n    const event = Array.isArray(params.ajs_event)\n      ? params.ajs_event[0]\n      : params.ajs_event\n    const props = pickPrefix('ajs_prop_', params)\n    calls.push(analytics.track(event, props))\n  }\n\n  return Promise.all(calls)\n}\n"],"sourceRoot":""}