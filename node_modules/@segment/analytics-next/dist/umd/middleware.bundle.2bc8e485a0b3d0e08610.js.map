{"version":3,"sources":["webpack://@segment/analytics-next/./src/plugins/middleware/index.ts"],"names":["applyDestinationMiddleware","destination","evt","middleware","Promise","applyMiddleware","event","fn","nextCalled","returnedEvent","payload","clone","traverse","integration","next","obj","integrations","md","result","sourceMiddlewarePlugin","apply","ctx","retry","type","reason","name","version","isLoaded","load","resolve","track","page","identify","alias","group"],"mappings":"+RAwBO,SAAeA,EACpBC,EACAC,EACAC,G,2BACCC,SAAO,WACR,SAAeC,EACbC,EACAC,G,2BACCH,SAAO,W,kEAIR,OAHII,GAAa,EACbC,EAAqC,KAEzC,IAAM,OACJF,EAAG,CACDG,SAAS,OAASJ,EAAO,CACvBK,OAAO,EACPC,UAAU,IAEZC,YAAaZ,EACba,KAAI,SAACZ,GACHM,GAAa,EAED,OAARN,IACFO,EAAgB,MAGdP,IACFO,EAAgBP,EAAIa,U,OAc5B,OA7BA,SAqBKP,GAAgC,OAAlBC,KACjBA,EAAgBA,GACFO,cAAe,oBACxBV,EAAMU,gBAAY,MACpBf,IAAc,EAAK,KAIjB,CAAP,EAAOQ,U,wEAGQ,EAAAN,E,wBAAA,YAANc,EAAE,KACI,GAAMZ,EAAgBH,EAAKe,KADjB,M,OAEzB,GAAe,QADTC,EAAS,UAEb,MAAO,CAAP,EAAO,MAEThB,EAAMgB,E,wBALS,I,aAQjB,MAAO,CAAP,EAAOhB,UAGF,SAASiB,EACdZ,EACAS,GAEA,SAAeI,EAAMC,G,2BAAejB,SAAO,W,8DAGzC,OAFII,GAAa,EAEjB,IAAM,OACJD,EAAG,CACDG,SAAS,OAASW,EAAIf,MAAO,CAC3BK,OAAO,EACPC,UAAU,IAEZI,aAAcA,UAAgB,GAC9BF,KAAI,SAACZ,GACHM,GAAa,EACTN,IACFmB,EAAIf,MAAQJ,EAAIa,U,OAMxB,GAhBA,UAgBKP,EACH,MAAM,IAAI,IAAmB,CAC3Bc,OAAO,EACPC,KAAM,0BACNC,OAAQ,uCAIZ,MAAO,CAAP,EAAOH,UAGT,MAAO,CACLI,KAAM,4BAAqBlB,EAAGkB,MAC9BF,KAAM,SACNG,QAAS,QAETC,SAAU,WAAe,UACzBC,KAAM,SAACP,GAA0B,OAAAjB,QAAQyB,QAAQR,IAEjDS,MAAOV,EACPW,KAAMX,EACNY,SAAUZ,EACVa,MAAOb,EACPc,MAAOd","file":"middleware.bundle.2bc8e485a0b3d0e08610.js","sourcesContent":["import { Context, ContextCancelation } from '../../core/context'\nimport { SegmentEvent } from '../../core/events'\nimport { Plugin } from '../../core/plugin'\nimport { asPromise } from '../../lib/as-promise'\nimport { SegmentFacade, toFacade } from '../../lib/to-facade'\n\nexport interface MiddlewareParams {\n  payload: SegmentFacade\n\n  integrations?: SegmentEvent['integrations']\n  next: (payload: MiddlewareParams['payload'] | null) => void\n}\n\nexport interface DestinationMiddlewareParams {\n  payload: SegmentFacade\n  integration: string\n  next: (payload: MiddlewareParams['payload'] | null) => void\n}\n\nexport type MiddlewareFunction = (middleware: MiddlewareParams) => void\nexport type DestinationMiddlewareFunction = (\n  middleware: DestinationMiddlewareParams\n) => void\n\nexport async function applyDestinationMiddleware(\n  destination: string,\n  evt: SegmentEvent,\n  middleware: DestinationMiddlewareFunction[]\n): Promise<SegmentEvent | null> {\n  async function applyMiddleware(\n    event: SegmentEvent,\n    fn: DestinationMiddlewareFunction\n  ): Promise<SegmentEvent | null> {\n    let nextCalled = false\n    let returnedEvent: SegmentEvent | null = null\n\n    await asPromise(\n      fn({\n        payload: toFacade(event, {\n          clone: true,\n          traverse: false,\n        }),\n        integration: destination,\n        next(evt) {\n          nextCalled = true\n\n          if (evt === null) {\n            returnedEvent = null\n          }\n\n          if (evt) {\n            returnedEvent = evt.obj\n          }\n        },\n      })\n    )\n\n    if (!nextCalled && returnedEvent !== null) {\n      returnedEvent = returnedEvent as SegmentEvent\n      returnedEvent.integrations = {\n        ...event.integrations,\n        [destination]: false,\n      }\n    }\n\n    return returnedEvent\n  }\n\n  for (const md of middleware) {\n    const result = await applyMiddleware(evt, md)\n    if (result === null) {\n      return null\n    }\n    evt = result\n  }\n\n  return evt\n}\n\nexport function sourceMiddlewarePlugin(\n  fn: MiddlewareFunction,\n  integrations: SegmentEvent['integrations']\n): Plugin {\n  async function apply(ctx: Context): Promise<Context> {\n    let nextCalled = false\n\n    await asPromise(\n      fn({\n        payload: toFacade(ctx.event, {\n          clone: true,\n          traverse: false,\n        }),\n        integrations: integrations ?? {},\n        next(evt) {\n          nextCalled = true\n          if (evt) {\n            ctx.event = evt.obj\n          }\n        },\n      })\n    )\n\n    if (!nextCalled) {\n      throw new ContextCancelation({\n        retry: false,\n        type: 'middleware_cancellation',\n        reason: 'Middleware `next` function skipped',\n      })\n    }\n\n    return ctx\n  }\n\n  return {\n    name: `Source Middleware ${fn.name}`,\n    type: 'before',\n    version: '0.1.0',\n\n    isLoaded: (): boolean => true,\n    load: (ctx): Promise<Context> => Promise.resolve(ctx),\n\n    track: apply,\n    page: apply,\n    identify: apply,\n    alias: apply,\n    group: apply,\n  }\n}\n"],"sourceRoot":""}