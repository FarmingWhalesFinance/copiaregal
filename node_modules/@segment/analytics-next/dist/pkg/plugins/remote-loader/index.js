import { __assign, __awaiter, __generator } from "tslib";
import { asPromise } from '../../lib/as-promise';
import { loadScript } from '../../lib/load-script';
import { getCDN } from '../../lib/parse-cdn';
function validate(pluginLike) {
    if (!Array.isArray(pluginLike)) {
        throw new Error('Not a valid list of plugins');
    }
    var required = ['load', 'isLoaded', 'name', 'version', 'type'];
    pluginLike.forEach(function (plugin) {
        required.forEach(function (method) {
            var _a;
            if (plugin[method] === undefined) {
                throw new Error("Plugin: ".concat((_a = plugin.name) !== null && _a !== void 0 ? _a : 'unknown', " missing required function ").concat(method));
            }
        });
    });
    return true;
}
export function remoteLoader(settings, userIntegrations, mergedIntegrations, obfuscate) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var allPlugins, cdn, pluginPromises;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    allPlugins = [];
                    cdn = getCDN();
                    pluginPromises = ((_a = settings.remotePlugins) !== null && _a !== void 0 ? _a : []).map(function (remotePlugin) { return __awaiter(_this, void 0, void 0, function () {
                        var urlSplit, name_1, obfuscatedURL, error_1, libraryName, pluginFactory, plugin, plugins, error_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if ((userIntegrations.All === false &&
                                        !userIntegrations[remotePlugin.name]) ||
                                        userIntegrations[remotePlugin.name] === false)
                                        return [2 /*return*/];
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 12, , 13]);
                                    if (!obfuscate) return [3 /*break*/, 7];
                                    urlSplit = remotePlugin.url.split('/');
                                    name_1 = urlSplit[urlSplit.length - 2];
                                    obfuscatedURL = remotePlugin.url.replace(name_1, btoa(name_1).replace(/=/g, ''));
                                    _a.label = 2;
                                case 2:
                                    _a.trys.push([2, 4, , 6]);
                                    return [4 /*yield*/, loadScript(obfuscatedURL.replace('https://cdn.segment.com', cdn))];
                                case 3:
                                    _a.sent();
                                    return [3 /*break*/, 6];
                                case 4:
                                    error_1 = _a.sent();
                                    // Due to syncing concerns it is possible that the obfuscated action destination (or requested version) might not exist.
                                    // We should use the unobfuscated version as a fallback.
                                    return [4 /*yield*/, loadScript(remotePlugin.url.replace('https://cdn.segment.com', cdn))];
                                case 5:
                                    // Due to syncing concerns it is possible that the obfuscated action destination (or requested version) might not exist.
                                    // We should use the unobfuscated version as a fallback.
                                    _a.sent();
                                    return [3 /*break*/, 6];
                                case 6: return [3 /*break*/, 9];
                                case 7: return [4 /*yield*/, loadScript(remotePlugin.url.replace('https://cdn.segment.com', cdn))];
                                case 8:
                                    _a.sent();
                                    _a.label = 9;
                                case 9:
                                    libraryName = remotePlugin.libraryName;
                                    if (!(typeof window[libraryName] === 'function')) return [3 /*break*/, 11];
                                    pluginFactory = window[libraryName];
                                    return [4 /*yield*/, asPromise(pluginFactory(__assign(__assign({}, remotePlugin.settings), mergedIntegrations[remotePlugin.name])))];
                                case 10:
                                    plugin = _a.sent();
                                    plugins = Array.isArray(plugin) ? plugin : [plugin];
                                    validate(plugins);
                                    allPlugins.push.apply(allPlugins, plugins);
                                    _a.label = 11;
                                case 11: return [3 /*break*/, 13];
                                case 12:
                                    error_2 = _a.sent();
                                    console.warn('Failed to load Remote Plugin', error_2);
                                    return [3 /*break*/, 13];
                                case 13: return [2 /*return*/];
                            }
                        });
                    }); });
                    return [4 /*yield*/, Promise.all(pluginPromises)];
                case 1:
                    _b.sent();
                    return [2 /*return*/, allPlugins.filter(Boolean)];
            }
        });
    });
}
//# sourceMappingURL=index.js.map